{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"patentCity","text":"<p>Welcome to the patentCity documentation website.</p> <p>patentCity is the data backbone of Bergeaud and Verluise (2021).</p> BibTeX <pre><code>@techreport{bergeaudVerluise2021,\ntitle={One Century of Innovation in Europe and the US},\nauthor={Bergeaud, Antonin and Verluise, Cyril},\nyear={2021}\n}\n</code></pre> Chicago <pre><code>Bergeaud, Antonin and Verluise, Cyril. \"One Century of Innovation in Europe and the US\". 2021\n</code></pre> <p>Here, you can find the project and API documentation.</p> <p>We open source the code to support future extensions and a collaborative way to create and continuously improve research databases. patentCity is due to expand and improve continuously in the coming years. Make sure you receive updates, join our newsletter and star the GitHub repository!</p> <p></p> \ud83d\udc8c Subscribe"},{"location":"API_BREW/","title":"brew","text":"<pre><code>                         Brew patentcity dataset\n</code></pre> <p>General functioning: Stream text blobs | process | print json blobs to stdout</p> <ul> <li>beta: entities only</li> <li>v1: entities &amp; relationship</li> </ul>"},{"location":"API_BREW/#patentcity.brew.grind","title":"<code>grind(path, max_workers=10)</code>","text":"<p>Stream texts in <code>path</code> and return json objects to stdout. Files are expected to be patent texts named after the publication_number of the patent (e.g. US-12345-A.txt).</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>data path, wildcard allowed</p> required <code>max_workers</code> <code>int</code> <p>max number of workers</p> <code>10</code> <p>Output:     <pre><code>{\"publication_number\": str, \"text\": str, \"hash_id\": str}\n</code></pre></p> <p>Usage: <pre><code>patencity brew v1.grind \"data/US/*.txt\"\n# Nb: if the file is large, you can split and zip\n</code></pre></p> Source code in <code>patentcity/brew.py</code> <pre><code>@app.command(name=\"v1.grind\")\ndef grind(path: str, max_workers: int = 10):\n\"\"\"Stream texts in `path` and return json objects to stdout.\n    Files are expected to be patent texts named after the\n    publication_number of the patent (e.g. US-12345-A.txt).\n\n\n    Arguments:\n        path: data path, wildcard allowed\n        max_workers: max number of workers\n\n    **Output**:\n        ```json\n        {\"publication_number\": str, \"text\": str, \"hash_id\": str}\n        ```\n\n    **Usage:**\n        ```shell\n        patencity brew v1.grind \"data/US/*.txt\"\n        # Nb: if the file is large, you can split and zip\n        ```\n    \"\"\"\n    files = iglob(path)\n    with ThreadPoolExecutor(max_workers=max_workers) as executor:\n        executor.map(_get_blob, files)\n</code></pre>"},{"location":"API_BREW/#patentcity.brew.topping","title":"<code>topping(file, config_file=None, max_workers=10)</code>","text":"<p>Stream data in <code>file</code> and  return enriched v1 json object to stdout.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>str</code> <p>file path</p> required <code>config_file</code> <code>str</code> <p>topping config file</p> <code>None</code> <code>max_workers</code> <p>max number of workers</p> <code>10</code> <p>Output:     <pre><code>{\"publication_number\": str, \"patentee\": List[dict], \"hash_id\": str,\n\"model_ents\": str, \"model_rels\": str, \"git_sha\": str}\n</code></pre></p> <p>Usage: <pre><code>mv data/US/entrel_uspatentxx.jsonl data/US/entrel_uspatentxx.jsonl.tmp\npatencity v1.topping --config-file configs/top_xxpatentxx.yaml \"data/US/entrel_uspatentxx.jsonl.tmp\"  # pylint: disable=line-too-long\n# Nb: if the file is large, you can split and zip\n</code></pre></p> Source code in <code>patentcity/brew.py</code> <pre><code>@app.command(name=\"v1.topping\")\ndef topping(file: str, config_file: str = None, max_workers=10):\n\"\"\"Stream data in `file` and  return enriched v1 json object to stdout.\n\n    Arguments:\n        file: file path\n        config_file: topping config file\n        max_workers: max number of workers\n\n    **Output**:\n        ```json\n        {\"publication_number\": str, \"patentee\": List[dict], \"hash_id\": str,\n        \"model_ents\": str, \"model_rels\": str, \"git_sha\": str}\n        ```\n\n    **Usage:**\n        ```shell\n        mv data/US/entrel_uspatentxx.jsonl data/US/entrel_uspatentxx.jsonl.tmp\n        patencity v1.topping --config-file configs/top_xxpatentxx.yaml \"data/US/entrel_uspatentxx.jsonl.tmp\"  # pylint: disable=line-too-long\n        # Nb: if the file is large, you can split and zip\n        ```\n\n    \"\"\"\n    with open(config_file, \"r\") as config_file_:\n        config = yaml.load(config_file_, Loader=yaml.FullLoader)\n    for k, v in config[\"cit_code\"].items():  # pylint: disable=invalid-name\n        config[\"cit_code\"].update({k: json.loads(open(v, \"r\").read())})\n\n    with open(file, \"r\") as lines:\n        with ThreadPoolExecutor(max_workers=max_workers) as executor:\n            executor.map(_topping, lines, repeat(config))\n</code></pre>"},{"location":"API_BREW/#patentcity.brew.v1","title":"<code>v1(path, model, rel_config, max_char=9999, batch_size=1000, inDelim='|')</code>","text":"<p>Stream json objects in <code>path</code> and return json v1 objects to stdout.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>data path, wildcard allowed</p> required <code>model</code> <code>str</code> <p>model path</p> required <code>rel_config</code> <code>str</code> <p>relationship resolution config file path</p> required <code>max_char</code> <code>int</code> <p>max char considered for entity extraction</p> <code>9999</code> <code>batch_size</code> <code>int</code> <p>size of the data batch passed to spaCy model</p> <code>1000</code> <code>inDelim</code> <code>str</code> <p>in delimiter</p> <code>'|'</code> <p>Output:     <pre><code>{\"publication_number\": str, \"patentee\": List[dict], \"hash_id\": str,\n\"model_ents\": str, \"model_rels\": str, \"git_sha\": str}\n</code></pre></p> <p>Usage: <pre><code>patencity brew v1 \"data/US/uspatentxx*.jsonl\"\n# Nb: if the file is large, you can split and zip\n</code></pre></p> Source code in <code>patentcity/brew.py</code> <pre><code>@app.command()\ndef v1(  # pylint: disable=invalid-name\n    path: str,\n    model: str,\n    rel_config: str,\n    max_char: int = 9999,\n    batch_size: int = 1000,\n    inDelim: str = \"|\",  # pylint: disable=invalid-name\n):\n\"\"\"\n    Stream json objects in `path` and return json v1 objects to stdout.\n\n    Arguments:\n        path: data path, wildcard allowed\n        model: model path\n        rel_config: relationship resolution config file path\n        max_char: max char considered for entity extraction\n        batch_size: size of the data batch passed to spaCy model\n        inDelim: in delimiter\n\n    **Output**:\n        ```json\n        {\"publication_number\": str, \"patentee\": List[dict], \"hash_id\": str,\n        \"model_ents\": str, \"model_rels\": str, \"git_sha\": str}\n        ```\n\n    **Usage:**\n        ```shell\n        patencity brew v1 \"data/US/uspatentxx*.jsonl\"\n        # Nb: if the file is large, you can split and zip\n        ```\n    \"\"\"\n    nlp = spacy.load(model)\n    with open(rel_config, \"r\") as config_file:\n        config = yaml.load(config_file, Loader=yaml.FullLoader)\n    nlp.add_pipe(\"relation_extractor\", config={\"config\": config}, last=True)\n\n    files = glob(path)\n    for file in files:\n        publication_numbers = list(\n            (json.loads(line)[\"publication_number\"] for line in open(file, \"r\"))\n        )\n        hash_ids = list((json.loads(line)[\"hash_id\"] for line in open(file, \"r\")))\n        with open(file, \"r\") as lines:\n            texts = (json.loads(line)[\"text\"][:max_char] for line in lines)\n            docs = nlp.pipe(texts, batch_size=batch_size)\n            for i, doc in enumerate(docs):\n                publication_number = publication_numbers[i]\n                hash_id = hash_ids[i]\n                patentees = [\n                    {k: clean_text(v, inDelim) for k, v in patentee.items()}\n                    for patentee in doc._.patentees\n                ]\n                row = {\n                    \"publication_number\": publication_number,\n                    \"patentee\": patentees,\n                    \"hash_id\": hash_id,\n                    \"model_ents\": model,\n                    \"model_rels\": rel_config,\n                    \"git_sha\": sha,\n                }\n                typer.echo(json.dumps(row))\n</code></pre>"},{"location":"API_EVAL/","title":"eval","text":"<pre><code>                        Eval patentcity model components\n</code></pre> <p>Take model (and test data, opt) and return performance metrics report</p>"},{"location":"API_EVAL/#patentcity.eval.citizenship_fst","title":"<code>citizenship_fst(test_file, fst_file, fuzzy_match=True, verbose=False)</code>","text":"<p>Evaluate citizenship finite state transducer and return report to stdout</p> <p>Parameters:</p> Name Type Description Default <code>test_file</code> <code>str</code> <p>test file path</p> required <code>fst_file</code> <code>str</code> <p>fst file path</p> required <code>fuzzy_match</code> <code>bool</code> <p>accept/reject fuzzy match</p> <code>True</code> <code>verbose</code> <code>bool</code> <p>report verbosity</p> <code>False</code> <p>Usage: <pre><code>patentcity eval citizenship-fst data/gold_cit_uspatent01.csv lib/fst_cit.json\n</code></pre></p> Source code in <code>patentcity/eval.py</code> <pre><code>@app.command()\ndef citizenship_fst(\n    test_file: str, fst_file: str, fuzzy_match: bool = True, verbose: bool = False\n):\n\"\"\"Evaluate citizenship finite state transducer and return report to stdout\n\n    Arguments:\n        test_file: test file path\n        fst_file: fst file path\n        fuzzy_match: accept/reject fuzzy match\n        verbose: report verbosity\n\n    **Usage:**\n        ```shell\n        patentcity eval citizenship-fst data/gold_cit_uspatent01.csv lib/fst_cit.json\n        ```\n    \"\"\"\n    fst = json.loads(open(fst_file, \"r\").read())\n    test_df = pd.read_csv(test_file, sep=\";\")\n    test_df = test_df.replace({np.nan: None})\n\n    res = []\n    for _, row in test_df.iterrows():\n        text = row[\"text\"]\n        pred = get_cit_code(text, fst, fuzzy_match)\n        res += [\n            [row[\"publication_number\"], text, row[\"gold\"], pred, row[\"gold\"] == pred]\n        ]\n    res = pd.DataFrame(\n        res, columns=[\"publication_number\", \"text\", \"gold\", \"pred\", \"res\"]\n    )\n    errors = res.query(\"res==False\")\n\n    filename = os.path.basename(test_file)\n\n    acc = 1 - len(errors) / len(res)\n    typer.secho(f\"## {filename}\\n\", fg=typer.colors.BLUE)\n    typer.echo(f\"Accuracy (fuzzy-match {fuzzy_match}): {acc * 100:.2f}%\\n\")\n    if verbose:\n        typer.echo(f\"### Errors\\n{errors.to_markdown()}\")\n</code></pre>"},{"location":"API_EVAL/#patentcity.eval.patentee_deduplication","title":"<code>patentee_deduplication(test_file, verbose=False)</code>","text":"<p>Evaluate patentee deduplication and return the best threshold and related deduplication accuracy to stdout. Note: Deduplication is based on the relative levenshtein edit distance.</p> <p>Parameters:</p> Name Type Description Default <code>test_file</code> <code>str</code> <p>test file path</p> required <code>verbose</code> <code>bool</code> <p>report verbosity</p> <code>False</code> <p>Usage: <pre><code>patentcity eval patentee-deduplication data/gold_deduplication_uspatent01.jsonl\n</code></pre></p> Source code in <code>patentcity/eval.py</code> <pre><code>@app.command()\ndef patentee_deduplication(test_file: str, verbose: bool = False):\n\"\"\"Evaluate patentee deduplication and return the best threshold and related deduplication accuracy to stdout.\n    Note: Deduplication is based on the relative levenshtein edit distance.\n\n    Arguments:\n        test_file: test file path\n        verbose: report verbosity\n\n    **Usage:**\n        ```shell\n        patentcity eval patentee-deduplication data/gold_deduplication_uspatent01.jsonl\n        ```\n    \"\"\"\n    df = pd.read_json(test_file, lines=True)\n    df[\"clas\"] = df[\"answer\"].apply(\n        lambda x: 0 if x == \"reject\" else (1 if x == \"accept\" else None)\n    )\n    df = df.query(\"clas==clas\").copy()\n    accuracy = {}\n    for threshold in np.arange(0, 2, 0.01):\n        df[\"pred\"] = df[\"lev_dist_rel\"].apply(\n            lambda x: 1 if x &lt; threshold else 0  # pylint: disable=cell-var-from-loop\n        )\n        nb_true = len(df.query(\"clas==pred\"))\n        acc = nb_true / len(df)\n        accuracy.update({threshold: acc})\n    accuracy = pd.DataFrame.from_dict(accuracy, orient=\"index\", columns=[\"accuracy\"])\n    if verbose:\n        typer.secho(\"## Levenshtein distance (rel) distribution\", fg=typer.colors.BLUE)\n        typer.echo(\n            (\n                df.groupby(\"answer\")\n                .describe(percentiles=np.arange(0, 1, 0.01))[\"lev_dist_rel\"]\n                .filter(regex=\"%\")\n                .T.to_markdown()\n            )\n        )\n    threshold_star, accuracy_star = (\n        accuracy.idxmax().values[0],\n        accuracy.max().values[0],\n    )\n    typer.secho(\"## Best\", fg=typer.colors.BLUE)\n    typer.echo(f\"Best threshold: {threshold_star}\\nAccuracy: {accuracy_star}\")\n</code></pre>"},{"location":"API_EVAL/#patentcity.eval.relationship_model","title":"<code>relationship_model(test_file, rel_config, report='short')</code>","text":"<p>Evaluate relationship model and return report to stdout</p> <p>Parameters:</p> Name Type Description Default <code>test_file</code> <code>str</code> <p>test file path</p> required <code>rel_config</code> <code>str</code> <p>relationship resolution config file path</p> required <code>report</code> <code>str</code> <p>size and format of the performance report (in \"short\", \"long\", \"json\")</p> <code>'short'</code> <p>Usage: <pre><code>patentcity eval relationship-model gold_rel_uspatent01.jsonl configs/rel_uspatent01.yaml\n</code></pre></p> Source code in <code>patentcity/eval.py</code> <pre><code>@app.command()\ndef relationship_model(\n    test_file: str, rel_config: str, report: str = \"short\"\n):  # pylint: disable=too-many-statements\n\"\"\"\n    Evaluate relationship model and return report to stdout\n\n    Arguments:\n        test_file: test file path\n        rel_config: relationship resolution config file path\n        report: size and format of the performance report (in \"short\", \"long\", \"json\")\n\n    **Usage:**\n        ```shell\n        patentcity eval relationship-model gold_rel_uspatent01.jsonl configs/rel_uspatent01.yaml\n        ```\n    \"\"\"\n    # TODO Transition to EntityRelationshipComponent\n    assert report in [\"short\", \"long\", \"json\"]\n\n    def eval_performance(pred, gold, label: str = None):\n        def get_rel(relations, label):\n            rel = [\n                {\n                    \"head\": [\n                        rel[\"head_span\"][\"token_start\"],\n                        rel[\"head_span\"][\"token_end\"],\n                    ],\n                    \"child\": [\n                        rel[\"child_span\"][\"token_start\"],\n                        rel[\"child_span\"][\"token_end\"],\n                    ],\n                    \"label\": rel[\"label\"],\n                }\n                for rel in relations\n            ]\n            if label:\n                rel = [rel_ for rel_ in rel if rel_[\"label\"] == label]\n            return rel\n\n        rel_pred = get_rel(pred, label)\n        rel_gold = get_rel(gold, label)\n\n        true = list(rel_gold)\n        true_positives = [rel for rel in rel_pred if rel in rel_gold]\n        false_positives = [rel for rel in rel_pred if rel not in rel_gold]\n        false_negatives = [rel for rel in rel_gold if rel not in rel_pred]\n        return true, true_positives, false_positives, false_negatives\n\n    def report_errors(errors):\n        # an error is expressed as a rel with tokens\n        # {\"head\": [head_start, head_end], \"child\": [child_start, child_end], \"label\": label,\n        # \"tokens\": list}\n\n        def report_error(error):\n            tokens = error[\"tokens\"]\n\n            def get_text(tokens, boundaries):\n                text = tokens[boundaries[0] : boundaries[1] + 1]\n                text = \" \".join(text).replace(\"\\n\", \"\")\n                return text\n\n            start = min(error[\"head\"][0], error[\"child\"][0])\n            end = max(error[\"head\"][1], error[\"child\"][1])\n            error_rel = f\"\"\"{get_text(tokens, error['head'])}({error['head']})-&gt;-{error['label']}-&gt;-{get_text(tokens, error['child'])}({error['child']})\"\"\".replace(\n                \"\\n\", \"\"\n            )\n            error_context = f\"\"\"{get_text(tokens, [start, end])}\"\"\"\n\n            return error_rel, error_context\n\n        data = []\n        for error in errors:\n            data += [report_error(error)]\n        typer.echo(\n            pd.DataFrame(columns=[\"error_rel\", \"error_context\"], data=data).to_markdown(\n                index=False\n            )\n        )\n\n    def get_relation(head, child):\n        relation = []\n        if child:\n            for child_ in child:\n                # nb: in some configs (max_n &gt;1), there might be more than 1 child\n                # here generate something in the flavor of eg[\"relations\"] for eval\n                relation += [\n                    {\n                        \"child\": child_[\"token_end\"],\n                        \"child_span\": child_,\n                        \"head\": head[\"token_end\"],\n                        \"head_span\": head,\n                        \"label\": RELATIONS[child_[\"label\"]],\n                    }\n                ]\n        return relation\n\n    def get_report(truth_categories, report):\n        def filter_relation(label, *args):\n            assert label in list(RELATIONS.values())\n            for l in args:\n                yield [e for e in l if e[\"label\"] == label]\n\n        def get_metrics(\n            true, true_positives, false_positives, false_negatives, label=None\n        ):\n            if label:\n                (\n                    true,\n                    true_positives,\n                    false_positives,\n                    false_negatives,\n                ) = filter_relation(\n                    label, true, true_positives, false_positives, false_negatives\n                )\n            # nb_t = len(true)\n            nb_tp = len(true_positives)\n            nb_fp = len(false_positives)\n            nb_fn = len(false_negatives)\n            try:\n                prec = nb_tp / (nb_tp + nb_fp)\n                rec = nb_tp / (nb_tp + nb_fn)\n                f1 = 2 * prec * rec / (prec + rec)\n            except ZeroDivisionError:\n                rec = prec = f1 = None\n\n            return prec, rec, f1\n\n        true, true_positives, false_positives, false_negatives = truth_categories\n\n        res = {}\n        for label in [None] + list(RELATIONS.values()):\n            prec, rec, f1 = get_metrics(\n                true, true_positives, false_positives, false_negatives, label\n            )\n            label = label if label else \"ALL\"\n            if all([prec, rec, f1]):\n                res.update(\n                    {\n                        label: {\n                            \"p\": round(prec, 3),\n                            \"r\": round(rec, 3),\n                            \"f\": round(f1, 3),\n                        }\n                    }\n                )\n            else:\n                res.update({label: {\"p\": None, \"r\": None, \"f\": None}})\n\n        if report == \"json\":\n            typer.echo(json.dumps(res))\n        else:\n            typer.secho(\"\\n# Report\", fg=typer.colors.BLUE)\n            typer.echo(f\"Config file: {rel_config}\")\n            typer.secho(\"\\n## Performance\", fg=typer.colors.BLUE)\n            typer.echo(pd.DataFrame.from_dict(res).to_markdown())\n            if report == \"long\":\n                typer.secho(\"\\n## False positives\", fg=typer.colors.BLUE)\n                report_errors(sorted(false_positives, key=lambda d: d[\"label\"]))\n                typer.secho(\"\\n## False negatives\", fg=typer.colors.BLUE)\n                report_errors(sorted(false_negatives, key=lambda d: d[\"label\"]))\n\n    true, true_positives, false_positives, false_negatives = [], [], [], []\n    with open(rel_config, \"r\") as config_file:\n        cfg = yaml.load(config_file, Loader=yaml.FullLoader)\n    with open(test_file, \"r\") as lines:\n        for line in lines:\n            eg = json.loads(line)\n            ents = eg[\"spans\"]\n            relations_gold = eg[\"relations\"]\n\n            heads = [ent for ent in ents if ent[\"label\"] in [\"ASG\", \"INV\"]]\n            children = [ent for ent in ents if ent[\"label\"] not in [\"ASG\", \"INV\"]]\n\n            relations_pred = []\n            for head in heads:\n                for label in [\"LOC\", \"OCC\", \"CIT\"]:\n                    cfg_ = cfg[label]\n                    child = get_child(\n                        head,\n                        children,\n                        label,\n                        cfg_[\"max_length\"],\n                        cfg_[\"position\"],\n                        cfg_[\"max_n\"],\n                    )\n\n                    relations_pred += get_relation(head, child)\n\n            (\n                true_,\n                true_positives_,\n                false_positives_,\n                false_negatives_,\n            ) = eval_performance(relations_pred, relations_gold)\n\n            true += true_\n            true_positives += true_positives_\n            false_positives += [\n                {**fp, **{\"tokens\": [tok[\"text\"] for tok in eg[\"tokens\"]]}}\n                for fp in false_positives_\n            ]\n            false_negatives += [\n                {**fn, **{\"tokens\": [tok[\"text\"] for tok in eg[\"tokens\"]]}}\n                for fn in false_negatives_\n            ]\n    get_report((true, true_positives, false_positives, false_negatives), report)\n</code></pre>"},{"location":"API_EVAL/#patentcity.eval.spacy_model","title":"<code>spacy_model(model, components='ner')</code>","text":"<p>Evaluate spaCy model <code>components</code> and return report to stdout. Notes: i) only \"ner\" component is supported so far ii) report results from runtime eval</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>str</code> <p>model path</p> required <code>components</code> <code>str</code> <p>spaCy model components (comma separated)</p> <code>'ner'</code> <p>Usage: <pre><code>patentcity eval spacy-model models/en_ent_uspatent01\n</code></pre></p> Source code in <code>patentcity/eval.py</code> <pre><code>@app.command()\ndef spacy_model(model: str, components: str = \"ner\"):\n\"\"\"Evaluate spaCy model `components` and return report to stdout. Notes: i) only \"ner\" component is supported so far ii) report results from runtime eval\n\n    Arguments:\n        model: model path\n        components: spaCy model components (comma separated)\n\n    **Usage:**\n        ```shell\n        patentcity eval spacy-model models/en_ent_uspatent01\n        ```\n\n    \"\"\"\n\n    scores = json.loads(open(os.path.join(model, \"meta.json\"), \"r\").read())[\n        \"performance\"\n    ]\n\n    components = components.split(\",\")\n    if \"ner\" in components:\n        p, r, f = scores[\"ents_p\"], scores[\"ents_r\"], scores[\"ents_f\"]\n        typer.secho(\"NER Scores\", fg=typer.colors.BLUE)\n        perfs = pd.DataFrame.from_dict(scores[\"ents_per_type\"])\n        perfs[\"ALL\"] = (p, r, f)\n        perfs = perfs.round(2)\n        perfs = perfs[sorted(perfs.columns)]\n        typer.echo(f\"{perfs.to_markdown()}\")\n</code></pre>"},{"location":"API_GEO/","title":"geo","text":"<pre><code>                        Patentcity geo\n</code></pre> <p>general principle: address (str) -&gt; structured geo data (dict) 3 flavors: libpostal, HERE, GMAPS</p>"},{"location":"API_GEO/#patentcity.geo--libpostal-parser","title":"libpostal (parser)","text":"<p>Libpostal https://github.com/openvenues/libpostal Docker libpostal https://github.com/johnlonganecker/libpostal-rest-docker REST api https://github.com/johnlonganecker/libpostal-rest</p> <p>Note: i) if set up on GCP, you need to set up firewall rules to authorize access from the requesting machine ii) get external IP of GCP compute engine https://console.cloud.google.com/networking/addresses/list?project="},{"location":"API_GEO/#patentcity.geo--here-batch-geocoding","title":"HERE Batch (geocoding)","text":"<p>Guide: developer.here.com/documentation/batch-geocoder/dev_guide/topics/request-constructing.html API ref: https://developer.here.com/documentation/batch-geocoder/dev_guide/topics/endpoints.html</p>"},{"location":"API_GEO/#patentcity.geo--gmaps-geocoding","title":"Gmaps (geocoding)","text":"<p>API ref</p> <ul> <li>https://developers.google.com/maps/documentation/geocoding/start</li> <li>https://developers.google.com/maps/documentation/geocoding/overview</li> </ul>"},{"location":"API_GEO/#patentcity.geo.add_geoc_data","title":"<code>add_geoc_data(file, geoc_file, source=None, max_workers=5, verbose=False)</code>","text":"<p>Add geoc data from <code>geoc_file</code>to <code>file</code></p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>str</code> <p>file path</p> required <code>geoc_file</code> <code>str</code> <p>geoc file path (geocoding output, csv)</p> required <code>source</code> <code>str</code> <p>geocoding service (in [\"HERE\", \"GMAPS\", \"MANUAL\"])</p> <code>None</code> <code>max_workers</code> <code>int</code> <p>max number of workers</p> <code>5</code> <code>verbose</code> <code>bool</code> <p>verbosity</p> <code>False</code> <p>Usage: <pre><code>patentcity geo add entrel_uspatentxx.jsonl geoc_uspatentxx.here.csv --source HERE\n</code></pre></p> Source code in <code>patentcity/geo.py</code> <pre><code>@app.command(name=\"add\")\ndef add_geoc_data(\n    file: str,\n    geoc_file: str,\n    source: str = None,\n    max_workers: int = 5,\n    verbose: bool = False,\n):\n\"\"\"Add geoc data from `geoc_file`to `file`\n\n    Arguments:\n        file: file path\n        geoc_file: geoc file path (geocoding output, csv)\n        source: geocoding service (in [\"HERE\", \"GMAPS\", \"MANUAL\"])\n        max_workers: max number of workers\n        verbose: verbosity\n\n    **Usage:**\n        ```shell\n        patentcity geo add entrel_uspatentxx.jsonl geoc_uspatentxx.here.csv --source HERE\n        ```\n    \"\"\"\n    assert source in [\"GMAPS\", \"HERE\", \"MANUAL\"]\n    index = _get_geoc_index(geoc_file, dump=False)\n    blobs = open(file, \"r\")\n    with ThreadPoolExecutor(max_workers=max_workers) as executor:\n        executor.map(_update_loc, blobs, repeat(source), repeat(index), repeat(verbose))\n</code></pre>"},{"location":"API_GEO/#patentcity.geo.add_geoc_disamb","title":"<code>add_geoc_disamb(disamb_file, index_geoc_file, flavor='GMAPS', inDelim='|')</code>","text":"<p>Return a list of recId|geoc(target) from a list of recid|target.</p> <p>Parameters:</p> Name Type Description Default <code>disamb_file</code> <code>str</code> <p>disambiguation data file path</p> required <code>index_geoc_file</code> <code>str</code> <p>index geocoding file path</p> required <code>flavor</code> <code>str</code> <p>flavor of <code>index_geoc_file</code> (in [\"HERE\",\"GMAPS\"])</p> <code>'GMAPS'</code> <code>inDelim</code> <code>str</code> <p>inner delimiter</p> <code>'|'</code> <p>Usage: <pre><code>patentcity geo add.disamb ${DISAMBFILE} ${GEOCINDEX} --flavor ${FLAVOR}\n</code></pre></p> <p>Info</p> <p>Use before <code>patentcity geo add</code></p> Source code in <code>patentcity/geo.py</code> <pre><code>@app.command(name=\"add.disamb\")\ndef add_geoc_disamb(\n    disamb_file: str, index_geoc_file: str, flavor: str = \"GMAPS\", inDelim: str = \"|\"\n):\n\"\"\"Return a list of recId|geoc(target) from a list of recid|target.\n\n    Arguments:\n        disamb_file: disambiguation data file path\n        index_geoc_file: index geocoding file path\n        flavor: flavor of `index_geoc_file` (in [\"HERE\",\"GMAPS\"])\n        inDelim: inner delimiter\n\n    **Usage:**\n        ```shell\n        patentcity geo add.disamb ${DISAMBFILE} ${GEOCINDEX} --flavor ${FLAVOR}\n        ```\n\n    !!! info\n        Use before `patentcity geo add`\n    \"\"\"\n    assert flavor in [\"GMAPS\", \"HERE\"]\n    if flavor == \"GMAPS\":\n        index = {}\n        with open(index_geoc_file, \"r\") as lines:\n            for line in lines:\n                recid, geoc = line.split(inDelim)\n                index.update({recid: json.loads(geoc)})\n\n        with open(disamb_file, \"r\") as lines:\n            for line in lines:\n                recid, disamb_loc = line.split(inDelim)\n                disamb_loc_recid = get_recid(clean_text(disamb_loc))\n                typer.echo(f\"{recid}{inDelim}{json.dumps(index.get(disamb_loc_recid))}\")\n    else:\n        index = _get_geoc_index(index_geoc_file, dump=False)\n        fieldnames = GEOC_OUTCOLS\n        writer = csv.DictWriter(sys.stdout, fieldnames=fieldnames)\n        writer.writeheader()\n        with open(disamb_file, \"r\") as lines:\n            for line in lines:\n                recid, searchtext = line.replace(\"\\n\", \"\").split(inDelim)\n                geoc_disamb = index.get(get_recid(searchtext))\n                geoc_disamb.update({\"recId\": recid})\n                writer.writerow(geoc_disamb)\n</code></pre>"},{"location":"API_GEO/#patentcity.geo.add_statisticalareas","title":"<code>add_statisticalareas(file, statisticalareas_path, verbose=False)</code>","text":"<p>Return <code>file</code> with statistical areas to stdout.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>str</code> <p>file path</p> required <code>statisticalareas_path</code> <code>str</code> <p>satistical area files path (wildcard allowed)</p> required <code>verbose</code> <code>bool</code> <p>verbosity</p> <code>False</code> <p>Usage: <pre><code>patentcity geo add.statisticalareas geoc_gbpatentxx.here.csv \"assets/statisticalareas_*.csv\"\n</code></pre></p> Source code in <code>patentcity/geo.py</code> <pre><code>@app.command(name=\"add.statisticalareas\")\ndef add_statisticalareas(file: str, statisticalareas_path: str, verbose: bool = False):\n\"\"\"Return `file` with statistical areas to stdout.\n\n    Arguments:\n         file: file path\n         statisticalareas_path: satistical area files path (wildcard allowed)\n         verbose: verbosity\n\n    **Usage:**\n        ```shell\n        patentcity geo add.statisticalareas geoc_gbpatentxx.here.csv \"assets/statisticalareas_*.csv\"\n        ```\n    \"\"\"\n    statisticalareas_df = read_csv_many(\n        statisticalareas_path, verbose=verbose, dtype=str\n    )\n    geoc_df = pd.read_csv(file, dtype=str, error_bad_lines=False)\n    geoc_df = geoc_df.where(pd.notnull(geoc_df), None)  # we replace pandas nan by None\n    variables = [\"country\", \"state\", \"county\", \"city\", \"postalCode\"]\n    geoc_df[\"key\"] = geoc_df[variables].apply(get_statisticalarea_key, axis=1)\n    geoc_df = geoc_df.merge(statisticalareas_df, how=\"left\", on=[\"country\", \"key\"])\n    typer.echo(geoc_df.to_csv(sys.stdout, index=False))\n</code></pre>"},{"location":"API_GEO/#patentcity.geo.get_geoc_data_gmaps","title":"<code>get_geoc_data_gmaps(file, api_key, region, language='en', max_workers=5, inDelim='|', skip_header=True)</code>","text":"<p>Geocode addresses in <code>file</code> using GMAPS</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>str</code> <p>file path</p> required <code>api_key</code> <code>str</code> <p>api key</p> required <code>region</code> <code>str</code> <p>region code, specified as a ccTLD (\u201ctop-level domain\u201d) two-character value (e.g. de, fr, uk, us, etc).</p> required <code>language</code> <code>str</code> <p>the language in which to return results</p> <code>'en'</code> <code>max_workers</code> <code>int</code> <p>max number of workers</p> <code>5</code> <code>inDelim</code> <code>str</code> <p>inner delimiter</p> <code>'|'</code> <code>skip_header</code> <code>bool</code> <p>whether to ski header or not</p> <code>True</code> <p>Usage: <pre><code>patentcity geo gmaps.get loc_uspatentxx.txt $APIKEY us\n</code></pre></p> <p>Info</p> <ul> <li>Quickstart</li> <li>Overview</li> <li>Language</li> </ul> Source code in <code>patentcity/geo.py</code> <pre><code>@app.command(name=\"gmaps.get\")\ndef get_geoc_data_gmaps(\n    file: str,\n    api_key: str,\n    region: str,\n    language: str = \"en\",\n    max_workers: int = 5,\n    inDelim: str = \"|\",\n    skip_header: bool = True,\n):\n\"\"\"Geocode addresses in `file` using GMAPS\n\n    Arguments:\n        file: file path\n        api_key: api key\n        region:  region code, specified as a ccTLD (\u201ctop-level domain\u201d) two-character value (e.g. de, fr, uk, us, etc).\n        language: the language in which to return results\n        max_workers: max number of workers\n        inDelim: inner delimiter\n        skip_header: whether to ski header or not\n\n    **Usage:**\n        ```shell\n        patentcity geo gmaps.get loc_uspatentxx.txt $APIKEY us\n        ```\n\n    !!! info\n        - [Quickstart](https://developers.google.com/maps/documentation/geocoding/start)\n        - [Overview](https://developers.google.com/maps/documentation/geocoding/overview)\n        - [Language](https://developers.google.com/maps/faq#languagesupport)\n    \"\"\"\n    gmaps = googlemaps.Client(api_key)\n    with open(file, \"r\") as lines:\n        if skip_header:\n            next(lines)\n        with ThreadPoolExecutor(max_workers) as executor:\n            executor.map(\n                _get_geoc_data_gmaps,\n                lines,\n                repeat(gmaps),\n                repeat(region),\n                repeat(language),\n                repeat(inDelim),\n            )\n</code></pre>"},{"location":"API_GEO/#patentcity.geo.get_geoc_data_here","title":"<code>get_geoc_data_here(request_id, api_key, output_dir=None, unzip=True)</code>","text":"<p>Download and save HERE geocoded data to <code>output_dir</code>/<code>request_id</code>.zip</p> <p>Parameters:</p> Name Type Description Default <code>request_id</code> <code>str</code> <p>HERE job request ID (returned by `here.post)</p> required <code>api_key</code> <code>str</code> <p>HERE api key</p> required <code>output_dir</code> <code>str</code> <p>saving directory</p> <code>None</code> <code>unzip</code> <code>bool</code> <p>whether to unzip the output</p> <code>True</code> <p>Usage: <pre><code>patentcity geo here.get $REQUESTID $APIKEY --output-dir &lt;your-dir&gt;\n</code></pre></p> <p>Info</p> <ul> <li>Read output</li> </ul> Source code in <code>patentcity/geo.py</code> <pre><code>@app.command(name=\"here.get\")\ndef get_geoc_data_here(\n    request_id: str, api_key: str, output_dir: str = None, unzip: bool = True\n):\n\"\"\"Download and save HERE geocoded data to `output_dir`/`request_id`.zip\n\n    Arguments:\n        request_id: HERE job request ID (returned by `here.post)\n        api_key: HERE api key\n        output_dir: saving directory\n        unzip: whether to unzip the output\n\n    **Usage:**\n        ```shell\n        patentcity geo here.get $REQUESTID $APIKEY --output-dir &lt;your-dir&gt;\n        ```\n\n    !!! info\n        - [Read output](https://developer.here.com/documentation/batch-geocoder/dev_guide/topics/read-batch-request-output.html)\n    \"\"\"\n\n    def dump_data(response, output_file):\n        with open(output_file, \"wb\") as fout:\n            fout.write(response.content)\n            typer.secho(f\"{ok}{output_file}\", fg=typer.colors.GREEN)\n\n    def unzip_data(zip_file):\n        unzip_dir = os.path.splitext(zip_file)[0]\n        with ZipFile(zip_file, \"r\") as zipObj:\n            # Extract all the contents of zip file in different directory\n            zipObj.extractall(unzip_dir)\n            typer.secho(f\"{ok}{zip_file} unzipped\", fg=typer.colors.GREEN)\n\n    output_file = os.path.join(output_dir, f\"{request_id}.zip\")\n    params = ((\"apiKey\", api_key),)\n    response = requests.get(\n        f\"https://batch.geocoder.ls.hereapi.com/6.2/jobs/{request_id}/result/\",\n        params=params,\n    )\n    if response.status_code == 200:\n        dump_data(response, output_file)\n        if unzip:\n            unzip_data(output_file)\n    else:\n        typer.secho(\n            f\"{not_ok}Failed with status {response.status_code}\\n{response.content}\",\n            fg=typer.colors.RED,\n        )\n</code></pre>"},{"location":"API_GEO/#patentcity.geo.get_geoc_status_here","title":"<code>get_geoc_status_here(request_id, api_key, freq=5, verbose=False)</code>","text":"<p>Check status of job <code>request_id</code> every <code>freq</code> seconds</p> <p>Parameters:</p> Name Type Description Default <code>request_id</code> <code>str</code> <p>HERE job request ID (returned by `here.post)</p> required <code>api_key</code> <code>str</code> <p>HERE api key</p> required <code>freq</code> <code>int</code> <p>interval between 2 consecutive status updates</p> <code>5</code> <code>verbose</code> <code>bool</code> <p>verbosity</p> <code>False</code> <p>Usage: <pre><code>patentcity geo here.status $REQUESTID $APIKEY\n</code></pre></p> Source code in <code>patentcity/geo.py</code> <pre><code>@app.command(name=\"here.status\")\ndef get_geoc_status_here(\n    request_id: str, api_key: str, freq: int = 5, verbose: bool = False\n):\n\"\"\"Check status of job `request_id` every `freq` seconds\n\n    Arguments:\n        request_id: HERE job request ID (returned by `here.post)\n        api_key: HERE api key\n        freq: interval between 2 consecutive status updates\n        verbose: verbosity\n\n    **Usage:**\n        ```shell\n        patentcity geo here.status $REQUESTID $APIKEY\n        ```\n    \"\"\"\n\n    def summarize_status(response, verbose):\n        soup = BeautifulSoup(response.text, \"xml\")\n        now = get_dt_human()\n        Status = soup.Status.text\n        TotalCount = soup.TotalCount.text\n        ProcessedCount = soup.ProcessedCount.text\n        PendingCount = soup.PendingCount.text\n        ErrorCount = soup.ErrorCount.text\n        SuccessCount = soup.SuccessCount.text\n        typer.secho(\n            f\"{now}: {ProcessedCount}/{TotalCount} ({PendingCount} pending)\",\n            fg=typer.colors.BLUE,\n        )\n        if int(SuccessCount) &gt; 0:\n            typer.secho(\n                f\"{ok}{SuccessCount} addresses successfully geocoded\",\n                fg=typer.colors.GREEN,\n            )\n        if int(ErrorCount) &gt; 0:\n            typer.secho(f\"{not_ok}{ErrorCount} errors detected\", fg=typer.colors.RED)\n        if verbose:\n            typer.echo(soup.prettify())\n        return Status\n\n    params = ((\"action\", \"status\"), (\"apiKey\", api_key))\n    completed = False\n    while not completed:\n        response = requests.get(f\"{GEOC_URL}/{request_id}\", params=params)\n        Status = summarize_status(response, verbose)\n        if Status == \"completed\":\n            completed = True\n            typer.secho(f\"{ok}{ok}Job completed\", fg=typer.colors.GREEN)\n        else:\n            typer.secho(f\"Status:{Status}\", fg=typer.colors.BLUE)\n            time.sleep(freq)\n</code></pre>"},{"location":"API_GEO/#patentcity.geo.get_parsed_loc_libpostal","title":"<code>get_parsed_loc_libpostal(path, api_reference, max_workers=10, debug=False)</code>","text":"<p>Send data in <code>path</code> to libpostal service (hosted at <code>api_reference</code>) and return parsed loc json blobs to stdout.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>data path (wildcard allowed)</p> required <code>api_reference</code> <code>str</code> <p>reference of service host \"ip:port\"</p> required <code>max_workers</code> <code>int</code> <p>max number of workers</p> <code>10</code> <code>debug</code> <code>bool</code> <p>verbosity degree</p> <code>False</code> <p>Usage: <pre><code>patentcity geo libpostal.get &lt;your-addresses.txt&gt; &lt;ip:port&gt;\n</code></pre></p> Source code in <code>patentcity/geo.py</code> <pre><code>@app.command(deprecated=True, name=\"libpostal.get\")\ndef get_parsed_loc_libpostal(\n    path: str, api_reference: str, max_workers: int = 10, debug: bool = False\n):\n\"\"\"\n    Send data in `path` to libpostal service (hosted at `api_reference`)\n    and return parsed loc json blobs to stdout.\n\n    Arguments:\n        path: data path (wildcard allowed)\n        api_reference: reference of service host \"ip:port\"\n        max_workers: max number of workers\n        debug: verbosity degree\n\n    **Usage:**\n        ```shell\n        patentcity geo libpostal.get &lt;your-addresses.txt&gt; &lt;ip:port&gt;\n        ```\n    \"\"\"\n    files = glob(path)\n    for file in files:\n        data = open(file, \"r\")\n        with ThreadPoolExecutor(max_workers=max_workers) as executor:\n            executor.map(_parse_loc_blob, data, repeat(api_reference), repeat(debug))\n</code></pre>"},{"location":"API_GEO/#patentcity.geo.harmonize_geoc_data_gmaps","title":"<code>harmonize_geoc_data_gmaps(file, inDelim='|', out_format='csv', header=True)</code>","text":"<p>Harmonize Gmaps response with HERE Geocoding API responses (csv)</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>str</code> <p>file path</p> required <code>inDelim</code> <code>str</code> <p>inner delimiter</p> <code>'|'</code> <code>out_format</code> <code>str</code> <p>format of the output (in [\"csv\", \"jsonl\"])</p> <code>'csv'</code> <code>header</code> <code>bool</code> <p>whether to add a header (if <code>out_format</code> is \"csv\")</p> <code>True</code> <p>Usage: <pre><code>patentcity geo gmaps.harmonize geoc_uspatentxx.gmaps.jsonl\n</code></pre></p> Source code in <code>patentcity/geo.py</code> <pre><code>@app.command(name=\"gmaps.harmonize\")\ndef harmonize_geoc_data_gmaps(\n    file: str, inDelim: str = \"|\", out_format: str = \"csv\", header: bool = True\n):\n\"\"\"Harmonize Gmaps response with HERE Geocoding API responses (csv)\n\n    Arguments:\n        file: file path\n        inDelim: inner delimiter\n        out_format: format of the output (in [\"csv\", \"jsonl\"])\n        header: whether to add a header (if `out_format` is \"csv\")\n\n    **Usage:**\n        ```shell\n        patentcity geo gmaps.harmonize geoc_uspatentxx.gmaps.jsonl\n        ```\n    \"\"\"\n\n    assert out_format in [\"csv\", \"jsonl\"]\n    iso_crossover = get_isocrossover()\n    us_state_crossover = get_usstatecrossover()\n    county_crossover = get_countycrossover()\n\n    if out_format == \"csv\" and header:\n        csvwriter = csv.DictWriter(sys.stdout, GEOC_OUTCOLS)\n        csvwriter.writeheader()\n\n    with open(file, \"r\") as lines:\n        for line in lines:\n            line = clean_text(line, inDelim=f\" {inDelim} \")\n            # clean cases like \"Jack A. Claes Pavilion | Elk Grove Park District\" returned by Gmaps\n\n            try:\n                recid, response = line.split(inDelim)\n                _parse_response_gmaps(\n                    response,\n                    recid,\n                    out_format,\n                    iso_crossover,\n                    us_state_crossover,\n                    county_crossover,\n                )\n            except ValueError:\n                pass\n</code></pre>"},{"location":"API_GEO/#patentcity.geo.post_geoc_data_here","title":"<code>post_geoc_data_here(file, api_key, countryfocus, outCols=None, inDelim='|', outDelim=',', locationattributes='addressDetails', language='en-EN', includeinputfields=False, verbose=False)</code>","text":"<p>Post <code>file</code> to HERE batch geocoding API</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>str</code> <p>file path. File is expected to be formatted as follows recId|searchText</p> required <code>api_key</code> <code>str</code> <p>HERE api key</p> required <code>countryfocus</code> <code>str</code> <p>iso3 country code (e.g. deu, fra, gbr, usa, etc), see Format input</p> required <code>outCols</code> <code>str</code> <p>see Request parameters</p> <code>None</code> <code>inDelim</code> <code>str</code> <p>see Request parameters</p> <code>'|'</code> <code>outDelim</code> <code>str</code> <p>see Request parameters</p> <code>','</code> <code>locationattributes</code> <code>str</code> <p>see Request parameters</p> <code>'addressDetails'</code> <code>language</code> <code>str</code> <p>output language, see Request parameters</p> <code>'en-EN'</code> <code>includeinputfields</code> <code>bool</code> <p>see Request parameters</p> <code>False</code> <code>verbose</code> <code>bool</code> <p>verbosity</p> <code>False</code> <p>Usage: <pre><code>patentcity geo here.post loc_uspatentxx.txt $APIKEY usa\n</code></pre></p> <p>Info</p> <ul> <li>Format input</li> <li>Request parameters</li> </ul> Source code in <code>patentcity/geo.py</code> <pre><code>@app.command(name=\"here.post\")\ndef post_geoc_data_here(\n    file: str,\n    api_key: str,\n    countryfocus: str,  # ISO3?\n    outCols: str = None,  # pylint: disable=invalid-name\n    inDelim: str = \"|\",  # pylint: disable=invalid-name\n    outDelim: str = \",\",  # pylint: disable=invalid-name\n    locationattributes: str = \"addressDetails\",\n    language: str = \"en-EN\",  # eg \"en-EN\", \"en-US\"\n    includeinputfields: bool = False,  # False for downstream compatibility\n    verbose: bool = False,\n):\n\"\"\"Post `file` to HERE batch geocoding API\n\n    Arguments:\n        file: file path. File is expected to be formatted as follows recId|searchText\n        api_key: HERE api key\n        countryfocus: iso3 country code (e.g. deu, fra, gbr, usa, etc), see [Format input](https://developer.here.com/documentation/batch-geocoder/dev_guide/topics/data-input.html)\n        outCols: see [Request parameters](https://developer.here.com/documentation/batch-geocoder/dev_guide/topics/request-parameters.html)\n        inDelim: see [Request parameters](https://developer.here.com/documentation/batch-geocoder/dev_guide/topics/request-parameters.html)\n        outDelim: see [Request parameters](https://developer.here.com/documentation/batch-geocoder/dev_guide/topics/request-parameters.html)\n        locationattributes: see [Request parameters](https://developer.here.com/documentation/batch-geocoder/dev_guide/topics/request-parameters.html)\n        language: output language, see [Request parameters](https://developer.here.com/documentation/batch-geocoder/dev_guide/topics/request-parameters.html)\n        includeinputfields: see [Request parameters](https://developer.here.com/documentation/batch-geocoder/dev_guide/topics/request-parameters.html)\n        verbose: verbosity\n\n    **Usage:**\n        ```shell\n        patentcity geo here.post loc_uspatentxx.txt $APIKEY usa\n        ```\n\n    !!! info\n        - [Format input](https://developer.here.com/documentation/batch-geocoder/dev_guide/topics/data-input.html)\n        - [Request parameters](https://developer.here.com/documentation/batch-geocoder/dev_guide/topics/request-parameters.html)\n    \"\"\"\n\n    def check_post(response):\n        soup = BeautifulSoup(response.text, features=\"xml\")\n        RequestId = soup.RequestId.text\n        Status = soup.Status.text\n        log_msg = f\"{file}\\t{Status}\\t{RequestId}\\t{get_dt_human()}\"\n        if verbose:\n            typer.echo(soup.prettify())\n        if Status == \"accepted\":\n            typer.secho(f\"{ok}{log_msg}\", fg=typer.colors.GREEN)\n        else:\n            typer.secho(f\"{not_ok}\\t{log_msg}\", fg=typer.colors.RED)\n\n    headers = {\"Content-Type\": \"text/plain\"}\n    outCols = outCols.split(\",\") if outCols else GEOC_OUTCOLS\n\n    # Remove default columns to avoid duplicated columns\n    for col in [\"recID\", \"seqNumber\", \"seqLength\"]:\n        try:\n            outCols.remove(col)\n        except ValueError:\n            pass\n\n    params = (\n        (\"apiKey\", api_key),\n        (\"action\", \"run\"),\n        (\"header\", \"true\"),\n        (\"inDelim\", inDelim),\n        (\"outDelim\", outDelim),\n        (\"outCols\", \",\".join(outCols)),\n        (\"outputcombined\", \"true\"),\n        (\"countryfocus\", countryfocus),\n        (\"language\", language),\n        (\"locationattributes\", locationattributes),\n        (\"includeinputfields\", includeinputfields),\n    )\n\n    data = open(file, \"rb\").read()\n    response = requests.post(GEOC_URL, headers=headers, params=params, data=data)\n    if response.status_code == 200:\n        check_post(response)\n    else:\n        typer.secho(\n            f\"{not_ok}Failed with status {response.status_code}\\n{response.content}\",\n            fg=typer.colors.RED,\n        )\n</code></pre>"},{"location":"API_GEO/#patentcity.geo.prep_geoc_data","title":"<code>prep_geoc_data(file, inDelim='|')</code>","text":"<p>Return patentees' loc data formatted for geocoding to stdout (recId|searchText).</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>str</code> <p>file path</p> required <code>inDelim</code> <code>str</code> <p>inner delimiter used by HERE</p> <code>'|'</code> <p>Usage: <pre><code>patentcity geo prep entrel_uspatent01.jsonl\n#Sort and deduplicate addresses before batch geocoding\nsort -u loc_uspatent01.txt\n</code></pre></p> Source code in <code>patentcity/geo.py</code> <pre><code>@app.command(name=\"prep\")\ndef prep_geoc_data(file: str, inDelim: str = \"|\"):\n\"\"\"Return patentees' loc data formatted for geocoding to stdout (recId|searchText).\n\n    Arguments:\n        file: file path\n        inDelim: inner delimiter used by HERE\n\n    **Usage:**\n        ```shell\n        patentcity geo prep entrel_uspatent01.jsonl\n        #Sort and deduplicate addresses before batch geocoding\n        sort -u loc_uspatent01.txt\n        ```\n    \"\"\"\n    with open(file, \"r\") as lines:\n        typer.echo(f\"recId{inDelim}searchText\")  # This is the required header\n        for line in lines:\n            line = json.loads(line)\n            patentees = line.get(\"patentee\")\n            for patentee in patentees:\n                loc_recid = patentee.get(\"loc_recId\")\n                loc_text = patentee.get(\"loc_text\")\n                if loc_recid and loc_text:\n                    typer.echo(f\"{loc_recid}{inDelim}{loc_text}\")\n</code></pre>"},{"location":"API_IO/","title":"io","text":"<p>IO</p>"},{"location":"API_IO/#patentcity.io.add_cpc_codes","title":"<code>add_cpc_codes(src_table, destination_table, credentials)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>src_table</code> <code>str</code> <p>source table (project.dataset.table)</p> required <code>destination_table</code> <code>str</code> <p>destination table (project.dataset.table)</p> required <code>credentials</code> <code>str</code> <p>BQ credentials file path</p> required <p>Usage: <pre><code>patentcity io add-cpc-codes &lt;src_table&gt; &lt;destination_table&gt; credentials-patentcity.json\n</code></pre></p> Source code in <code>patentcity/io.py</code> <pre><code>@app.command()\ndef add_cpc_codes(src_table: str, destination_table: str, credentials: str):\n\"\"\"\n\n    Args:\n        src_table: source table (project.dataset.table)\n        destination_table: destination table (project.dataset.table)\n        credentials: BQ credentials file path\n\n    **Usage:**\n        ```shell\n        patentcity io add-cpc-codes &lt;src_table&gt; &lt;destination_table&gt; credentials-patentcity.json\n        ```\n    \"\"\"\n    query = f\"\"\"\n    WITH tmp AS(\n    SELECT\n    publication_number,\n    STRING_AGG(cpc.code) AS cpc_code\n    FROM\n    `patents-public-data.patents.publications`,\n    UNNEST(cpc)\n    AS\n    cpc\n    GROUP BY\n    publication_number)\n\n    SELECT\n    pc. *, tmp.cpc_code\n    FROM\n    `{src_table}` # patentcity.patentcity.v100rc7\n    AS pc\n    LEFT JOIN tmp\n    ON pc.publication_number = tmp.publication_number\"\"\"\n    _get_job_done(query, destination_table, credentials)\n</code></pre>"},{"location":"API_IO/#patentcity.io.augment_patentcity","title":"<code>augment_patentcity(src_table, destination_table, credentials=None)</code>","text":"<p>Add (mainly interoperability) variables to <code>src_table</code> and save to `destination_table</p> <p>Parameters:</p> Name Type Description Default <code>src_table</code> <code>str</code> <p>source table (project.dataset.table)</p> required <code>destination_table</code> <code>str</code> <p>destination table (project.dataset.table)</p> required <code>credentials</code> <code>str</code> <p>BQ credentials file path</p> <code>None</code> <p>Usage: <pre><code>patentcity io augment-patentcity &lt;src_table&gt; &lt;destination_table&gt; credentials-patentcity.json\n</code></pre></p> Source code in <code>patentcity/io.py</code> <pre><code>@app.command()\ndef augment_patentcity(\n    src_table: str, destination_table: str, credentials: str = None\n) -&gt; None:\n\"\"\"Add (mainly interoperability) variables to `src_table` and save to `destination_table\n\n    Arguments:\n        src_table: source table (project.dataset.table)\n        destination_table: destination table (project.dataset.table)\n        credentials: BQ credentials file path\n\n    **Usage:**\n        ```shell\n        patentcity io augment-patentcity &lt;src_table&gt; &lt;destination_table&gt; credentials-patentcity.json\n        ```\n\n    \"\"\"\n    query = f\"\"\"\n    SELECT\n      pc.publication_number,\n      p.publication_date,\n      p.family_id,\n      SPLIT(pc.publication_number, \"-\")[OFFSET(0)] AS country_code,\n      SPLIT(pc.publication_number, \"-\")[OFFSET(1)] AS pubnum,\n      SPLIT(pc.publication_number, \"-\")[OFFSET(2)] AS kind_code,\n      pc.* EXCEPT(publication_number)\n    FROM\n      `patents-public-data.patents.publications` AS p\n    RIGHT JOIN\n      `{src_table}` AS pc\n    ON\n      pc.publication_number = p.publication_number\n    \"\"\"\n    _get_job_done(query, destination_table, credentials)\n</code></pre>"},{"location":"API_IO/#patentcity.io.build_wgp_as_patentcity","title":"<code>build_wgp_as_patentcity(addresses_table, patentee_location_table, patstat_patent_properties_table=None, tls206_table=None, tls207_table=None, destination_table=None, flavor=None, credentials=None)</code>","text":"<p>Join addresses and individuals from WGP and add data at the patent as well as individual level.</p> <p>Parameters:</p> Name Type Description Default <code>addresses_table</code> <code>str</code> <p>WGP addresses table (project.dataset.table)</p> required <code>patentee_location_table</code> <code>str</code> <p>WGP patentees table (project.dataset.table)</p> required <code>patstat_patent_properties_table</code> <code>str</code> <p>PATSTAT patent properties table on BQ (project.dataset.table)</p> <code>None</code> <code>tls206_table</code> <code>str</code> <p>PATSTAT tls206 table on BQ (project.dataset.table)</p> <code>None</code> <code>tls207_table</code> <code>str</code> <p>PATSTAT tls207 table on BQ (project.dataset.table)</p> <code>None</code> <code>destination_table</code> <code>str</code> <p>destination table (project.dataset.table)</p> <code>None</code> <code>flavor</code> <code>int</code> <p>WGP source data flavor (in [25, 45])</p> <code>None</code> <code>credentials</code> <code>str</code> <p>BQ credentials file path</p> <code>None</code> <p>Usage: <pre><code>patentcity io build-wgp-as-patentcity patentcity.external.addresses_florian45_patentcity patentcity.external.person_location_id --tls206-table patentcity.external.tls206 --tls207-table patentcity.external.tls207 --patstat-patent-properties-table patentcity.external.patstat_patent_properties --destination-table patentcity.tmp.patentcity45 --flavor 45 --key-file $KEY_FILE\n</code></pre></p> Source code in <code>patentcity/io.py</code> <pre><code>@app.command()\ndef build_wgp_as_patentcity(\n    addresses_table: str,\n    patentee_location_table: str,\n    patstat_patent_properties_table: str = None,\n    tls206_table: str = None,\n    tls207_table: str = None,\n    destination_table: str = None,\n    flavor: int = None,\n    credentials: str = None,\n) -&gt; None:\n\"\"\"Join addresses and individuals from WGP and add data at the patent as well as individual level.\n\n    Arguments:\n        addresses_table: WGP addresses table (project.dataset.table)\n        patentee_location_table: WGP patentees table (project.dataset.table)\n        patstat_patent_properties_table: PATSTAT patent properties table on BQ (project.dataset.table)\n        tls206_table: PATSTAT tls206 table on BQ (project.dataset.table)\n        tls207_table: PATSTAT tls207 table on BQ (project.dataset.table)\n        destination_table: destination table (project.dataset.table)\n        flavor: WGP source data flavor (in [25, 45])\n        credentials: BQ credentials file path\n\n    **Usage:**\n        ```shell\n        patentcity io build-wgp-as-patentcity patentcity.external.addresses_florian45_patentcity patentcity.external.person_location_id --tls206-table patentcity.external.tls206 --tls207-table patentcity.external.tls207 --patstat-patent-properties-table patentcity.external.patstat_patent_properties --destination-table patentcity.tmp.patentcity45 --flavor 45 --key-file $KEY_FILE\n        ```\n    \"\"\"\n    assert flavor in [25, 45]\n    assert patentee_location_table\n    assert addresses_table\n    if flavor == 25:\n        query = f\"\"\"\n\n        WITH\n          tmp AS (\n          SELECT\n            patee.* EXCEPT(recId),\n            loc.*,\n            app_inv=\"INV\" AS is_inv,\n            app_inv=\"APP\" AS is_app\n          FROM (\n            SELECT\n              *\n            FROM\n              `{addresses_table}`  # patentcity.external.addresses_cyril25_patentcity\n            WHERE\n              seqNumber = 1\n              AND (matchLevel=\"NOMATCH\" AND source=\"HERE\") IS FALSE ) AS loc\n          JOIN\n            `{patentee_location_table}` AS patee\n            # patentcity.external.inventor_applicant_recid\n          ON\n            loc.recId = patee.recId )  # location_id\n        SELECT\n          tmp.* EXCEPT(appln_id, pat_publn_id),\n          patstat.*,\n          SPLIT(patstat.publication_number, \"-\")[OFFSET(0)] AS country_code,\n          SPLIT(patstat.publication_number, \"-\")[OFFSET(1)] AS pubnum,\n          SPLIT(patstat.publication_number, \"-\")[OFFSET(2)] AS kind_code\n        FROM\n          tmp\n        LEFT JOIN\n          `{patstat_patent_properties_table}` AS patstat\n        ON\n          tmp.pat_publn_id = patstat.pat_publn_id #tmp.appln_id = patstat.appln_id\n          # here we are at the publication level, not the patent level\n        WHERE\n          SPLIT(patstat.publication_number, \"-\")[OFFSET(0)] IN (\"DE\", \"GB\", \"FR\", \"US\")\n\n        \"\"\"\n    if flavor == 45:\n        assert tls206_table\n        assert tls207_table\n        query = f\"\"\"\n            WITH\n              tmp AS (\n              WITH\n                tmp_ AS (\n                WITH\n                  person AS (\n                  SELECT\n                    tls207.*,\n                    tls206.person_name,\n                    invt_seq_nr &gt; 0 AS is_inv,\n                    applt_seq_nr &gt; 0 AS is_asg\n                  FROM\n                    `{tls206_table}` AS tls206,  # usptobias.patstat.tls206\n                    `{tls207_table}` AS tls207  # usptobias.patstat.tls207\n                  WHERE\n                    tls207.person_id=tls206.person_id )\n                SELECT\n                  patee.*,\n                  person.* EXCEPT(person_id)\n                FROM\n                  `{patentee_location_table}` AS patee  # patentcity.external.person_location_id\n                LEFT JOIN\n                  person\n                ON\n                  patee.person_id = person.person_id)\n              SELECT\n                *\n              FROM\n                tmp_\n              LEFT JOIN\n                `{addresses_table}` AS loc  # patentcity.external.addresses_florian45_patentcity\n              ON\n                tmp_.location_id = loc.recId\n              WHERE\n                seqNumber = 1   )\n            SELECT\n              tmp.* EXCEPT(appln_id),\n              patstat.*,\n              SPLIT(patstat.publication_number, \"-\")[OFFSET(0)] AS country_code,\n              SPLIT(patstat.publication_number, \"-\")[OFFSET(1)] AS pubnum,\n              SPLIT(patstat.publication_number, \"-\")[OFFSET(2)] AS kind_code\n            FROM\n              tmp\n            LEFT JOIN\n              `{patstat_patent_properties_table}` AS patstat\n            ON\n              tmp.appln_id = patstat.appln_id\n              # here we are at the the patent level\n            WHERE\n              SPLIT(patstat.publication_number, \"-\")[OFFSET(0)] IN (\"DE\", \"GB\", \"FR\", \"US\")\n            \"\"\"\n    _get_job_done(query, destination_table, credentials)\n</code></pre>"},{"location":"API_IO/#patentcity.io.deduplicate","title":"<code>deduplicate(src_table, destination_table, credentials)</code>","text":"<p>Deduplicate patentcity table from publications which are both in at least 2 of the following data sources PC, WGP45 and WGP25. We prioritize PC, then WGP45 and then WGP25.</p> Argument <p>src_table: source table (project.dataset.table) destination_table: destination table (project.dataset.table) credentials: BQ credentials file path</p> <p>Usage: <pre><code>patentcity io deduplicate &lt;src-table&gt; &lt;destination-table&gt; credentials-patentcity.json\n</code></pre></p> Source code in <code>patentcity/io.py</code> <pre><code>@app.command()\ndef deduplicate(src_table: str, destination_table: str, credentials: str) -&gt; None:\n\"\"\"\n    Deduplicate patentcity table from publications which are both in at least 2 of the following data sources PC, WGP45\n    and WGP25. We prioritize PC, then WGP45 and then WGP25.\n\n    Argument:\n        src_table: source table (project.dataset.table)\n        destination_table: destination table (project.dataset.table)\n        credentials: BQ credentials file path\n\n    **Usage:**\n        ```shell\n        patentcity io deduplicate &lt;src-table&gt; &lt;destination-table&gt; credentials-patentcity.json\n        ```\n    \"\"\"\n    query = f\"\"\"\n    WITH\n      duplicates AS (\n      SELECT\n        publication_number,\n        COUNT(publication_number) AS nb_occ,\n        STRING_AGG(DISTINCT(origin)) AS origins\n      FROM\n{src_table} #`patentcity.tmp.v100rc5`\n      GROUP BY\n        publication_number),\n      keep_list AS (\n      SELECT\n        tmp.publication_number,\n        tmp.origin,\n        duplicates.* EXCEPT(publication_number),\n        CASE\n          WHEN nb_occ = 1 THEN TRUE\n          WHEN nb_occ &gt; 1 AND origins LIKE \"%PC%\" AND origin=\"PC\" THEN TRUE\n          WHEN nb_occ &gt; 1 AND origins LIKE \"%WGP45%\" AND origins NOT LIKE \"%PC%\" AND origin=\"WGP45\" THEN TRUE\n          WHEN nb_occ &gt; 1 AND origins LIKE \"%WGP25%\" AND origins NOT LIKE \"%PC%\" AND origins NOT LIKE \"%WGP45%\" AND origin=\"WGP25\" THEN TRUE\n        ELSE FALSE\n      END\n        AS keep\n      FROM\n{src_table} AS tmp  # `patentcity.tmp.v100rc5`\n      LEFT JOIN\n        duplicates\n      ON\n        tmp.publication_number = duplicates.publication_number )\n    SELECT\n      tmp.*#,\n      #keep_list.* EXCEPT(publication_number, origin) ## for dbg\n    FROM\n{src_table} AS tmp  # `patentcity.tmp.v100rc5`\n    LEFT JOIN\n      keep_list\n    ON\n      tmp.publication_number=keep_list.publication_number\n      AND tmp.origin=keep_list.origin\n    WHERE keep IS TRUE  \"\"\"\n    _get_job_done(query, destination_table, credentials)\n</code></pre>"},{"location":"API_IO/#patentcity.io.extract_sample_kepler","title":"<code>extract_sample_kepler(src_table, dest_file, sample_ratio=0.1, office=None, credentials=None)</code>","text":"<p>Extract sample for kepler.gl</p> <p>Parameters:</p> Name Type Description Default <code>src_table</code> <code>str</code> <p>source table (project.dataset.table)</p> required <code>dest_file</code> <code>str</code> <p>destination file path (local)</p> required <code>sample_ratio</code> <code>float</code> <p>share of patents to extract</p> <code>0.1</code> <code>office</code> <code>str</code> <p>patent office two letter-code (e.g. DD, DE, FR, etc)</p> <code>None</code> <code>credentials</code> <code>str</code> <p>BQ credentials file path</p> <code>None</code> <p>Usage: <pre><code>patentcity io extract-sample-kepler &lt;src_table&gt; &lt;dest_file&gt; --office DE --credentials credentials-patentcity.json\n</code></pre></p> Source code in <code>patentcity/io.py</code> <pre><code>@app.command()\ndef extract_sample_kepler(\n    src_table: str,\n    dest_file: str,\n    sample_ratio: float = 0.1,\n    office: str = None,\n    credentials: str = None,\n) -&gt; None:\n\"\"\"Extract sample for kepler.gl\n\n    Arguments:\n        src_table: source table (project.dataset.table)\n        dest_file: destination file path (local)\n        sample_ratio: share of patents to extract\n        office: patent office two letter-code (e.g. DD, DE, FR, etc)\n        credentials: BQ credentials file path\n\n    **Usage:**\n        ```shell\n        patentcity io extract-sample-kepler &lt;src_table&gt; &lt;dest_file&gt; --office DE --credentials credentials-patentcity.json\n        ```\n    \"\"\"\n    office_clause = f\"\"\"AND country_code=\"{office}\" \"\"\" if office else \"\"\n    query = f\"\"\"\n    SELECT\n      publication_number,\n      country_code,\n      CAST(publication_date/10000 AS INT64) AS publication_year,\n      PARSE_TIMESTAMP('%Y%m%d%H%M%S', CAST(publication_date*100000 AS STRING)) as publication_date,\n      patentee.loc_country as country,\n      patentee.loc_city as city,\n      patentee.loc_latitude as point_latitude,\n      patentee.loc_longitude as point_longitude\n    FROM\n{src_table},\n      UNNEST(patentee) AS patentee\n    WHERE\n      RAND()&lt;{sample_ratio}\n      AND publication_date&gt;0\n      AND patentee.loc_source IS NOT NULL\n      AND patentee.loc_latitude IS NOT NULL\n{office_clause}\n    \"\"\"\n    client = _get_bq_client(credentials)\n    typer.secho(f\"Start:\\n{query}\", fg=typer.colors.BLUE)\n    df = client.query(query).to_dataframe()\n    df.to_csv(dest_file, index=False)\n    typer.secho(f\"{ok}Extract for Kepler saved to {dest_file}.\", fg=typer.colors.GREEN)\n</code></pre>"},{"location":"API_IO/#patentcity.io.family_expansion","title":"<code>family_expansion(src_table, destination_table, credentials, destination_schema)</code>","text":"<p>Expand along families in <code>table ref</code>. The returned table contains all publications belonging to a family existing in <code>src_table</code> but absent from the latter. Family data are assigned from data in <code>src_table</code>.</p> <p>Parameters:</p> Name Type Description Default <code>src_table</code> <code>str</code> <p>source table (project.dataset.table)</p> required <code>destination_table</code> <code>str</code> <p>destination table (project.dataset.table)</p> required <code>credentials</code> <code>str</code> <p>BQ credentials file path</p> required <code>destination_schema</code> <code>str</code> <p>destination schema file path</p> required <p>Usage: <pre><code>patentcity io family-expansion &lt;src-table&gt; &lt;destination-table&gt;  credentials-patentcity.json schema/patentcity_v1.json\n</code></pre></p> Source code in <code>patentcity/io.py</code> <pre><code>@app.command()\ndef family_expansion(\n    src_table: str, destination_table: str, credentials: str, destination_schema: str\n) -&gt; None:\n\"\"\"Expand along families in `table ref`. The returned table contains all publications belonging to a family\n    existing in `src_table` *but* absent from the latter. Family data are *assigned* from data in `src_table`.\n\n    Arguments:\n        src_table: source table (project.dataset.table)\n        destination_table: destination table (project.dataset.table)\n        credentials: BQ credentials file path\n        destination_schema: destination schema file path\n\n    **Usage:**\n        ```shell\n        patentcity io family-expansion &lt;src-table&gt; &lt;destination-table&gt;  credentials-patentcity.json schema/patentcity_v1.json\n        ```\n    \"\"\"\n    query = f\"\"\"\n    WITH\n      family_table AS (\n      SELECT\n        family_id,\n        ANY_VALUE(patentee) as patentee\n      FROM\n        `{src_table}`  # patentcity.patentcity.v100rc4\n     GROUP BY\n      family_id   ),\n      publication_list AS (\n      SELECT\n        DISTINCT(publication_number) AS publication_number\n      FROM\n        `{src_table}`),  # patentcity.patentcity.v100rc4\n      expanded_family_table AS (\n      SELECT\n        p.publication_number,\n        p.publication_date,\n        family_table.*\n      FROM\n        `patents-public-data.patents.publications`AS p,\n        family_table\n      WHERE\n        p.family_id = family_table.family_id\n        AND family_table.family_id IS NOT NULL\n        AND SPLIT(p.publication_number, \"-\")[OFFSET(0)] in (\"DD\",\"DE\", \"FR\", \"GB\", \"US\"))#,\n\n    SELECT\n    expanded_family_table.*, #EXCEPT(appln_id, pat_publn_id, docdb_family_id, inpadoc_family_id),\n    SPLIT(expanded_family_table.publication_number, \"-\")[OFFSET(0)] as country_code,\n    SPLIT(expanded_family_table.publication_number, \"-\")[OFFSET(1)] as pubnum,\n    SPLIT(expanded_family_table.publication_number, \"-\")[OFFSET(2)] as kind_code,\n    \"EXP\" AS origin\n    FROM\n    publication_list\n    RIGHT JOIN\n    expanded_family_table\n    ON\n    expanded_family_table.publication_number=publication_list.publication_number\n    WHERE publication_list.publication_number IS NULL\n  \"\"\"\n    _get_job_done(\n        query, destination_table, credentials, destination_schema=destination_schema\n    )\n</code></pre>"},{"location":"API_IO/#patentcity.io.filter_granted_firstpub","title":"<code>filter_granted_firstpub(src_table, destination_table, credentials)</code>","text":"<p>Filter <code>src_table</code> so as to keep only first publication of granted patents</p> <p>Parameters:</p> Name Type Description Default <code>src_table</code> <code>str</code> <p>source table (project.dataset.table)</p> required <code>destination_table</code> <code>str</code> <p>destination table (project.dataset.table)</p> required <code>credentials</code> <code>str</code> <p>BQ credentials file path</p> required <p>Usage: <pre><code>patentcity io filter-granted &lt;src_table&gt; &lt;destination_table&gt; credentials-patentcity.json\n</code></pre></p> Source code in <code>patentcity/io.py</code> <pre><code>@app.command()\ndef filter_granted_firstpub(\n    src_table: str, destination_table: str, credentials: str\n) -&gt; None:\n\"\"\"\n    Filter `src_table` so as to keep only first publication of granted patents\n\n    Arguments:\n        src_table: source table (project.dataset.table)\n        destination_table: destination table (project.dataset.table)\n        credentials: BQ credentials file path\n\n    **Usage:**\n        ```shell\n        patentcity io filter-granted &lt;src_table&gt; &lt;destination_table&gt; credentials-patentcity.json\n        ```\n    \"\"\"\n    query = f\"\"\"\n    WITH\n      tmp AS (\n      SELECT\n        pubnum,\n        country_code,\n        STRING_AGG(kind_code) AS kind_codes,\n        COUNT(pubnum) AS N,\n        STRING_AGG(kind_code) LIKE \"%A1,%\" OR STRING_AGG(kind_code) LIKE \"%,A1\" OR STRING_AGG(kind_code)=\"A1\" AS has_A,\n        STRING_AGG(kind_code) LIKE \"%B,%\" OR STRING_AGG(kind_code) LIKE \"%,B\" OR STRING_AGG(kind_code)=\"B\" AS has_B\n      FROM\n        `{src_table}`\n      GROUP BY\n        pubnum,\n        country_code )\n    SELECT\n      pc.*,\n      tmp.* EXCEPT(pubnum, country_code)\n    FROM\n      `{src_table}` AS pc,\n      tmp\n    WHERE\n      pc.country_code=tmp.country_code\n      AND pc.pubnum = tmp.pubnum\n      AND (\n        pc.country_code=\"DD\" ## clause DD\n\n        OR (pc.country_code= \"DE\" ## clause DE\n          AND ( (kind_code=\"C\" OR kind_code = \"B\")\n            OR (kind_code=\"C2\" AND N&gt;1 AND has_A=FALSE)\n            OR (kind_code = \"A1\" AND N &gt; 1)\n            OR (N = 1 AND has_a = FALSE) ) )\n\n        OR (pc.country_code= \"FR\" ## clause FR\n          AND ( (kind_code = \"A\")\n            OR (kind_code = \"A1\" AND N &gt; 1)\n            OR (kind_code = \"A1\" AND N = 1 AND publication_date &lt; 19710000)\n            OR (kind_code = \"A5\") ) )\n\n        OR (pc.country_code=\"GB\" ## clause GB\n          AND ( (kind_code = \"A\" AND N &gt; 1)\n            OR (kind_code = \"A\" AND publication_date &lt; 19500000)\n            OR (kind_code = \"A\" AND N = 1 AND CAST(pc.pubnum AS INT64) &lt; 2000000) ) )\n\n        OR pc.country_code = \"US\" ## clause US\n        )\n    \"\"\"\n    _get_job_done(query, destination_table, credentials)\n</code></pre>"},{"location":"API_IO/#patentcity.io.filter_kind_codes","title":"<code>filter_kind_codes(src_table, destination_table, credentials)</code>","text":"<p>Filter <code>src_table</code> to make sure that only utility patents are reported.</p> <p>Parameters:</p> Name Type Description Default <code>src_table</code> <code>str</code> <p>source table (project.dataset.table)</p> required <code>destination_table</code> <code>str</code> <p>destination table (project.dataset.table)</p> required <code>credentials</code> <code>str</code> <p>BQ credentials file path</p> required <p>Usage: <pre><code>patentcity io filter-kind-codes &lt;src_table&gt; &lt;destination_table&gt; credentials-patentcity.json\n</code></pre></p> Source code in <code>patentcity/io.py</code> <pre><code>@app.command()\ndef filter_kind_codes(src_table: str, destination_table: str, credentials: str) -&gt; None:\n\"\"\"Filter `src_table` to make sure that only *utility patents* are reported.\n\n    Arguments:\n        src_table: source table (project.dataset.table)\n        destination_table: destination table (project.dataset.table)\n        credentials: BQ credentials file path\n\n    **Usage:**\n        ```shell\n        patentcity io filter-kind-codes &lt;src_table&gt; &lt;destination_table&gt; credentials-patentcity.json\n        ```\n    \"\"\"\n    query = f\"\"\"\n    WITH keep_list AS (\n    SELECT\n      publication_number,\n      CASE\n        WHEN country_code = \"DD\" AND (kind_code in (\"A\", \"A1\", \"A3\", \"B\")) THEN TRUE\n        WHEN country_code = \"DE\" AND (kind_code in (\"A1\", \"B\", \"B1\", \"B2\", \"B3\", \"B4\", \"C\",\"C1\", \"C2\", \"C3\")) THEN TRUE\n        WHEN country_code = \"FR\" AND (kind_code in (\"A\", \"A1\",\"A5\", \"B1\", \"B3\", \"C3\")) THEN TRUE\n        WHEN country_code = \"GB\" AND (kind_code in (\"A\", \"B\")) THEN TRUE\n        WHEN country_code = \"US\" AND (kind_code in (\"A\", \"B1\", \"B2\")) THEN TRUE\n        ELSE FALSE\n      END AS keep\n    FROM\n      `{src_table}`) # patentcity.patentcity.v100rc4\n    SELECT\n      origin.* FROM\n      `{src_table}` as origin,  # patentcity.patentcity.v100rc4\n      keep_list\n      WHERE\n        keep_list.publication_number = origin.publication_number\n        AND keep_list.keep IS TRUE\n    \"\"\"\n    _get_job_done(query, destination_table, credentials)\n</code></pre>"},{"location":"API_IO/#patentcity.io.get_stratified_sample","title":"<code>get_stratified_sample(src_table, bin_size=50, preview=False, destination_table=None, credentials=None)</code>","text":"<p>Return a stratified sample of <code>src_table</code> (based on country_code and publication_decade) with <code>bin_size</code> samples in each bin (if possible).</p> <p>Parameters:</p> Name Type Description Default <code>src_table</code> <code>str</code> <p>source table (project.dataset.table)</p> required <code>bin_size</code> <code>int</code> <p>bin size</p> <code>50</code> <code>preview</code> <code>bool</code> <p>if True, output not saved and table stats to stdout. Else, output saved to <code>destination_table</code></p> <code>False</code> <code>destination_table</code> <code>str</code> <p>destination table (project.dataset.table)</p> <code>None</code> <code>credentials</code> <code>str</code> <p>BQ credentials file path</p> <code>None</code> <p>Usage: <pre><code>patentcity io get-stratified-sample patentcity.patentcity.v1\n</code></pre></p> <p>Tip</p> <p>Stratified random sampling with bigquery - StackOverflow</p> Source code in <code>patentcity/io.py</code> <pre><code>@app.command()\ndef get_stratified_sample(\n    src_table: str,\n    bin_size: int = 50,\n    preview: bool = False,\n    destination_table: str = None,\n    credentials: str = None,\n) -&gt; None:\n\"\"\"Return a stratified sample of `src_table` (based on country_code and publication_decade) with `bin_size` samples\n    in each bin (if possible).\n\n    Arguments:\n        src_table: source table (project.dataset.table)\n        bin_size: bin size\n        preview: if True, output not saved and table stats to stdout. Else, output saved to `destination_table`\n        destination_table: destination table (project.dataset.table)\n        credentials: BQ credentials file path\n\n    **Usage:**\n        ```shell\n        patentcity io get-stratified-sample patentcity.patentcity.v1\n        ```\n\n    !!! tip\n        [Stratified random sampling with bigquery - StackOverflow](https://stackoverflow.com/questions/52901451/stratified-random-sampling-with-bigquery)\n\n    \"\"\"\n    if preview:\n        prefix = \"\"\"\n        SELECT COUNT(*) nb_samples, country_code, publication_decade, ROUND(100*COUNT(*)/MAX(nb_bin),2) AS percentage\n        FROM (\n        \"\"\"\n        select = (\n\"\"\"SELECT publication_number, publication_decade, country_code, nb_bin\"\"\"\n        )\n        suffix = \"\"\") GROUP BY country_code, publication_decade\"\"\"\n    else:\n        prefix, select, suffix = \"\", \"SELECT * \", \"\"\n\n    query = f\"\"\"\n    WITH tmp AS (\n      SELECT CAST(publication_date/100000 AS INT64) AS publication_decade,\n      * EXCEPT(patentee)\n      FROM `{src_table}`,  # patentcity.patentcity.wgp_v1\n            UNNEST(patentee) as patentee\n        WHERE\n        patentee.loc_text IS NOT NULL\n        AND patentee.loc_source IS NOT NULL ),\n      table_stats AS (\n  SELECT *, SUM(nb_bin) OVER() AS nb_total\n      FROM (\n        SELECT\n            country_code,\n            CAST(publication_date/100000 AS INT64) AS publication_decade,\n            COUNT(*) nb_bin\n        FROM tmp\n        GROUP BY country_code, publication_decade)\n    )\n{prefix}\n{select}\n      FROM tmp\n      JOIN table_stats\n      USING(country_code, publication_decade)\n      WHERE RAND()&lt; {bin_size}/nb_bin\n{suffix}\n    \"\"\"\n    if preview:\n        client = _get_bq_client(credentials)\n        tmp = (\n            client.query(query)\n            .to_dataframe()\n            .sort_values(by=[\"country_code\", \"publication_decade\"])\n        )\n        typer.echo(tmp.to_markdown(index=False))\n        typer.secho(f\"Nb samples: {tmp['nb_samples'].sum()}\", fg=typer.colors.BLUE)\n    else:\n        _get_job_done(query, destination_table, credentials)\n</code></pre>"},{"location":"API_IO/#patentcity.io.get_wgp25_recid","title":"<code>get_wgp25_recid(country_code, src_table, patstat_patent_properties_table, destination_table, credentials)</code>","text":"<p>Extract recId and searchText from wgp25 for patents published in <code>country_code</code>.</p> <p>Parameters:</p> Name Type Description Default <code>country_code</code> <code>str</code> <p>country code of the patent office (e.g. DE, FR, GB, US, etc)</p> required <code>src_table</code> <code>str</code> <p>source table (project.dataset.table)</p> required <code>patstat_patent_properties_table</code> <code>str</code> <p>PATSTAT patent properties table on BQ (project.dataset.table)</p> required <code>destination_table</code> <code>str</code> <p>destination table (project.dataset.table)</p> required <code>credentials</code> <code>str</code> <p>BQ credentials file path</p> required <p>Usage: <pre><code>OFFICE=DE\npatentcity io get-wgp25-recid $OFFICE patentcity.external.inventor_applicant_recid patentcity.tmp.loc_${(L)OFFICE}patentwgp25 credentials-patentcity.json\n</code></pre></p> <p>Info</p> <p>This function assumes that the recId has been added to inventor_applicant_locationid beforehand (using <code>utils.get_recid(address_)</code>).</p> Source code in <code>patentcity/io.py</code> <pre><code>@app.command()\ndef get_wgp25_recid(\n    country_code: str,\n    src_table: str,\n    patstat_patent_properties_table: str,\n    destination_table: str,\n    credentials: str,\n) -&gt; None:\n\"\"\"Extract recId and searchText from wgp25 for patents published in `country_code`.\n\n    Arguments:\n        country_code: country code of the patent office (e.g. DE, FR, GB, US, etc)\n        src_table: source table (project.dataset.table)\n        patstat_patent_properties_table: PATSTAT patent properties table on BQ (project.dataset.table)\n        destination_table: destination table (project.dataset.table)\n        credentials: BQ credentials file path\n\n    **Usage:**\n        ```shell\n        OFFICE=DE\n        patentcity io get-wgp25-recid $OFFICE patentcity.external.inventor_applicant_recid patentcity.tmp.loc_${(L)OFFICE}patentwgp25 credentials-patentcity.json\n        ```\n\n    !!! info\n        This function assumes that the recId has been added to inventor_applicant_locationid beforehand (using `utils.get_recid(address_)`).\n    \"\"\"\n    assert len(country_code) == 2\n    query = f\"\"\"\n    WITH\n      tmp AS (\n      SELECT\n        loc.*,\n        patstat.*,\n        SPLIT(patstat.publication_number, \"-\")[OFFSET(0)] AS country_code\n      FROM\n        `{src_table}` AS loc,  # patentcity.external.inventor_applicant_recid\n        `{patstat_patent_properties_table}` AS patstat  # patentcity.external.patstat_patent_properties\n      WHERE\n        loc.appln_id = patstat.appln_id\n        AND loc.appln_id IS NOT NULL\n        AND SPLIT(patstat.publication_number, \"-\")[OFFSET(0)] IN \"{country_code}\"\n    SELECT\n      recId,\n      ANY_VALUE(address_) AS searchText\n    FROM\n      tmp\n    GROUP BY\n      recId\n    \"\"\"\n    _get_job_done(query, destination_table, credentials)\n</code></pre>"},{"location":"API_IO/#patentcity.io.impute_publication_date","title":"<code>impute_publication_date(src_table, imputation_table, country_code=None, credentials=None)</code>","text":"<p>Update <code>src_table</code> publication_date - DE &amp; DD only</p> <p>Parameters:</p> Name Type Description Default <code>src_table</code> <code>str</code> <p>source table (project.dataset.table)</p> required <code>imputation_table</code> <code>str</code> <p>imputation table (project.dataset.table)</p> required <code>country_code</code> <code>str</code> <p>in [\"DE\", \"DD\"]</p> <code>None</code> <code>credentials</code> <code>str</code> <p>BQ credentials file path</p> <code>None</code> <p>Usage: <pre><code>patentcity io impute-publication-date &lt;src_table&gt; &lt;imputation_table&gt; --country-code DE --credentials credentials-patentcity.json\n</code></pre></p> Source code in <code>patentcity/io.py</code> <pre><code>@app.command()\ndef impute_publication_date(\n    src_table: str,\n    imputation_table: str,\n    country_code: str = None,\n    credentials: str = None,\n) -&gt; None:\n\"\"\"Update `src_table` publication_date - DE &amp; DD only\n\n    Arguments:\n        src_table: source table (project.dataset.table)\n        imputation_table: imputation table (project.dataset.table)\n        country_code: in [\"DE\", \"DD\"]\n        credentials: BQ credentials file path\n\n    **Usage:**\n        ```shell\n        patentcity io impute-publication-date &lt;src_table&gt; &lt;imputation_table&gt; --country-code DE --credentials credentials-patentcity.json\n        ```\n    \"\"\"\n    de_clause = (\n\"\"\"AND CAST(imputation.pubnum AS INT64)&lt;330000\"\"\"\n        if country_code == \"DE\"\n        else \"\"\"\"\"\"\n    )\n    query = f\"\"\"UPDATE\n      `{src_table}` AS t\n    SET\n      t.publication_date = imputation.publication_date\n    FROM\n      `{imputation_table}` AS imputation\n    WHERE\n      t.pubnum = imputation.pubnum\n      AND country_code=\"{country_code}\"\n{de_clause}\n\n    \"\"\"\n    client = _get_bq_client(credentials)\n    typer.secho(f\"Start:\\n{query}\", fg=typer.colors.BLUE)\n    client.query(query).result()\n\n    typer.secho(f\"{ok}{src_table} updated.\", fg=typer.colors.GREEN)\n</code></pre>"},{"location":"API_IO/#patentcity.io.order","title":"<code>order(src_table, by=None, destination_table=None, credentials=None)</code>","text":"<p>Order <code>src_table</code> by <code>by</code> and stage it onto <code>destination_table</code></p> <p>Parameters:</p> Name Type Description Default <code>src_table</code> <code>str</code> <p>source table (project.dataset.table)</p> required <code>by</code> <code>str</code> <p>ordering dimension (e.g. publication_number)</p> <code>None</code> <code>destination_table</code> <code>str</code> <p>destination table (project.dataset.table)</p> <code>None</code> <code>credentials</code> <code>str</code> <p>BQ credentials file path</p> <code>None</code> <p>Usage: <pre><code>patentcity io order patentcity.tmp.patentcity25 --by publication_number --destination-table patentcity.tmp.tmp25 --key-file credentials-patentcity.json\n</code></pre></p> Source code in <code>patentcity/io.py</code> <pre><code>@app.command()\ndef order(\n    src_table: str,\n    by: str = None,\n    destination_table: str = None,\n    credentials: str = None,\n) -&gt; None:\n\"\"\"Order `src_table` by `by` and stage it onto `destination_table`\n\n    Arguments:\n        src_table: source table (project.dataset.table)\n        by: ordering dimension (e.g. publication_number)\n        destination_table: destination table (project.dataset.table)\n        credentials: BQ credentials file path\n\n    **Usage:**\n        ```shell\n        patentcity io order patentcity.tmp.patentcity25 --by publication_number --destination-table patentcity.tmp.tmp25 --key-file credentials-patentcity.json\n        ```\n    \"\"\"\n    query = f\"\"\"\n    SELECT\n      *\n    FROM\n      `{src_table}`\n    ORDER BY\n{by}  # publication_number\n    \"\"\"\n    _get_job_done(query, destination_table, credentials)\n</code></pre>"},{"location":"API_IO/#patentcity.io.prep_csv_extract","title":"<code>prep_csv_extract(src_table, destination_table, credentials)</code>","text":"<p>Return the patentcity table as an unstructured table for CSV extract</p> <p>Parameters:</p> Name Type Description Default <code>src_table</code> <code>str</code> <p>source table (project.dataset.table)</p> required <code>destination_table</code> <code>str</code> <p>destination table (project.dataset.table)</p> required <code>credentials</code> <code>str</code> <p>BQ credentials file path</p> required <p>Usage:     <pre><code>RELEASE=\"v100rc5\"\npatentcity io prep-csv-extract patentcity.patentcity.${RELEASE} patentcity.stage.${RELEASE} &lt;your-credentials.json&gt;\n</code></pre></p> Source code in <code>patentcity/io.py</code> <pre><code>@app.command()\ndef prep_csv_extract(src_table: str, destination_table: str, credentials: str) -&gt; None:\n\"\"\"\n    Return the patentcity table as an unstructured table for CSV extract\n\n    Arguments:\n        src_table: source table (project.dataset.table)\n        destination_table: destination table (project.dataset.table)\n        credentials: BQ credentials file path\n\n    **Usage**:\n        ```shell\n        RELEASE=\"v100rc5\"\n        patentcity io prep-csv-extract patentcity.patentcity.${RELEASE} patentcity.stage.${RELEASE} &lt;your-credentials.json&gt;\n        ```\n    \"\"\"\n    query = f\"\"\"\n    SELECT\n      p.* EXCEPT(patentee),\n      patentee.*\n    FROM\n      `{src_table}` as p,\n      UNNEST(patentee) AS patentee\n    \"\"\"\n    _get_job_done(query, destination_table, credentials)\n</code></pre>"},{"location":"API_SEARCH/","title":"search","text":"<p>Search</p>"},{"location":"API_SEARCH/#patentcity.search.relationship_best","title":"<code>relationship_best(path, report='short')</code>","text":"<p>Report perf of each (long)/best (short) config`</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>data file path (wildcard allowed)</p> required <code>report</code> <code>str</code> <p>report type (in [\"short\", \"long\"])</p> <code>'short'</code> <p>Usage: <pre><code>patentcity eval relationship-model data/gold_rel_ddpatent01.jsonl rel_ddpatent01.yaml --report json\n</code></pre></p> Source code in <code>patentcity/search.py</code> <pre><code>@app.command()\ndef relationship_best(path: str, report: str = \"short\"):\n\"\"\"Report perf of each (long)/best (short) config`\n\n    Arguments:\n        path: data file path (wildcard allowed)\n        report: report type (in [\"short\", \"long\"])\n\n    **Usage:**\n        ```shell\n        patentcity eval relationship-model data/gold_rel_ddpatent01.jsonl rel_ddpatent01.yaml --report json\n        ```\n    \"\"\"\n    files = glob(path)\n    assert report in [\"short\", \"long\"]\n\n    res = pd.DataFrame()\n    for file in files:\n        tmp = pd.read_json(file).T\n        tmp[\"config\"] = os.path.basename(file)\n        res = res.append(tmp)\n    res = res.reset_index().rename(columns={\"index\": \"label\"})\n\n    labels = [\"ALL\"] + list(RELATIONS.values())\n    for i, label in enumerate(labels):\n        res_label = res.query(f\"label=='{label}'\").sort_values(\"f\", ascending=False)\n        if report == \"long\":\n            if i == 0:\n                typer.secho(\"# Report\", fg=typer.colors.BLUE)\n            typer.secho(f\"\\n## {label}\", fg=typer.colors.BLUE)\n            typer.echo(res_label.to_markdown(index=False))\n        else:\n            if i == 0:\n                best = pd.DataFrame(columns=res_label.columns)\n            best = best.append(res_label.iloc[:1])\n    if report == \"short\":\n        typer.echo(best.to_markdown(index=False))\n</code></pre>"},{"location":"API_SEARCH/#patentcity.search.relationship_params","title":"<code>relationship_params(config_search)</code>","text":"<p>Generate config files defined by <code>config_search</code> grid</p> <p>Parameters:</p> Name Type Description Default <code>config_search</code> <code>str</code> <p>config search file path</p> required <p>Usage: <code>`shell     patentcity search relationship-params configs/rel_search.yaml</code></p> Source code in <code>patentcity/search.py</code> <pre><code>@app.command()\ndef relationship_params(config_search: str):\n\"\"\"Generate config files defined by `config_search` grid\n\n    Arguments:\n        config_search: config search file path\n\n    **Usage:**\n        ```shell\n        patentcity search relationship-params configs/rel_search.yaml\n        ``\n    \"\"\"\n    filename = os.path.basename(config_search)\n    path = os.path.dirname(config_search)\n    with open(config_search, \"r\") as config_file:\n        cfg = yaml.load(config_file, Loader=yaml.FullLoader)\n        search = cfg[\"search\"]\n        base = cfg[\"base\"]\n\n        for param in search.keys():\n            try:\n                start, end = list(map(int, search[param].split(\"-\")))\n                grid = range(start, end)\n            except ValueError:\n                grid = search[param].split(\"-\")\n\n            for i, val in enumerate(grid):\n                for label in base.keys():\n                    base[label].update({param: val})\n                with open(\n                    os.path.join(path, filename.replace(\"search\", str(i))), \"w\"\n                ) as file:\n                    yaml.dump(base, file)\n        typer.secho(f\"config files saved in {path}\", fg=typer.colors.BLUE)\n</code></pre>"},{"location":"ASSETS_AREA/","title":"AREA","text":"File Source area_xx.csv DE Ros\u00e9s-Wolf database on regional GDP (version 6, 2020), FR Wikipedia, GB  Eurostat, US Fabian Eckert, Andr\u00e9s Gvirtz, Jack Liang, and Michael Peters. \"A Method to Construct Geographical Crosswalks with an Application to US Counties since 1790.\" NBER Working Paper #26770, 2020"},{"location":"ASSETS_AREA/#coverage","title":"Coverage","text":"Country Geographical level Time DE 2 (nuts2) 2020 FR 3 (nuts3) 2020 GB 2 (nuts2) 2020 US 2 (commuting zone) 2020"},{"location":"ASSETS_AREA/#variables","title":"Variables","text":"Variable Description Type country_code Country code <code>str</code> statisticalAreaCode Statistical area code (nuts/fips) <code>str</code> statisticalAreaName Statistical area name (literal) <code>str</code> area Area of the statistical area (in kilometers <code>float</code>"},{"location":"ASSETS_GDPPCCOUNTRY/","title":"GDP per capita (country level)","text":"File Source gdppccountry_xx.csv Maddison Project Database, version 2020. Bolt, Jutta and Jan Luiten van Zanden (2020), \u201cMaddison style estimates of the evolution of the world economy. A new 2020 update \u201d"},{"location":"ASSETS_GDPPCCOUNTRY/#coverage","title":"Coverage","text":"Country Period AFG, AGO, ALB, ARE, ARG, ARM, AUS, AUT, AZE, BDI, BEL, BEN, BFA, BGD, BGR, BHR, BIH, BLR, BOL, BRA, BRB, BWA, CAF, CAN, CHE, CHL, CHN, CIV, CMR, COD, COG, COL, COM, CPV, CRI, CUB, CYP, CZE, DEU, DJI, DMA, DNK, DOM, DZA, ECU, EGY, ESP, EST, ETH, FIN, FRA, GAB, GBR, GEO, GHA, GIN, GMB, GNB, GNQ, GRC, GTM, HKG, HND, HRV, HTI, HUN, IDN, IND, IRL, IRN, IRQ, ISL, ISR, ITA, JAM, JOR, JPN, KAZ, KEN, KGZ, KHM, KOR, KWT, LAO, LBN, LBR, LBY, LCA, LKA, LSO, LTU, LUX, LVA, MAR, MDA, MDG, MEX, MKD, MLI, MLT, MMR, MNE, MNG, MOZ, MRT, MUS, MWI, MYS, NAM, NER, NGA, NIC, NLD, NOR, NPL, NZL, OMN, PAK, PAN, PER, PHL, POL, PRI, PRK, PRT, PRY, PSE, QAT, ROU, RUS, RWA, SAU, SDN, SEN, SGP, SLE, SLV, SRB, STP, SVK, SVN, SWE, SWZ, SYC, SYR, TCD, TGO, THA, TKM, TTO, TUN, TUR, TWN, TZA, UGA, UKR, URY, USA, UZB, VEN, VNM, YEM, ZAF, ZMB, ZWE 1870-2018 <p>Coverage varies by country, 1870-2018 is the maximum coverage</p>"},{"location":"ASSETS_GDPPCCOUNTRY/#variables","title":"Variables","text":"Variable Description Type countrycode Country code <code>str</code> year Year <code>int</code> gdppc GDP per capita (in 2011 USD) <code>float</code> pop population (in thousand people) `float'"},{"location":"ASSETS_GDPREG/","title":"Regional GDP","text":"File Source gdpreg_xx.csv Ros\u00e9s-Wolf database on regional GDP (version 6, 2020)"},{"location":"ASSETS_GDPREG/#coverage","title":"Coverage","text":"Country Geographical level Period DE 2 (nuts2) 1900-2015 FR 2 (nuts2) 1900-2015 GB 1 (nuts1) 1900-2015 <p>Warning</p> <p>US not supported yet</p>"},{"location":"ASSETS_GDPREG/#variables","title":"Variables","text":"Variable Description Type country_code Country code <code>str</code> statisticalAreaCode Statistical area code <code>str</code> statisticalArea Statistical area <code>str</code> year Year <code>int</code> gdp GDP (in 1990 USD) <code>float</code>"},{"location":"ASSETS_GDPSHAREAGRICULTURE/","title":"GDP share agriculture","text":"File Source gdpshareagriculture_xx.csv Ros\u00e9s-Wolf database on regional GDP (version 6, 2020)"},{"location":"ASSETS_GDPSHAREAGRICULTURE/#coverage","title":"Coverage","text":"Country Geographical level Period DE 2 (nuts2) 1900-2015 FR 2 (nuts2) 1900-2015 GB 1 (nuts1) 1900-2015 <p>Warning</p> <p>US not supported yet</p>"},{"location":"ASSETS_GDPSHAREAGRICULTURE/#variables","title":"Variables","text":"Variable Description Type country_code Country code <code>str</code> statisticalAreaCode Statistical area code <code>str</code> statisticalArea Statistical area <code>str</code> year Year <code>int</code> share_agriculture Share of GDP represented by the agriculture sector (in %) <code>float</code>"},{"location":"ASSETS_GDPSHAREINDUSTRY/","title":"GDP share industry","text":"File Source gdpshareindustry_xx.csv Ros\u00e9s-Wolf database on regional GDP (version 6, 2020)"},{"location":"ASSETS_GDPSHAREINDUSTRY/#coverage","title":"Coverage","text":"Country Geographical level Period DE 2 (nuts2) 1900-2015 FR 2 (nuts2) 1900-2015 GB 1 (nuts1) 1900-2015 <p>Warning</p> <p>US not supported yet</p>"},{"location":"ASSETS_GDPSHAREINDUSTRY/#variables","title":"Variables","text":"Variable Description Type country_code Country code <code>str</code> statisticalAreaCode Statistical area code <code>str</code> statisticalArea Statistical area <code>str</code> year Year <code>int</code> share_industry Share of GDP represented by the industry sector (in %) <code>float</code>"},{"location":"ASSETS_GDPSHARESERVICE/","title":"GDP share service","text":"File Source gdpshareservice_xx.csv Ros\u00e9s-Wolf database on regional GDP (version 6, 2020)"},{"location":"ASSETS_GDPSHARESERVICE/#coverage","title":"Coverage","text":"Country Geographical level Period DE 2 (nuts2) 1900-2015 FR 2 (nuts2) 1900-2015 GB 1 (nuts1) 1900-2015 <p>Warning</p> <p>US not supported yet</p>"},{"location":"ASSETS_GDPSHARESERVICE/#variables","title":"Variables","text":"Variable Description Type country_code Country code <code>str</code> statisticalAreaCode Statistical area code <code>str</code> statisticalArea Statistical area <code>str</code> year Year <code>int</code> share_service Share of GDP represented by the service sector (in %) <code>float</code>"},{"location":"ASSETS_GRAVITY/","title":"Gravity variables","text":"File Source gravity_xx.csv Mayer, T. &amp; Zignago, S. (2011); Notes on CEPII\u2019s distances measures : the GeoDist Database; CEPII Working Paper 2011-25"},{"location":"ASSETS_GRAVITY/#coverage","title":"Coverage","text":"Country Time AFG ,   AGO ,   ALB ,   ARE ,   ARG ,   ARM , AUS   ,   AUT ,   AZE ,   BDI ,   BEL ,   BEN , BFA   ,   BGD ,   BGR ,   BHR ,   BIH ,   BLR , BOL   ,   BRA ,   BRB ,   BWA ,   CAF ,   CAN , CHE   ,   CHL ,   CHN ,   CIV ,   CMR ,   COG , COL   ,   COM ,   CPV ,   CRI ,   CUB ,   CYP , CZE   ,   DEU ,   DJI ,   DMA ,   DNK ,   DOM , DZA   ,   ECU ,   EGY ,   ESP ,   EST ,   ETH , FIN   ,   FRA ,   GAB ,   GBR ,   GEO ,   GHA , GIN   ,   GMB ,   GNB ,   GNQ ,   GRC ,   GTM , HKG   ,   HND ,   HRV ,   HTI ,   HUN ,   IDN , IND   ,   IRL ,   IRN ,   IRQ ,   ISL ,   ISR , ITA   ,   JAM ,   JOR ,   JPN ,   KAZ ,   KEN , KGZ   ,   KHM ,   KOR ,   KWT ,   LAO ,   LBN , LBR   ,   LBY ,   LCA ,   LKA ,   LSO ,   LTU , LUX   ,   LVA ,   MAR ,   MDA ,   MDG ,   MEX , MKD   ,   MLI ,   MLT ,   MMR ,   MNG ,   MOZ , MRT   ,   MUS ,   MWI ,   MYS ,   NAM ,   NER , NGA   ,   NIC ,   NLD ,   NOR ,   NPL ,   NZL , OMN   ,   PAK ,   PAN ,   PER ,   PHL ,   POL , PRI   ,   PRK ,   PRT ,   PRY ,   QAT ,   RUS , RWA   ,   SAU ,   SDN ,   SEN ,   SGP ,   SLE , SLV   ,   STP ,   SVK ,   SVN ,   SWE ,   SWZ , SYC   ,   SYR ,   TCD ,   TGO ,   THA ,   TKM , TTO   ,   TUN ,   TUR ,   TWN ,   TZA ,   UGA , UKR   ,   URY ,   USA ,   UZB ,   VEN ,   VNM , YEM   ,   ZAF ,   ZMB ,   ZWE 2011"},{"location":"ASSETS_GRAVITY/#variables","title":"Variables","text":"Variable Description Type origin_country_code Country code of the origin country <code>str</code> destination_country_code Country code of the destination country <code>str</code> comlang_ethno Whether the origin and destination country share a common language (officially or not) <code>bool</code> colony Whether the destination country was a colony of the origin <code>bool</code> dist Distance between the origin and destination country in km <code>float</code>"},{"location":"ASSETS_IMMIGRATION/","title":"Immigration","text":"File Source immigration_us.csv US census immigrationbyorigin_us.csv US census"},{"location":"ASSETS_IMMIGRATION/#coverage","title":"Coverage","text":"Country Geographical level Period US 0(country) 1850-2000"},{"location":"ASSETS_IMMIGRATION/#variables","title":"Variables","text":"immigration Variable Description Type name Name of the origin country/region <code>str</code> year Year <code>int</code> value Value <code>float</code> immigrationbyorigin Variable Description Type region Region <code>str</code> level Geographical level of the entity defined by <code>name</code>. <code>1</code>: Countries, <code>2</code>: Country groups, <code>3</code>:United Kingdom, <code>4</code>: Other regions, <code>5</code>: European regions, <code>6</code>: Continental areas, <code>7</code>: Continent, <code>8</code>:Subtotals, <code>9</code>: Total, <code>\"n.e.c.\"</code> Not elsewhere classified  (e.g. Europe) <code>int</code> year Year <code>int</code> immigrants Number of immigrants (in units) <code>float</code> <p>Focus</p> <ul> <li>Geographical levels: The table from census.gov proposes different scales. We add a column <code>level</code> to specify the geographical level at which a given entry is defined.</li> <li>Wales: Wales unitary authorities are an aggregation of districts made using wikipedia historical data.</li> </ul>"},{"location":"ASSETS_POPULATION/","title":"Population","text":"File Source(s) population_xx.csv DE: Ros\u00e9s-Wolf database on regional GDP (version 6, 2020)(pre 1990) &amp; Eurostat(post 1990), FR: INSEE, GB: Vision of Britain (pre 1981) &amp; ONS (post 1981) &amp; Wiki (Northern Ireland) and Census (London), US: Fabian Eckert, Andr\u00e9s Gvirtz, Jack Liang, and Michael Peters. \"A Method to Construct Geographical Crosswalks with an Application to US Counties since 1790.\" NBER Working Paper #26770, 2020(1830-1970) &amp; Census(1970-2010) &amp; NBER data(2010-2018)"},{"location":"ASSETS_POPULATION/#coverage","title":"Coverage","text":"Country Geographical level Period DE 2 (nuts2) 1900-2017 FR 3 (nuts3) 1876-2017 GB 2 (nuts2) 1851-2017 US 3 (county) 1830-2018 Annual data<p>We proceed to a linear interpolation based on population_raw column to obtain population data for each year in population column.</p>"},{"location":"ASSETS_POPULATION/#variables","title":"Variables","text":"Variable Description Type country_code Country code <code>str</code> statisticalAreaCode Statistical area code (nuts/fips) <code>str</code> statisticalAreaName Statistical area name (literal) <code>str</code> year Year <code>int</code> population Population in the statistical area (in thousands) <code>float</code> population_raw Population in the statistical area before correction (in thousands). Relevant for GB only (see notes below) <code>float</code> Focus on US data<p>We obtain US population post 1970 data by aggregating county data thanks to David Dorn crossover table.</p> Focus on GB data<p>GB population data are not available at a sufficiently detailed NUTS level over long period - at least we did not find it. For instance, Ros\u00e9s and Wolf (2020) only provides data at the NUTS1 level for GB. Hence, we had to build the population data for GB at the NUTS2 level ourselves. This includes 3 main stages: 1. Pre-1981 data collection, 2. Post-1981 data collection, 3. Data harmonization</p> Focus on DE data<p>Following Roses and Wolf (2020), we have merged the regions of Darmstadt and Giessen into one entity and similarly for Braunschweig and Hannover. While each of these areas correspond to a NUTS2, the multiple changes in borders make it impossible to track population estimates over time without merging the regions.</p> <p>Pre-1981 data collection:</p> <p>We use Vision of Britain (VoB) population data, except for London where we use data from the Census. Some VoB geographic entities have no population data though. In this case, we made our best to reconstitute the data from smaller entities with known population data. Below we detail the construction of these entities</p> VoB Construction Tweeddale Peebles+Selkirkshire Roxburgh Ettrick and Lauderdale Roxburghshire + Selkirkshire + Berwickshire/4 + Midlothian/4 Cheshire Halton + Warrington + Cheshire east + Cheshire West and Chester Mid Glamorgan Caerphilly/2 + Bridgend + Merthyr Tydfil + Rhondda; Cynon; Taff South Glamorgan Vale of Glamorgan + Cardiff Clwyd Flintshire + Wrexham + Denbighshire Dyfed Carmarthenshire + Ceredigion + Pembrokeshire Gwent Blaenau Gwent + Caerphilly/2 + Monmouthshire + Newport + Torfaen Vale of Glamorgan Glamorganshire <p>Missing VoB data (concentrated in 1871, 1901 and 1941) are filled with linear interpolation.</p> <p>Once we have data for all VoB entities (real or imputed), we aggregate them to obtain population data at the NUTS2 level using the conversion table reported in statisticalareasvob_gb.csv.</p> <p>Post-1981 data collection</p> <p>After 1981, the ONS  provides data at the local authority level for each year. Same as before, we aggregate them to obtain population data at the NUTS2 level using the conversion table reported in statisticalareaslau_gb.csv. The conversion table is based on the local authority to NUTS crossover table and the Scotish Review of NUTS boundaries.</p> <p>Data harmonization</p> <p>As pre-1981 data are constructed using a collection of sources creating potential flaws or approximations. Hence, we found it desirable to compare the two datasets in 1981 (the only year of overlap) to compute a correction coefficient obtained as \\(\\frac{population~in~1981~using~ONS~data_{NUTS2}}{population~in~1981~using~VoB~data_{NUTS2}}\\). We then apply this correction coefficient to all pre-1981 data to make sure that the time series is consistent for each NUTS2 despite the data source change.</p> <p>Note that for East Wales and Scotland, 1981 (and 1971 for East Wales) data are missing from VoB. We used the 1971 data and applied the national population growth rate to (roughly) estimate the VoB data and hence the correction coefficient.</p>"},{"location":"ASSETS_SHAPEFILES/","title":"SHAPEFILES","text":"Files Source(s) boundariesnust2_[de,fr,gb].shp.tar.gz Eurostat boundariescz1990_us.shp.tar.gz Health inequality project"},{"location":"ASSETS_SHAPEFILES/#coverage","title":"Coverage","text":"Country Geographical level Year DE 2 (nuts2) 2021 FR 2 (nuts2) 2021 GB 2 (nuts2) 2021 US 2 (commuting zone) 1990"},{"location":"ASSETS_SHAPEFILES/#variables","title":"Variables","text":"Variable Description Type cntr_code Country code <code>str</code> code Nuts2 code/commuting zone code <code>str</code> geometry Shape <code>geometry</code> Untar shapefile<pre><code>tar -xvzf assets/boundariescz1990_us.shp.tar.gz\n</code></pre>"},{"location":"ASSETS_TRADEFLOW/","title":"Exports","text":"File Source tradeflow_xx.csv Fouquin, M and HUgot, J. 2016 Two Centuries of Bilateral Trade and Gravity Data: 1827-2014"},{"location":"ASSETS_TRADEFLOW/#coverage","title":"Coverage","text":"Country Period AFG, AGO, ALB, ARE, ARG, ARM, AUS, AUT, AZE, BDI, BEL, BEN, BFA, BGD, BGR, BHR, BIH, BLR, BOL, BRA, BRB, BWA, CAF, CAN, CHE, CHL, CHN, CIV, CMR, COD, COG, COL, COM, CPV, CRI, CUB, CYP, CZE, DEU, DJI, DMA, DNK, DOM, DZA, ECU, EGY, ESP, EST, ETH, FIN, FRA, GAB, GBR, GEO, GHA, GIN, GMB, GNB, GNQ, GRC, GTM, HKG, HND, HRV, HTI, HUN, IDN, IND, IRL, IRN, IRQ, ISL, ISR, ITA, JAM, JOR, JPN, KAZ, KEN, KGZ, KHM, KOR, KWT, LAO, LBN, LBR, LBY, LCA, LKA, LSO, LTU, LUX, LVA, MAR, MDA, MDG, MEX, MKD, MLI, MLT, MMR, MNE, MNG, MOZ, MRT, MUS, MWI, MYS, NAM, NER, NGA, NIC, NLD, NOR, NPL, NZL, OMN, PAK, PAN, PER, PHL, POL, PRI, PRK, PRT, PRY, PSE, QAT, ROU, RUS, RWA, SAU, SDN, SEN, SGP, SLE, SLV, SRB, STP, SVK, SVN, SWE, SWZ, SYC, SYR, TCD, TGO, THA, TKM, TTO, TUN, TUR, TWN, TZA, UGA, UKR, URY, USA, UZB, VEN, VNM, YEM, ZAF, ZMB, ZWE 1870-2014 <p>Coverage varies by country, 1870-2014 is the maximum coverage</p>"},{"location":"ASSETS_TRADEFLOW/#variables","title":"Variables","text":"Variable Description Type origin_country_code Country code of the origin country <code>str</code> destination_country_code Country code of the destination country <code>str</code> exports Exports from origin country to destination country (in current US millions of dollars) <code>float</code> imports Exports from origin country to destination country (in current US millions of dollars) <code>float</code>"},{"location":"CHEATSHEET/","title":"CHEATSHEET","text":""},{"location":"CHEATSHEET/#compressing-prodigy-gold-jsonl-from-prodigy-db-out","title":"Compressing prodigy gold .jsonl (from <code>prodigy db-out</code>)","text":"<p>Info</p> <p>When exporting ENT annotated data using <code>prodigy db-out &lt;dataset&gt;</code>, annotations belonging to the same text are not merged, causing issues when you want to use the data for another task (e.g. correction or REL annotation). The below recipe takes care to do the merge.</p> <pre><code>FILE=\"\"  # should be a .jsonl\nmv ${FILE} ${FILE}_tmp &amp;&amp; cat ${FILE}_tmp | grep -v '\"spans\":\\[\\]' | grep spans |jq  -s -c 'group_by(.publication_number)[] | { publication_number: .[0].publication_number, text: .[0].text, tokens: .[0].tokens, spans:[.[].spans[]]}' &gt;&gt; ${FILE}\n</code></pre>"},{"location":"CHEATSHEET/#head-child-switch","title":"Head-child switch","text":"<p>Info</p> <p>Original REL arc labelling convention went from attributes (e.g. <code>LOC</code>, <code>CIT</code>, <code>OCC</code>) to  patentees (<code>ASG</code>, <code>INV</code>), which was counter-intuitive in terms of <code>head</code>/<code>child</code> and performance metrics (although) tractable. The below recipe makes the switch between head and child to make downstream REL handling easier.</p> <pre><code>for file in $(ls gold_rel_*.jsonl); do  sed 's/\\\"child/$tmp/g;s/\\\"head/\\\"child/g;s/$tmp/\\\"head/g' ${file} &gt;&gt; ${file}_corr; done;\n</code></pre>"},{"location":"CHEATSHEET/#parallel-models-training","title":"Parallel models training","text":"<p>Info</p> <p>Training models takes time, it's better to train them in parallel. Don't start too many jobs at once. On a mac mini,each job takes up to 2 CPUs.</p> <pre><code>LANG=de  # support for en fr\nOFFICE=de  # support dd fr gb us\ncat lib/format.txt| grep $OFFICE | parallel -j 2 --eta 'spacy train configs/${LANG}_t2vner.cfg --paths.train data/train_ent_{}.spacy --paths.dev data/train_ent_{}.spacy --output models/${LANG}_ent_{}'\n</code></pre>"},{"location":"CHEATSHEET/#extract-sample-for-kepler","title":"Extract sample for kepler","text":"<pre><code>OFFICE=\"\" # e.g. DD, DE, etc\nRATIO= # e.g. .2, .015\npatentcity io extract-sample-kepler patentcity.patentcity.pc_v100rc1 data_tmp/sample_${OFFICE}.csv --sample-ratio ${RATIO} --office ${OFFICE} --key-file credentials-patentcity.json\n</code></pre>"},{"location":"CHEATSHEET/#extract-data","title":"Extract data","text":"<pre><code>RELEASE=\"v100rc5\"\nbq extract --destination_format NEWLINE_DELIMITED_JSON --compression GZIP patentcity:patentcity.${RELEASE} \"gs://patentcity_dev/beta/${RELEASE}_*.jsonl.gz\"\npatentcity io prep-csv-extract patentcity.patentcity.${RELEASE} patentcity.stage.${RELEASE} credentials-patentcity.json\nbq extract --destination_format CSV --compression GZIP patentcity:stage.${RELEASE} \"gs://patentcity_dev/beta/${RELEASE}_*.csv.gz\"\n</code></pre>"},{"location":"CODE_OF_CONDUCT/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or  advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic  address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a  professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at antoninbergeaud@gmail.com, cyril.verluise@gmail.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p> <p>For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq</p>"},{"location":"CONTRIBUTION_GUIDELINES/","title":"Contributions","text":"<p>Interested in contributing to patentCity? Great!</p>"},{"location":"CONTRIBUTION_GUIDELINES/#found-a-bug","title":"Found a bug?","text":"<p>If you found a bug in the source code, you can help us by submitting an issue to the issue tracker. Even better, you can submit a Pull Request with a fix. Before doing so, please read the submission guidelines.</p>"},{"location":"CONTRIBUTION_GUIDELINES/#missing-a-feature","title":"Missing a feature?","text":"<p>You can request a new feature by submitting a feature request. If you would like to implement a new feature, please submit a proposal for your work first, to be sure that it is of general interest.</p>"},{"location":"CONTRIBUTION_GUIDELINES/#submission-guidelines","title":"Submission guidelines","text":""},{"location":"CONTRIBUTION_GUIDELINES/#submitting-an-issue","title":"Submitting an issue","text":"<p>Before you submit an issue, please search the issue tracker, maybe an issue for your problem already exists and the discussion might inform you of workarounds readily available.</p> <p>We want to fix all the issues as soon as possible, but before fixing a bug we need to reproduce and confirm it. In order to reproduce bugs we will systematically ask you to provide a minimal reproduction scenario using the custom issue template. Please stick to the issue template.</p>"},{"location":"CONTRIBUTION_GUIDELINES/#submitting-a-pull-request-pr","title":"Submitting a Pull Request (PR)","text":"<p>Search GitHub for an open or closed PR that relates to your submission. If you do not find a related issue or PR, go ahead!</p>"},{"location":"CONTRIBUTION_GUIDELINES/#git-commit-messages","title":"Git Commit Messages","text":"<p>Some good practices:</p> <ul> <li>Use the present tense (\"Add feature\" not \"Added feature\")</li> <li>Use the imperative mood (\"Move cursor to...\" not \"Moves cursor to...\")</li> <li>Limit the first line to 72 characters or less</li> <li>Reference issues and pull requests liberally after the first line</li> <li>Consider starting the commit message with an applicable emoji:</li> </ul> emoji <code>code</code> task \ud83c\udf89 <code>:tada</code> when adding code \ud83c\udfa8 <code>:art:</code> when improving the format/structure of the code \ud83d\udc1b <code>:bug:</code> when fixing a bug \ud83d\udcdd <code>:memo:</code> when writing docs \ud83d\udd25 <code>:fire:</code> when removing code or files \ud83c\udf81 <code>:gift:</code> when adding features \ud83c\udf08 <code>:rainbow:</code> when adding community content \ud83d\udc0e <code>:racehorse:</code> when improving performance \ud83d\udd2e <code>:crystal_ball:</code> when adding/improving a solver \u2611\ufe0f <code>:white_check_mark:</code> when adding tests \u26ab <code>:black_circle:</code> when formatting code (with black) \ud83d\udd02 <code>:repeat:</code> when updating dependencies"},{"location":"DATA/","title":"DATA","text":""},{"location":"DATA/#download-data","title":"Download data","text":"<p>The patentCity database is available as an open access dataset (CC-BY-4).</p> <p>Download patentCity database</p>"},{"location":"DATA/#citation","title":"Citation","text":"<p>If you use the data, please cite Bergeaud and Verluise (2021) and De Rassenfosse, Kozak and Seliger (2019)</p> BibTeX <pre><code>@techreport{bergeaudVerluise2021,\ntitle={One Century of Innovation in Europe and the US},\nauthor={Bergeaud, Antonin and Verluise, Cyril},\nyear={2021}\n}\n@article{deRassenfosse2019,\ntitle={Geocoding of worldwide patent data},\nauthor={De Rassenfosse, Ga{\\'e}tan and Kozak, Jan and Seliger, Florian},\njournal={Scientific data},\nvolume={6},\nnumber={1},\npages={1--15},\nyear={2019},\npublisher={Nature Publishing Group}\n}\n</code></pre> Chicago <pre><code>Bergeaud, Antonin and Cyril Verluise. \"One Century of Innovation in Europe and the US\". 2021\nDe Rassenfosse, Gaetan, Jan Kozak, and Florian Seliger. \"Geocoding of worldwide patent data.\" Scientific data 6, no. 1 (2019): 1-15.\n</code></pre>"},{"location":"DATA/#database-schema","title":"Database schema","text":"<p>The database is available in 2 formats: <code>csv</code> and <code>jsonl</code>. Both contain the same data and are compatible with most SQL database engine and cloud data wharehouses such as BigQuery (GCP) and Athena (AWS) which should be your preferred way to work the patentcity full database.</p> <p><code>jsonl</code> or <code>csv</code></p> <p>The <code>jsonl</code> format allows nested data, hence is more compact. The <code>csv</code> format can be read off-the-shell by any library supporting tabular/structured data (e.g. pandas for python, dplyr for R, etc).</p> jsonl <p>Nested fields</p> <ul> <li>Dotted variables (e.g. <code>patentee.is_inv</code>) indicate nested fields.</li> <li>In the csv flavour of the data, the prefix (e.g. <code>patentee.</code>) is not reported. The database has already been flattened.</li> </ul> name description mode type publication_number Publication number. NULLABLE STRING publication_date Publication date (yyyymmdd). NULLABLE INTEGER country_code Country code of the patent office. NULLABLE STRING pubnum Publication number. NULLABLE STRING kind_code Kind code. NULLABLE STRING family_id Family ID (DOCDB). NULLABLE STRING cpc_code Comma-separated list of cpc-codes. NULLABLE STRING origin Indicates the origin of the patentee data (PC: patentcity, WGP25: Worldwide Geocoding of Patent - slot 25, WGP45: Worldwide Geocoding of Patent - slot 45, EXP: expansion ). NULLABLE STRING patentee.is_inv True if the patentee is an inventor, else False. NULLABLE BOOLEAN patentee.is_asg True if the patentee is an assignee, else False. NULLABLE BOOLEAN patentee.name_text Name. NULLABLE STRING patentee.person_id Person ID (PATSTAT). NULLABLE INTEGER patentee.name_start Name start. NULLABLE INTEGER patentee.name_end Name end. NULLABLE INTEGER patentee.occ_text Occupation text. NULLABLE STRING patentee.occ_start Occupation start. NULLABLE INTEGER patentee.occ_end Occupation end. NULLABLE INTEGER patentee.cit_text Citizenship text. NULLABLE STRING patentee.cit_code Citizenship code. NULLABLE STRING patentee.cit_start Citizenship start. NULLABLE INTEGER patentee.cit_end Citizenship end. NULLABLE INTEGER patentee.loc_text Location text. NULLABLE STRING patentee.loc_start Location start. NULLABLE INTEGER patentee.loc_end Location end. NULLABLE INTEGER patentee.loc_addressLines Formatted address lines built out of the parsed address components. NULLABLE STRING patentee.loc_locationLabel Assembled address value for displaying purposes. NULLABLE STRING patentee.loc_country ISO 3166-alpha-3 country code. NULLABLE STRING patentee.loc_state First subdivision level(s) below the country. Where commonly used, this is a state code (for instance, CA for California). NULLABLE STRING patentee.loc_county Second subdivision level(s) below the country. Use of this field is optional if a second subdivision level is not available. NULLABLE STRING patentee.loc_city Locality of the address. NULLABLE STRING patentee.loc_district Subdivision level below the city. Use of this field is optional if a second subdivision level is not available. NULLABLE STRING patentee.loc_subdistrict Subdivision level below the district. Used only for India. NULLABLE STRING patentee.loc_postalCode Postal code. NULLABLE STRING patentee.loc_street Street name. NULLABLE STRING patentee.loc_building Building name. NULLABLE STRING patentee.loc_houseNumber House number. NULLABLE STRING patentee.loc_longitude Longitude. NULLABLE FLOAT patentee.loc_latitude Latitude. NULLABLE FLOAT patentee.loc_relevance Indicates the relevance of the results found; the higher the score the more relevant the alternative. The score is a normalized value between 0 and 1. NULLABLE FLOAT patentee.loc_matchType Quality of the location match. pointAddress: Location matches exactly as point address. interpolated: Location was interpolated. NULLABLE STRING patentee.loc_matchCode Code indicating how well the result matches the request. Enumeration [exact, ambiguous, upHierarchy, ambiguousUpHierarchy]. NULLABLE STRING patentee.loc_matchLevel The most detailed address field that matched the input record. NULLABLE STRING patentee.loc_matchQualityCountry MatchQuality provides detailed information about the match quality of a result at attribute level. Match quality is a value between 0.0 and 1.0. 1.0 represents a 100% match. Here, matchQuality is defined at country level. NULLABLE FLOAT patentee.loc_matchQualityState Same at state level. NULLABLE FLOAT patentee.loc_matchQualityCounty Same at county level. NULLABLE FLOAT patentee.loc_matchQualityCity Same at city level. NULLABLE FLOAT patentee.loc_matchQualityDistrict Same at district level. NULLABLE FLOAT patentee.loc_matchQualityPostalCode Same at postalCode level. NULLABLE FLOAT patentee.loc_matchQualityStreet Same at street level. NULLABLE FLOAT patentee.loc_matchQualityHouseNumber Same at houseNumber level. NULLABLE FLOAT patentee.loc_matchQualityBuilding Same at building level. NULLABLE FLOAT patentee.loc_key Key used for statistical area mapping (internal use). NULLABLE STRING patentee.loc_statisticalArea1 Name of the high level Statistical Area. NULLABLE STRING patentee.loc_statisticalArea1Code Code of the high level Statistical Area. NULLABLE STRING patentee.loc_statisticalArea2 Name of the mid level Statistical Area. NULLABLE STRING patentee.loc_statisticalArea2Code Code of the mid level Statistical Area. NULLABLE STRING patentee.loc_statisticalArea3 Name of the low level Statistical Area. NULLABLE STRING patentee.loc_statisticalArea3Code Code of the low level Statistical Area. NULLABLE STRING patentee.loc_recId Identifier of the input address in the response. NULLABLE STRING patentee.loc_seqLength Number of results for the corresponding input record. NULLABLE INTEGER patentee.loc_seqNumber Consecutively numbers the different results for the corresponding input record starting with 1. NULLABLE INTEGER patentee.loc_source Geocoding source (in [HERE, GMAPS, MANUAL]). NULLABLE STRING patentee.is_duplicate True if a patentee with the 'same' name has been detected in the same patent. Only one of the two is marked as duplicate. NULLABLE BOOLEAN has_a Whether the patent's family features an A kind code in the database [DOCDB family level]. NULLABLE BOOLEAN has_b Whether the patent's family features a B kind code in the database  [DOCDB family level]. NULLABLE BOOLEAN N Number of patents in the family [DOCDB family level]. NULLABLE INTEGER csv name description mode type publication_number Publication number. NULLABLE STRING publication_date Publication date (yyyymmdd). NULLABLE INTEGER country_code Country code of the patent office. NULLABLE STRING pubnum Publication number. NULLABLE STRING kind_code Kind code. NULLABLE STRING family_id Family ID (DOCDB). NULLABLE STRING cpc_code Comma-separated list of cpc-codes. NULLABLE STRING origin Indicates the origin of the patentee data (PC: patentcity, WGP25: Worldwide Geocoding of Patent - slot 25, WGP45: Worldwide Geocoding of Patent - slot 45, EXP: expansion ). NULLABLE STRING is_inv True if the patentee is an inventor, else False. NULLABLE BOOLEAN is_asg True if the patentee is an assignee, else False. NULLABLE BOOLEAN name_text Name. NULLABLE STRING person_id Person ID (PATSTAT). NULLABLE INTEGER name_start Name start. NULLABLE INTEGER name_end Name end. NULLABLE INTEGER occ_text Occupation text. NULLABLE STRING occ_start Occupation start. NULLABLE INTEGER occ_end Occupation end. NULLABLE INTEGER cit_text Citizenship text. NULLABLE STRING cit_code Citizenship code. NULLABLE STRING cit_start Citizenship start. NULLABLE INTEGER cit_end Citizenship end. NULLABLE INTEGER loc_text Location text. NULLABLE STRING loc_start Location start. NULLABLE INTEGER loc_end Location end. NULLABLE INTEGER loc_addressLines Formatted address lines built out of the parsed address components. NULLABLE STRING loc_locationLabel Assembled address value for displaying purposes. NULLABLE STRING loc_country ISO 3166-alpha-3 country code. NULLABLE STRING loc_state First subdivision level(s) below the country. Where commonly used, this is a state code (for instance, CA for California). NULLABLE STRING loc_county Second subdivision level(s) below the country. Use of this field is optional if a second subdivision level is not available. NULLABLE STRING loc_city Locality of the address. NULLABLE STRING loc_district Subdivision level below the city. Use of this field is optional if a second subdivision level is not available. NULLABLE STRING loc_subdistrict Subdivision level below the district. Used only for India. NULLABLE STRING loc_postalCode Postal code. NULLABLE STRING loc_street Street name. NULLABLE STRING loc_building Building name. NULLABLE STRING loc_houseNumber House number. NULLABLE STRING loc_longitude Longitude. NULLABLE FLOAT loc_latitude Latitude. NULLABLE FLOAT loc_relevance Indicates the relevance of the results found; the higher the score the more relevant the alternative. The score is a normalized value between 0 and 1. NULLABLE FLOAT loc_matchType Quality of the location match. pointAddress: Location matches exactly as point address. interpolated: Location was interpolated. NULLABLE STRING loc_matchCode Code indicating how well the result matches the request. Enumeration [exact, ambiguous, upHierarchy, ambiguousUpHierarchy]. NULLABLE STRING loc_matchLevel The most detailed address field that matched the input record. NULLABLE STRING loc_matchQualityCountry MatchQuality provides detailed information about the match quality of a result at attribute level. Match quality is a value between 0.0 and 1.0. 1.0 represents a 100% match. Here, matchQuality is defined at country level. NULLABLE FLOAT loc_matchQualityState Same at state level. NULLABLE FLOAT loc_matchQualityCounty Same at county level. NULLABLE FLOAT loc_matchQualityCity Same at city level. NULLABLE FLOAT loc_matchQualityDistrict Same at district level. NULLABLE FLOAT loc_matchQualityPostalCode Same at postalCode level. NULLABLE FLOAT loc_matchQualityStreet Same at street level. NULLABLE FLOAT loc_matchQualityHouseNumber Same at houseNumber level. NULLABLE FLOAT loc_matchQualityBuilding Same at building level. NULLABLE FLOAT loc_key Key used for statistical area mapping (internal use). NULLABLE STRING loc_statisticalArea1 Name of the high level Statistical Area. NULLABLE STRING loc_statisticalArea1Code Code of the high level Statistical Area. NULLABLE STRING loc_statisticalArea2 Name of the mid level Statistical Area. NULLABLE STRING loc_statisticalArea2Code Code of the mid level Statistical Area. NULLABLE STRING loc_statisticalArea3 Name of the low level Statistical Area. NULLABLE STRING loc_statisticalArea3Code Code of the low level Statistical Area. NULLABLE STRING loc_recId Identifier of the input address in the response. NULLABLE STRING loc_seqLength Number of results for the corresponding input record. NULLABLE INTEGER loc_seqNumber Consecutively numbers the different results for the corresponding input record starting with 1. NULLABLE INTEGER loc_source Geocoding source (in [HERE, GMAPS, MANUAL]). NULLABLE STRING is_duplicate True if a patentee with the 'same' name has been detected in the same patent. Only one of the two is marked as duplicate. NULLABLE BOOLEAN has_a Whether the patent's family features an A kind code in the database [DOCDB family level]. NULLABLE BOOLEAN has_b Whether the patent's family features a B kind code in the database  [DOCDB family level]. NULLABLE BOOLEAN N Number of patents in the family [DOCDB family level]. NULLABLE INTEGER"},{"location":"DD/","title":"OVERVIEW","text":""},{"location":"DD/#background","title":"Background","text":"<p>XX</p>"},{"location":"DD/#data","title":"\ud83d\udcda Data","text":"<p>Warning</p> <p>Between 1973 and 1976, patent images are missing (meaning no data at all).</p> Patent office Time span (publication year) Kind code(s) DD 1950-1992 A, A1, A3, B Publication number (range) Data source Pre-processing E.g. Format # DD1-DD123499 Espacenet OCR DD20903A 1 DD123500-... Espacenet OCR DD142651A1 2 <p>Done</p> <p>In total, we consider XX documents from 1950 to 1992.</p>"},{"location":"DD/#extraction-schema","title":"\ud83d\ude9c Extraction schema","text":"<p>See the annotation guidelines.</p>"},{"location":"DD/#models","title":"\ud83d\udd2e Models","text":"<p>See the models card.</p>"},{"location":"DD/#other","title":"Other","text":"<p>See the geocoding, citizenship and date imputation documentation.</p>"},{"location":"DD_ANNOTATION_GUIDELINES/","title":"ANNOTATION GUIDELINES","text":"<p>Warning</p> <p>GitHub markdown does not fully support visual annotation components (e.g. entity boxes) used below. We invite user interested in the annotation guidelines to download the documents and open it in a development environment supporting extended markdown syntax (e.g. MacDown, PyCharm, etc) and/or save it as a pdf.</p>"},{"location":"DD_ANNOTATION_GUIDELINES/#preliminary-comments","title":"Preliminary comments","text":"<p>The patent corpus we consider for East Germany (the German Democratic Republic) has 2 format categories and spans the period 1950-1992.</p>"},{"location":"DD_ANNOTATION_GUIDELINES/#format-1-from-to-dd1-to-dd123499","title":"Format 1, from to DD1 to DD123499.","text":"<p>This format spans the period 1951-1976.</p>"},{"location":"DD_ANNOTATION_GUIDELINES/#information-display","title":"Information display","text":"<p>The document has a header with its publication number (\"Patentschrift Nr\"). The assignee is referred to as \"Inhaber\" while the inventor is referred to as \"Erfinder\". When the same person is both the assignee and the inventor, he might be referred to as \"Erfinder zugleich Inhaber\".</p> <p>Well often, a geographical indication is given with the name of the assignee or the inventor. Typically, this is the name of a city (e.g Leipzig). It can be followed by the name of the country (especially when the latter is not Germany). The name of the city is not always given though (cf DD79836).</p> <p>Within this format, some minor changes occur over time. For instance, the specifically German technological class is reported up until patent DD117152, after which only the international class (IPC) is reported on the document. Some patents will have a body of text in their first page, while others don't, but information we are interested in will always be in the header.</p>"},{"location":"DD_ANNOTATION_GUIDELINES/#information-extraction","title":"Information extraction","text":"<p>We extract 4 different \"entities\" from the header of DD patents in format category 1.</p> Entity Content E.g <code>ASG</code> Assignee full name Inhaber: Rh\u00f4ne Poulenc S.A<code>ASG</code>, Paris (Frankreich). <code>INV</code> \u00a0Inventor full name (Erfinder) Erfinder: Dr. Karl Jellinek<code>INV</code>, WD <code>LOC</code> Location of the assignee/inventor Erfinder: Jean Auguste Phelisse, Lyon (Frankreich)<code>LOC</code>. <code>OCC</code> Occupation of the assignee/inventor (academic title) Dr.<code>OCC</code> Elisabeth Kob, WD. <p>These entities are tied together with 2 types of relations.</p> Relation Content E.g. <code>LOCATION</code> Links an <code>ASG</code>/<code>INV</code> to a <code>LOC</code>  Rh\u00f4ne Poulenc S.A <code>ASG</code>--&gt;<code>LOCATION</code>--&gt;Paris (Frankreich)<code>LOC</code> <code>OCCUPATION</code> Links an <code>ASG</code>/<code>INV</code> to an <code>OCC</code> Dr <code>OCC</code>&lt;--<code>OCCUPATION</code>&lt;--Elisabeth Kob <code>ASG</code>"},{"location":"DD_ANNOTATION_GUIDELINES/#format-2-from-dd123500-onwards","title":"Format 2, from DD123500 onwards.","text":""},{"location":"DD_ANNOTATION_GUIDELINES/#information-display_1","title":"Information display","text":"<p>In this new format, relevant information is given in slots associated with a number.</p> <p>For instance, the number 51 announces the (CPC) international technological class of the invention. The number 54 gives the title of the invention.</p> <p>The number 72 announces information about the inventor: identity and geographical information. The number 44 indicates the publication date.</p> <p>The number 71 announces the applicant/assignee but sometimes refers to another slot to signal that this particular slot already contains the name of the applicant (e.g, DD126868, DD126858). In particular, a foreign assignee is more likely to be reported in line 73. Line 74 contains the name (and well often, the location) of the legal representative, which we do not tag.</p>"},{"location":"DD_ANNOTATION_GUIDELINES/#information-extraction_1","title":"Information extraction","text":"<p>We extract 4 different \"entities\" from the header of DD patents in format category 2.</p> Entity Content E.g <code>ASG</code> Assignee full name Maschinenfabrik K\u00f6ppern GmbH &amp; Co KG<code>ASG</code>, Hattingen, DE <code>INV</code> \u00a0Inventor full name (Erfinder) (72) Bergendahl, Hans-Georg <code>INV</code>, DE <code>LOC</code> Location of the assignee/inventor Knieling, Norbert, Dipl-Phys., 12439 Berlin, DE<code>LOC</code>. <code>OCC</code> Occupation of the assignee/inventor (academic title) Knieling, Norbert, Dipl-Phys.<code>OCC</code>, 12439 Berlin, DE. <p>These entities are tied together with 2 types of relations.</p> Relation Content E.g. <code>LOCATION</code> Links an <code>ASG</code>/<code>INV</code> to a <code>LOC</code>  Maschinenfabrik K\u00f6ppern GmbH &amp; Co KG <code>ASG</code>--&gt;<code>LOCATION</code>--&gt; Hattingen, DE <code>LOC</code> <code>OCCUPATION</code> Links an <code>ASG</code>/<code>INV</code> to an <code>OCC</code>  L\u00e4mmer, Hans-Georg <code>ASG</code>--&gt;<code>OCCUPATION</code>--&gt;Dipl-Ing. <code>OCC</code>"},{"location":"DD_ANNOTATION_GUIDELINES/#entities","title":"Entities","text":""},{"location":"DD_ANNOTATION_GUIDELINES/#format-1","title":"Format 1","text":""},{"location":"DD_ANNOTATION_GUIDELINES/#inv","title":"<code>INV</code>","text":""},{"location":"DD_ANNOTATION_GUIDELINES/#general-case","title":"General case","text":"<p>The tag <code>INV</code> refers to the full name of an inventor. This is a person that is not referred to as the assignee and is specifically referred to as the inventor (Erfinder).</p>"},{"location":"DD_ANNOTATION_GUIDELINES/#specific-cases","title":"Specific cases","text":"<ul> <li>Inventor only: some early patents report an inventor but no assignee. We tag the inventor as it is mentioned nonetheless. See example 2.</li> <li>Secret inventor: in some patents, it is specifically mentioned  that the inventor remains anonymous. In this case, we do not tag anything. See example 3.</li> <li>Inventor=Assignee: sometimes, the inventor and the assignee are the same person and the document won't repeat the name; this may be signalled by the phrase \"Erfinder zugleich Inhaber\". In this case, we tag the name only as the inventor, because a single group of words cannot be tagged twice. See example 4.</li> </ul> <p>Examples</p> <ol> <li> <p>Standard Case with a person, from patent DD79836</p> <p>Erfinder: Wilhelm Uhrig<code>INV</code>, WD</p> </li> <li> <p>Inventor only, from patent DD5076</p> <p>Erfinder: Dr ALEXANDER PRANSCHKE<code>INV</code>, Schwarzheide. Dr ERWIN SAUTER<code>INV</code>, Schwarzheide.</p> </li> <li> <p>Inventor only, from patent DD4075</p> <p>Erfinderbenennung ist ausgesetzt.</p> </li> <li> <p>Inventor=Assignee, from patent DD15399</p> <p>Erfinder zugleich Inhaber: Zalter Glei\u00dfner<code>INV</code>, Wei\u00dfenfeis (Saale)</p> </li> </ol>"},{"location":"DD_ANNOTATION_GUIDELINES/#asg","title":"<code>ASG</code>","text":""},{"location":"DD_ANNOTATION_GUIDELINES/#general-case_1","title":"General case","text":"<p>The tag <code>ASG</code> refers to the full name(s) of the person(s) or firm(s) who own(s) the patent rights.</p>"},{"location":"DD_ANNOTATION_GUIDELINES/#specific-cases_1","title":"Specific cases","text":"<ul> <li>Rechtstr\u00e4ger: Some patents distinguish between Inhaber and Rechtstr\u00e4ger: we keep tagging the Inhaber person as the assignee. See example 2.</li> </ul> <p>Examples</p> <ol> <li> <p>Standard Case with a firm, from patent DD79836</p> <p>Inhaber:  Dr. Plate GmbH<code>ASG</code>, Bonn, WD.</p> </li> <li> <p>Rechtstr\u00e4ger, from patent DD33554</p> <p>Erfinder: Manfred Gerlach, Dresden; Kurt J\u00e4ger, Dresden; Dipl-Ing. Gerhard Kasche, Dresden.</p> <p>Inhaber: Eigentum des Volkes<code>ASG</code>; Kurt J\u00e4ger<code>ASG</code>, Dresden; Dipl-Ing. Gerhard Kasche<code>ASG</code>, Dresden.</p> <p>Rechtstr\u00e4ger: VEB Gasturbinenbau und Energiemaschinenentwicklung Pirna, Pirna.</p> </li> </ol>"},{"location":"DD_ANNOTATION_GUIDELINES/#loc","title":"<code>LOC</code>","text":""},{"location":"DD_ANNOTATION_GUIDELINES/#general-case_2","title":"General case","text":"<p>The tag <code>LOC</code> refers to the full location sequence of an assignee or inventor. In some patents, no location is reported (see DD86584).</p>"},{"location":"DD_ANNOTATION_GUIDELINES/#specific-cases_2","title":"Specific cases","text":"<ul> <li>District: The patents might report the district within a given city, which we tag along. See example 3.</li> </ul> <p>Examples</p> <ol> <li> <p>Standard Case with a location for the (foreign) assignee and a location for the (foreign) inventor, from patent DD76817</p> <p>Erfinder: Abraham A.Goldberg, USA<code>LOC</code>.</p> <p>Inhaber: COLUMBIA BROADCASTING SYSTEM, INC., New York, USA<code>LOC</code>.</p> </li> <li> <p>Standard Case with German patentees, from patent DD69242     Erfinder: Dr-Ing. Walter Froede, Neckarsulm (WD)<code>LOC</code>.</p> <p>Inhaber: NSU-Motorenwenke AG, Neckarsulm (WD)<code>LOC</code></p> <p>Wandel GmbH, Lindau (WD)<code>LOC</code></p> </li> <li> <p>District from patent DD62143</p> <p>Erfinder zugleich Inhaber: Dr. Wolfram Jenichen, Sch\u00f6now (b. Berlin)<code>LOC</code>.</p> </li> </ol>"},{"location":"DD_ANNOTATION_GUIDELINES/#occ","title":"<code>OCC</code>","text":""},{"location":"DD_ANNOTATION_GUIDELINES/#general-case_3","title":"General case","text":"<p>This tag concerns the university title of inventors/assignees. When none is reported, we do not tag anything.</p> <p>Examples</p> <ol> <li> <p>Standard Case with several inventors from patent DD1393</p> <p>Erfinder: Dr.<code>OCC</code> GERHARD HANSEN, Dr<code>OCC</code> PAUL HEINZ KECK, Jena. Dipl.-Ing.<code>OCC</code> KARL ILMER, Jena.</p> </li> </ol>"},{"location":"DD_ANNOTATION_GUIDELINES/#format-2","title":"Format 2","text":""},{"location":"DD_ANNOTATION_GUIDELINES/#inv_1","title":"<code>INV</code>","text":""},{"location":"DD_ANNOTATION_GUIDELINES/#general-case_4","title":"General case","text":"<p>The tag <code>INV</code> refers to the full name of an inventor. This is a person that is not referred to as the assignee and is specifically referred to as the inventor (Erfinder).</p>"},{"location":"DD_ANNOTATION_GUIDELINES/#specific-cases_3","title":"Specific cases","text":"<ul> <li>Secret inventor: some publications do not report the name of the inventor on purpose. This may be signalled by the sentence \"Erfinder: werden aug Antrag nicht genannt\". See example 2.</li> <li>Inventor=Assignee: sometimes, the inventor and the assignee are the same person and the document won't repeat the name; this may be signalled by the phrase \"siehe (72)\" in line 71 (where the assignee should be). In this case, we tag the name only as the inventor, because a single group of words cannot be tagged twice. See example 3.</li> </ul> <p>Examples</p> <ol> <li> <p>Standard Case with several inventors, from patent DD251362</p> <p>(72) Kolitsch, Andreas<code>INV</code>, Dr.; Richter, Edgar<code>INV</code>, Dr.; Mende, Edgar<code>INV</code>; Polnik, Frank<code>INV</code>, DD</p> </li> <li> <p>Secret inventor, from patent DD126770</p> <p>Erfinder: werden aug Antrag nicht genannt</p> </li> <li> <p>Inventor=Assignee, from patent DD148904</p> <p>(71) siehe (72).</p> <p>(72) Trabert, Erich<code>INV</code>, DD</p> </li> </ol>"},{"location":"DD_ANNOTATION_GUIDELINES/#asg_1","title":"<code>ASG</code>","text":""},{"location":"DD_ANNOTATION_GUIDELINES/#general-case_5","title":"General case","text":"<p>The tag <code>ASG</code> refers to the full name(s) of the person(s) or firm(s) who own(s) the patent rights.</p>"},{"location":"DD_ANNOTATION_GUIDELINES/#specific-cases_4","title":"Specific cases","text":"<ul> <li>Foreign Assignee: When the assignee is non-German, it might be reported in line (73) instead of (71). See example 2.</li> </ul> <p>Examples</p> <ol> <li> <p>Standard Case with a government-run company, from patent DD133115</p> <p>(71) Akademie der Wissenschaften der DDR, Zentralinstitut for Isotopen- und Strahlenforschung<code>ASG</code>, Leipzig , DD</p> </li> <li> <p>Foreign Assignee, from patent DD202259     (71) siehe (73)</p> <p>(73) ITERA COMPONENTS AB<code>ASG</code>, GOETEBORG, SE</p> </li> </ol>"},{"location":"DD_ANNOTATION_GUIDELINES/#loc_1","title":"<code>LOC</code>","text":""},{"location":"DD_ANNOTATION_GUIDELINES/#general-case_6","title":"General case","text":"<p>The tag <code>LOC</code> refers to the full location sequence of an assignee or inventor. Typically, only the country will be reported for inventors, but greater details may be given for assignees.  Here are a few abbreviations that are used throughout the patents.</p> <ul> <li>SU: Soviet Union</li> <li>HU: Hungary</li> <li>CS: Tchecoslovaquia</li> <li>BG: Bulgaria</li> <li>WD: West-Germany.</li> </ul>"},{"location":"DD_ANNOTATION_GUIDELINES/#specific-cases_5","title":"Specific cases","text":"<ul> <li>Full Address: There is quite a number of Format 2 patents which report the full address of an assignee or inventor, and in this case we tag it all. See example 2.</li> </ul> <p>Examples</p> <ol> <li> <p>Standard Case with the country and the city from patent DD141623</p> <p>(71) Akademie der Wissenschaften der DDR, Berlin, DD<code>LOC</code>.</p> </li> <li> <p>Full Address from patent DD251362</p> <p>(71) Akademie der Wissenschaften der DDR, Otto-Nuschke Stra\u00dfe 22/23, Berlin 1080, DD<code>LOC</code>.</p> </li> </ol>"},{"location":"DD_ANNOTATION_GUIDELINES/#occ_1","title":"<code>OCC</code>","text":""},{"location":"DD_ANNOTATION_GUIDELINES/#general-case_7","title":"General case","text":"<p>This tag concerns the university title of inventors/assignees. When none is reported, we do not tag anything.</p> <p>Examples</p> <ol> <li> <p>Standard Case with several inventors from patent DD220001</p> <p>(72): L\u00e4mmer, Hans-Georg, Ing-Dipl.<code>OCC</code>; Sommer, Peter; Matzner, Dieter, Dipl-Ing.<code>OCC</code>, DD.</p> </li> </ol>"},{"location":"DD_ANNOTATION_GUIDELINES/#relationships","title":"Relationships","text":"<p>See the common annotation guidelines.</p>"},{"location":"DD_ANNOTATION_GUIDELINES/#examples","title":"Examples","text":""},{"location":"DD_ANNOTATION_GUIDELINES/#example-1-format-1-dd-1300","title":"Example 1: Format 1 (DD-1300)","text":""},{"location":"DD_ANNOTATION_GUIDELINES/#example-2-format-2-dd-142651","title":"Example 2: Format 2 (DD-142651)","text":""},{"location":"DD_DATE_IMPUTATION/","title":"DATE IMPUTATION","text":""},{"location":"DD_DATE_IMPUTATION/#problem","title":"Problem","text":"<p>Before 1972 (incl), the publication date of DD patents is missing. Frontier is fuzzy, patents publication numbers are not exactly chronological but nearly. This makes it hard to manually find the latest publication number for each vintage.</p> <p></p> <p>Note</p> <p>The above figure reports the patent number (x-axis) and the publication year (ausgabe datum) labeled by hand of a random sample of 1k+ DD patents with missing date.</p>"},{"location":"DD_DATE_IMPUTATION/#approach","title":"Approach","text":"<p>The idea is to look iteratively at each publication year and find the best threshold (in terms of f1) to delimit between the year and year+1. We obtain a stepwise prediction function where each threshold can be characterized by an f1-score indicating how \"good\" the threshold is.</p> <p></p>"},{"location":"DD_DATE_IMPUTATION/#results","title":"Results","text":"<p>The overall accuracy of the prediction function is 93% on the training set (for the sake of simplicity, we don't have a test set)</p>"},{"location":"DD_DATE_IMPUTATION/#date-imputation_1","title":"Date imputation","text":"<p>Reading</p> <p>Patents with number below 3 are imputed publication year 1951, between 3 and 1723 are imputed publication year 1952, etc</p> year threshold 1951 DD-3 1952 DD-1723 1953 DD-6164 1954 DD-8769 1955 DD-10939 1956 DD-12386 1957 DD-14208 1958 DD-16107 1959 DD-18028 1960 DD-20460 1961 DD-22493 1962 DD-24412 1963 DD-26646 1964 DD-34886 1965 DD-44171 1966 DD-53027 1967 DD-59516 1968 DD-65066 1969 DD-70534 1970 DD-78709 1971 DD-86784"},{"location":"DD_MODEL_CARD/","title":"MODELS","text":""},{"location":"DD_MODEL_CARD/#i-model-overview","title":"\u2139\ufe0f Model Overview","text":"Name <code>de_ent_ddpatent01</code> &amp; <code>de_ent_ddpatent02</code> Language German (de) Pipeline ner Authors Bergeaud and Verluise Date (last) 02/2021 License MIT"},{"location":"DD_MODEL_CARD/#training","title":"\ud83d\udc77 Training","text":"<pre><code>FORMAT=ddpatent01  # ddpatent02\nspacy train configs/de_t2vner.cfg --paths.train data/train_ent_${FORMAT}.spacy --paths.dev data/train_ent_${FORMAT}.spacy --output models/de_ent_${FORMAT}\n</code></pre>"},{"location":"DD_MODEL_CARD/#model-performance","title":"\ud83d\udd2e Model Performance","text":""},{"location":"DD_MODEL_CARD/#de_ent_ddpatent01model-best","title":"<code>de_ent_ddpatent01/model-best</code>","text":"ALL ASG INV LOC OCC p 0.99 0.99 0.96 0.99 0.99 r 0.99 0.99 0.96 0.99 1 f 0.99 0.99 0.96 0.99 0.99"},{"location":"DD_MODEL_CARD/#de_ent_ddpatent02model-best","title":"<code>de_ent_ddpatent02/model-best</code>","text":"ALL ASG INV LOC OCC p 0.95 0.94 0.95 0.98 0.94 r 0.94 0.87 0.97 0.95 0.94 f 0.95 0.91 0.96 0.96 0.94"},{"location":"DD_MODEL_CARD/#intended-use","title":"\ud83c\udfaf Intended use","text":"<p><code>de_ent_ddpatent0*</code> have been specifically trained on DD patents. The model's performances are not guaranteed out of this scope.</p>"},{"location":"DD_MODEL_CARD/#versions-and-alternative-approaches","title":"\ud83d\udd02 Versions and alternative approaches","text":"Version Comment 0.1 ner - spaCy v2 1.0 ner - spaCy v3"},{"location":"DE/","title":"OVERVIEW","text":""},{"location":"DE/#background","title":"Background","text":"<p>The German Patent and Trade Mark Office (DPMO) was founded in 1877. The first patent was granted as early as July 2, 1877. There was (close to) no patent published between 1945 and 1950. The 1949-1992 period is characterised by the split of Germany in two distinct countries (BDR and DDR) and consequently the split of the patent system as well. After that date, the two offices reunified into the DPMO.</p>"},{"location":"DE/#data","title":"\ud83d\udcda Data","text":"Patent office Time span (publication year) Kind code(s) DE 1877-1980 A1, B, B3, C, C1, D1 Publication number (range) Data source Pre-processing E.g. Format # DE1C-DE977922C Espacenet OCR DE283698C 1 DE1000001B-DE7927785 Espacenet OCR DE2454950C 2 <p>Done</p> <p>In total, we consider 1,983,161 documents from 1877 to 1980.</p>"},{"location":"DE/#extraction-schema","title":"\ud83d\ude9c Extraction schema","text":"<p>See the annotation guidelines.</p>"},{"location":"DE/#models","title":"\ud83d\udd2e Models","text":"<p>See the models card.</p>"},{"location":"DE/#other","title":"Other","text":"<p>See the geocoding, citizenship and date imputation documentation.</p>"},{"location":"DE_ANNOTATION_GUIDELINES/","title":"ANNOTATION GUIDELINES","text":"<p>Warning</p> <p>GitHub markdown does not fully support visual annotation components (e.g. entity boxes) used below. We invite user interested in the annotation guidelines to download the documents and open it in a development environment supporting extended markdown syntax (e.g. MacDown, PyCharm, etc) and/or save it as a pdf.</p>"},{"location":"DE_ANNOTATION_GUIDELINES/#preliminary-comments","title":"Preliminary comments","text":"<p>The patent corpus that we consider for Germany spans the period 1877-1980 and has 2 types of formats.</p>"},{"location":"DE_ANNOTATION_GUIDELINES/#format-1-from-de1c-to-de977922c","title":"Format 1, from  DE1C to DE977922C","text":""},{"location":"DE_ANNOTATION_GUIDELINES/#information-display","title":"Information display","text":"<p>For this format, the information is given at the top of the document, in a header, just below the seal of the Patentamt. This format experiences some evolution over time.</p> <p>From publication number DE1C (1877) to DE13105C (1881), the front page of the patent usually does not have any text (at least in the documents that were retrieved by Espacenet) and contain the following information (and in that order):</p> <ul> <li>the reference of the patent: \"Patentschrift No (...)\"</li> <li>the name and location of the assignee (either a person or a firm)   E.g: \"S.Frank in Stolp (Pommern)\"</li> <li>the title of the (claimed) invention. E.g: \"Neuerungen an Tabakspfeifen\" (Innovations for pipes)</li> <li>a technological class number, sometimes with the title of this class. E.g: \"Klasse 44, Kurzwaaren\" (Class 44, Dry Goods). This classification is specific to Germany.</li> </ul> <p>From publication number DE13106C to DE977922C (1973), some changes are introduced with the relevant information being still located in the header. The main difference is that the technological class now comes right below the patent number, while the seal of the patent office is at the top of the document.  Information about the assignee is unchanged, as well as the title of the invention which comes below. See example 2.</p> More on format 1<ul> <li>Erfinder: From 1944 onwards, an important item is added right before the name of the assignee: a line specifies the name of the inventor (Erfinder) as well as his location. E.g : \"Bernhard Ziebell, Braunschweig\" or \"Eugen Stich in Mannheim\". A second line explicits this:   \"(...) ist als Erfinder genannt worden...\".</li> <li>Technological class: In 1957, for the first time an \"international class\" is specified for the patent (as opposed to the German class).</li> </ul>"},{"location":"DE_ANNOTATION_GUIDELINES/#information-extraction","title":"Information extraction","text":"<p>We extract 5 different \"entities\" from the header of DE patents in format category 1.</p> Entity Content E.g <code>ASG</code> Assignee full name ANTON KLEBER <code>ASG</code> in SAARBRUCKEN <code>INV</code> \u00a0Inventor full name (Erfinder) Frutz Doring <code>INV</code>, Berlin-Frohnau ist als Erfinder genannt worden <code>LOC</code> Location of the assignee/inventor Demag Akt-Ges. in Duisburg <code>LOC</code>. <code>OCC</code> Occupation of the assignee/inventor (academic title) Dipl-Ing <code>OCC</code> Georg Werner Gaze, Ingolstadt <code>CLAS</code> Technological class (German system)  KLASSE 49h GRUPPE 27 D 16736VI/49h <code>CLAS</code> <p>These entities are tied together with 2 types of relations.</p> Relation Content E.g. <code>LOCATION</code> Links an <code>ASG</code>/<code>INV</code> to a <code>LOC</code> MARIUS ALBERT de DION <code>ASG</code>--&gt;<code>LOCATION</code>--&gt;PUTEAUX (Seine, Frankr.) <code>LOC</code> <code>OCCUPATION</code> Links an <code>ASG</code>/<code>INV</code> to an <code>OCC</code> Dr.\u00a0<code>OCC</code>&lt;--<code>OCCUPATION</code>&lt;--KARL HENKEL\u00a0<code>ASG</code>"},{"location":"DE_ANNOTATION_GUIDELINES/#format-2-from-de977923c-to-de978074c-and-from-de1000001b-onwards","title":"Format 2, from DE977923C to DE978074C and from DE1000001B onwards","text":"<p>This format corresponds to two subformats:</p> <ul> <li>The first subformat starts with DE1000001B, in 1957.</li> <li>The second subformat starts with patent DE1283771, in 1968.</li> </ul>"},{"location":"DE_ANNOTATION_GUIDELINES/#information-display_1","title":"Information display","text":"<p>With the second subformat, we get back to a format that does not have a body of text.</p> <p>In the first frame of the header, one gets the following information:</p> <ul> <li>the reference of the patent (Auslegeschrift # or Offenlegungsschrift #).</li> <li>the technological class number. E.g: \"Deutsche Kl.: 21c-22\"</li> <li>the publication date (Auslegetag or Offenlegungstag). E.g: \"Auslegetag: 9.September 1965\"</li> </ul> <p>In the second frame of the header, one gets the following information:</p> <ul> <li>the title of the invention (Bezeichnung). E.g: \"Bezeichnung: Wegwerfwindel\".</li> <li>the name and location of the assignee (Anmelder). E.g: \"Anmelder: The Procter&amp;Gamble Co., Cincinnati, Ohio (U.St.A)\".</li> <li>the name and location of the inventor (Erfinder). E.g: \"Erfinder: Buell, Kenneth Barclay, Cincinnati, Ohio (U.St.A)\".</li> </ul> <p>It seems that the specifically German technological classifications are not even mentioned from 1975 onwards. When a person is located in Germany, the name of the city is typically accompanied by a zipcode (e.g: \"7000 Stuttgart\", \"2000 Hamburg\", \"8000 M\u00fcnchen\", ...).</p> More on format 2<p>Oddly, some patents issued after 1957 have publication number inferior to 1000000. Those patents are published (ausgegeben) in or after 1973 and up until 1980. Their format is almost identical to format 2. The only difference with format 2 is that the document is again presented as a Patentschrift (not an Offenlegungsschrift) and the publication date is announced by the word Ausgabetag.</p>"},{"location":"DE_ANNOTATION_GUIDELINES/#information-extraction_1","title":"Information extraction","text":"<p>We extract 5 different \"entities\" from the header of DE patents in format category 2.</p> Entity Content E.g. <code>ASG</code> Assignee full name Anmelder: Greer Hydraulics, Inc. <code>ASG</code>, Los Angeles, Calif. (V.St.A.) <code>INV</code> Inventor full name Erfinder: Knight, David George <code>INV</code> Sommershall, Chesterfield (Gro\u00dfbritannien) <code>LOC</code> Location of the Assignee/Inventor Anmelder: Sharp K.K., Osaka (Japan) <code>LOC</code> <code>OCC</code> Occupation of the Assignee/Inventor (academic title) Dietrich Jurgen, Dr.-Ing. <code>OCC</code>; 7033 Herrenberg <code>CLAS</code> Technological class (German system) Deutsche Kl.: 42 i, 8/80 <code>CLAS</code> <p>These entities are tied together with 2 types of relations.</p> Relation Content E.g. <code>LOCATION</code> Links an <code>ASG</code>/<code>INV</code> to a <code>LOC</code> The Procter&amp;Gamble Co. <code>ASG</code>--&gt;<code>LOCATION</code>--&gt;Cincinnati, Ohio (U.St.A) <code>LOC</code> <code>OCCUPATION</code> Links an <code>ASG</code>/<code>INV</code> to an <code>OCC</code> Spitzke, Wolfgang <code>ASG</code>--&gt;<code>OCCUPATION</code>--&gt;Ing.(grad.) <code>OCC</code>"},{"location":"DE_ANNOTATION_GUIDELINES/#entities","title":"Entities","text":""},{"location":"DE_ANNOTATION_GUIDELINES/#format-1","title":"Format 1","text":""},{"location":"DE_ANNOTATION_GUIDELINES/#inv","title":"<code>INV</code>","text":""},{"location":"DE_ANNOTATION_GUIDELINES/#general-case","title":"General case","text":"<p>The tag <code>INV</code> refers to the full name of an inventor. This is a person that is not referred to as the assignee and is sometimes specifically referred to as the inventor (Erfinder). The document might introduce the inventor with phrases like \"ist als Erfinder genannt worden\" or \"als Erfinder benannt\", or simply with \"Erfinder : (name)\".</p>"},{"location":"DE_ANNOTATION_GUIDELINES/#specific-cases","title":"Specific cases","text":"<ul> <li>Inventor=Assignee: sometimes, the inventor and the assignee are the same person and the document does not repeat the name. In this case, we do not tag further. See example 2 from patent DE1575852A1.</li> <li>Academic title: in some cases, the inventor has an academic title (see example 3 from patent DE918881C). This title is not part of the tag <code>INV</code> but is part of a tag <code>OCC</code> (see below)</li> <li>Secret inventor: some publications do not report the name of the inventor on purpose. In such case, the patent includes the following sentence \"der Erfinder hat beantragt, nicht gennant zu werden\". See for example patent DE825754C. In such case, we do not label any inventor.</li> </ul> <p>Examples</p> <ol> <li> <p>Standard Case, from patent DE869602C</p> <p>Bela Barenyi\u00a0\u00a0<code>INV</code>, Stuttgart-Rohr, ist als Erfinder genannt worden</p> </li> <li> <p>Inventor=Assignee, from patent DE1575852A1</p> <p>Als Erfinder bennant: Erfinder ist der Anmelder</p> </li> <li> <p>Academic title, from patent DE918881C</p> <p>Ing. Karl Nowak\u00a0<code>INV</code>, Wien</p> <p>ist als Erfinder gennant worden</p> </li> </ol>"},{"location":"DE_ANNOTATION_GUIDELINES/#asg","title":"<code>ASG</code>","text":""},{"location":"DE_ANNOTATION_GUIDELINES/#general-case_1","title":"General case","text":"<p>The tag <code>ASG</code> refers to the full name(s) of the person(s) or firm(s) who own(s) the patent rights.</p>"},{"location":"DE_ANNOTATION_GUIDELINES/#specific-cases_1","title":"Specific Cases","text":"<ul> <li>Former name: Do not label the former name of the company when it is given. This is signalled by the German word \"vormals\". See example 3 from patent DE134077C.</li> <li>vertreten: in the rare cases where an assignee uses a third party to represent her, only label the assignee. See example 4.</li> </ul> <p>Examples</p> <ol> <li> <p>Standard Case with a firm, from patent DE283698C</p> <p>SIEMENS-SCHUKERT WERKE G.M.B.H.\u00a0\u00a0<code>ASG</code> IN SIEMENSSTADT B. BERLIN</p> </li> <li> <p>Standard Case with several persons, from patent DE170522C</p> <p>AUGUST REINHOLD ILCHMANN\u00a0\u00a0<code>ASG</code> IN DRESDEN, GUSTAV ADOLF RAUER <code>ASG</code> IN DRESDEN-RADEBEUL UND EHREGOTT RICHTER\u00a0\u00a0<code>ASG</code> IN DRESDEN</p> </li> <li> <p>Specific Case 1 (Former Name) from patent DE134077C</p> <p>ELEKTRIZIT\u00c4T-AKTIEN-GESELLSCHAFT\u00a0\u00a0<code>ASG</code> VORMALS SCHUKERT&amp;CO IN N\u00dcRNBERG</p> </li> <li> <p>vertreten from patent DE824442C</p> <p>Deutsche Bundesbahn <code>ASG</code>  vertreten durch das Eisenbahn-Zentralamt Minden, Minden (Westf.)</p> </li> </ol>"},{"location":"DE_ANNOTATION_GUIDELINES/#loc","title":"<code>LOC</code>","text":""},{"location":"DE_ANNOTATION_GUIDELINES/#general-case_2","title":"General case","text":"<p>The tag <code>LOC</code> refers to the full location sequence. It is usually the name of a city and a region (or state, or province) in which the city is located.</p>"},{"location":"DE_ANNOTATION_GUIDELINES/#specific-cases_2","title":"Specific cases","text":"<ul> <li> <p>District: When the assignee is located in Germany, the document might go as far as to give a particular district within the assignee's city. See example 5. More rarely, only the district (without the city) is provided. See example 6.</p> </li> <li> <p>Former City: Some cities mentioned by sufficiently old patents might not exist anymore, at least as cities (they might have become part of a larger agglomeration at some point between the publication and today).</p> </li> </ul> <p>Examples</p> <ol> <li> <p>Standard Case with a standalone city, from patent DE13106C</p> <p>HERMANN SCHULZ in RATIBOR\u00a0<code>LOC</code></p> </li> <li> <p>Standard Case with a German city and its Land, from patent DE872632C</p> <p>Friedrich Stemmermann in Sinzheim bei B\u00fchl (Bad.)\u00a0<code>LOC</code></p> </li> <li> <p>Standard Case with a city and its country, from patent DE153621C</p> <p>GEORGE JAMES GOODALL IN PORTHILL (ENGL.)<code>LOC</code>.</p> </li> <li> <p>Standard Case with a city, a region/state and a country from patent DE887191C</p> <p>Scovill Manufacturing Company, Waterbury, Conn. (U.St.A)<code>LOC</code>.</p> </li> <li> <p>District, from patent DE283698C</p> <p>SIEMENS-SCHUKERT WERKE G.M.B.H IN SIEMENSSTADT B. BERLIN<code>LOC</code>.</p> </li> <li> <p>District, from patent DE93717C</p> <p>KALKER WERKZEUGMASCHINENFABRIK L.W.BREUER, SCHUMACHER&amp;CO. IN KALK<code>LOC</code>.</p> </li> <li> <p>Former City, from patent DE78165C</p> <p>H.W. SOLFRIAN IN HOLSTERHAUSEN BEI EICKEL\u00a0<code>LOC</code></p> </li> </ol> <p>N.B: Holsterhausen is now part of the city Herne.</p>"},{"location":"DE_ANNOTATION_GUIDELINES/#occ","title":"<code>OCC</code>","text":""},{"location":"DE_ANNOTATION_GUIDELINES/#general-case_3","title":"General case","text":"<p>The tag <code>OCC</code> refers to the academic title of an <code>INV</code> or <code>ASG</code>. It typically corresponds to a prefix before the name which is an abbreviation of a title (e.g. Dr., Ing. etc...).</p> <p>Examples</p> <ol> <li> <p>from patent DE975335C</p> <p>Dr. <code>OCC</code> Wilhelm Michael, Ludwigshafen/Rhein, und Dr. <code>OCC</code>  Wolfgang J\u00e4ckh, Heidelberg sind als Erfinder gennant worden</p> </li> </ol>"},{"location":"DE_ANNOTATION_GUIDELINES/#clas","title":"<code>CLAS</code>","text":""},{"location":"DE_ANNOTATION_GUIDELINES/#general-case_4","title":"General case","text":"<p>The tag <code>CLAS</code> refers to the German technological class that usually appears on patents up until 1975. It can encompass more or less details.</p> <p>Do not include \"Deutsche Kl\" in the label.</p> <p>When two classifications are given (international and German) only label the German's. See examples 3 and 4.</p> <p>Do not label the description of the class. See example 1.</p> <p>Label also the subclass. See example 4 and 5.</p> <p>Examples</p> <ol> <li> <p>standard case with a class number and its brief description, from patent DE4010C</p> <p>Klasse 44 <code>CLAS</code> KURZWAAREN</p> </li> <li> <p>standard case with a class number and a group number, from patent DE283698C</p> <p>KLASSE 21d GRUPPE 19\u00a0<code>CLAS</code></p> </li> <li> <p>standard case with a German class code and an international class code, from patent DE1200408</p> <p>Int.Cl.: H02f</p> <p>Deutsche Kl.:21c-22\u00a0<code>CLAS</code></p> </li> <li> <p>standard case with a German class code and an international class code with a subclass, from patent DE949207C</p> <p>KLASSE 49a GRUPPE 3603 <code>CLAS</code> INTERNAT. KLASSE B23b B 30976 lb/494 <code>CLAS</code></p> </li> <li> <p>standard case with a class number, a group number and additional information from patent DE923434C</p> <p>KLASSE 20h GRUPPE 7 St 5364 II/ 20h <code>CLAS</code></p> </li> </ol>"},{"location":"DE_ANNOTATION_GUIDELINES/#format-2","title":"Format 2","text":""},{"location":"DE_ANNOTATION_GUIDELINES/#inv_1","title":"<code>INV</code>","text":""},{"location":"DE_ANNOTATION_GUIDELINES/#general-case_5","title":"General case","text":"<p>The tag <code>INV</code> refers to the full name of an inventor. This is a person that is referred to as Erfinder. It appears after the item Als Erfinder banannt: or simply after Erfinder:.</p>"},{"location":"DE_ANNOTATION_GUIDELINES/#specific-cases_3","title":"Specific cases","text":"<p>Examples</p> <ol> <li> <p>standard case</p> </li> <li> <p>als erfinder benannt from patent DE2054787A1</p> <p>Als Erfinder benannt: Ohyama, Yasishi <code>INV</code>;  Miyazawa, Saduyuki <code>INV</code>, Kyoto (Japan)</p> </li> </ol>"},{"location":"DE_ANNOTATION_GUIDELINES/#asg_1","title":"<code>ASG</code>","text":""},{"location":"DE_ANNOTATION_GUIDELINES/#general-case_6","title":"General case","text":"<p>The tag <code>ASG</code> refers to the full name of an assignee, either a firm or a person. This is a person that is referred to as Anmelder. It appears after the item Anmelder:. When the assignee lives outside Germany, the patent also specifies the name of the patent attorney (Vertreter). We are not interested in this information and the associated entities (<code>LOC</code> and <code>OCC</code> namely).</p>"},{"location":"DE_ANNOTATION_GUIDELINES/#specific-cases_4","title":"Specific cases","text":"<p>Examples</p> <ol> <li> <p>standard case from patent DE2818594A1</p> <p>Anmelder: Greer Hydraulics, Inc., Los Angeles, Calif. (V.St.A.)</p> </li> </ol>"},{"location":"DE_ANNOTATION_GUIDELINES/#loc_1","title":"<code>LOC</code>","text":""},{"location":"DE_ANNOTATION_GUIDELINES/#general-case_7","title":"General case","text":"<p>Similar to format 1.</p>"},{"location":"DE_ANNOTATION_GUIDELINES/#specific-cases_5","title":"Specific cases","text":"<ul> <li>full address: in some rare instances, the inventor or the assignee gives its full address at the top of the body (in addition to giving its city in the header). See example 2. In more frequent cases, the full address is given in the header (see example 3).</li> </ul> <p>Examples</p> <ol> <li> <p>standard case from patent DE1201058B</p> <p>Anmelder: General Aniline &amp; Film Corporation, New York, N.Y. (V.St.A) <code>LOC</code></p> </li> <li> <p>full address from patent DE2745546A1</p> <p>Anmelder: Katzer, Rudolf, Graz (Osterreich) <code>LOC</code> [...] Rudolf Katzer Klosterwiesgasse 29  8010 Graz . Osterreich <code>LOC</code></p> </li> <li> <p>full address from patent DE1026733B</p> <p>Anmelder: Pintsch Bamag Aktiengesellschaft Berlin NW 87, Reuchlinstr. 10-17 <code>LOC</code></p> </li> </ol>"},{"location":"DE_ANNOTATION_GUIDELINES/#occ_1","title":"<code>OCC</code>","text":""},{"location":"DE_ANNOTATION_GUIDELINES/#general-case_8","title":"General case","text":"<p>XX</p>"},{"location":"DE_ANNOTATION_GUIDELINES/#specific-cases_6","title":"Specific cases","text":"<p>XX</p> <p>Examples</p> <ol> <li> <p>standard case from patent DE1158387B</p> <p>Dr. techn. <code>OCC</code> Erns Fiala, Sindelfingen (Wurtt.)</p> </li> <li> <p>title after the name from patent DE2814877A1</p> <p>Erfinder: Diekman, Peter, Dr. <code>OCC</code>, 2300 Kiel</p> </li> </ol>"},{"location":"DE_ANNOTATION_GUIDELINES/#clas_1","title":"<code>CLAS</code>","text":""},{"location":"DE_ANNOTATION_GUIDELINES/#general-case_9","title":"General case","text":"<p>Similar to format 1.</p>"},{"location":"DE_ANNOTATION_GUIDELINES/#specific-cases_7","title":"Specific cases","text":"<ul> <li>Class KL: In some cases, the class is given in the form: KL.XXXXXX, in such case, we label the \"KL.\" See example 2.</li> </ul> <p>Examples</p> <ol> <li> <p>standard case from patent DE1218989B</p> <p>Deutsche Kl: 8f-3.51 <code>CLAS</code></p> </li> <li> <p>Class KL. from patent DE1158387B</p> <p>KL.63C 42 <code>CLAS</code> INTERNAT.KL. B62 d</p> </li> </ol>"},{"location":"DE_ANNOTATION_GUIDELINES/#cit","title":"<code>CIT</code>","text":""},{"location":"DE_ANNOTATION_GUIDELINES/#general-case_10","title":"General case","text":"<p>On some rare occasions, the origin of the firm is precised. This seems to only be the case for US firms. The <code>CIT</code> is either printed in full letter (example 1) or with abbreviations (example 2).</p> <p>Examples</p> <ol> <li> <p>nach den Gestzen from patent DE1216661B</p> <p>Anmmelder: Revere Copper and Brass Incorporated, eine Gesellschaft nach den Gesetzen des Staates Maryland <code>CIT</code>, New York, N.J. (V.St.A.)</p> </li> <li> <p>in parenthesis from patent DE2500682A1</p> <p>Anmelder: Process Systems, INc. (N.D.Ges. d.Staates Nevada), Salt Lake City, Utah (V.St.A.)</p> </li> </ol>"},{"location":"DE_ANNOTATION_GUIDELINES/#relationships","title":"Relationships","text":"<p>See the common annotation guidelines.</p>"},{"location":"DE_ANNOTATION_GUIDELINES/#examples","title":"Examples","text":""},{"location":"DE_ANNOTATION_GUIDELINES/#example-1-format-1-before-1881","title":"Example 1: Format 1 before 1881","text":""},{"location":"DE_ANNOTATION_GUIDELINES/#example-2-format-1-without-inventor","title":"Example 2: format 1 without inventor","text":""},{"location":"DE_ANNOTATION_GUIDELINES/#example-3-format-1-with-inventor","title":"Example 3: format 1 with inventor","text":""},{"location":"DE_ANNOTATION_GUIDELINES/#example-4-format-2-first-subformat","title":"Example 4: format 2, first subformat","text":""},{"location":"DE_ANNOTATION_GUIDELINES/#example-5-format-2-second-subformat","title":"Example 5: format 2, second subformat","text":""},{"location":"DE_DATE_IMPUTATION/","title":"DATE IMPUTATION","text":""},{"location":"DE_DATE_IMPUTATION/#problem","title":"Problem","text":"<p>Before 1919 (incl), the publication date of DE patents is missing. Frontier is fuzzy, patents publication numbers are not exactly chronological but nearly. This makes it hard to manually find the latest publication number for each vintage. Number seem to be given based on the \"Patentdatum\".</p>"},{"location":"DE_DATE_IMPUTATION/#approach","title":"Approach","text":"<p>We look in the corpus of patents to find the latest publication number for each given year from 1877 to 1920. We use the patent gazette published par the German patent offices (\"PatentBlat\") and consider the largest publication number specified under section \"Erteilungen\". The gazette is published weekly and we consider either week 52 or week 53 of each year from 1878 to 1919 (and 51 for 1918). From these benchmark patents, we carry forward the year of publication.</p> <p>Warning</p> <p>This method is not applicable for patents published earlier than 1883, hence for years 1877-1882, we manually look for patents with publication date in late December and arbitrarily select a benchmark.</p>"},{"location":"DE_DATE_IMPUTATION/#results","title":"Results","text":"Publication year Benchmark publication number 1877 DE-1877-C* 1878 DE-3297-C* 1879 DE-8460-C* 1880 DE-12116-C* 1881 DE-16547-C* 1882 DE-20544-C* 1883 DE-26025-C 1884 DE-30543-C 1885 DE-34561-C 1886 DE-38569-C 1887 DE-42451-C 1888 DE-46348-C 1889 DE-50707-C 1890 DE-55460-C 1891 DE-61010-C 1892 DE-66910-C 1893 DE-73340-C 1894 DE-79528-C 1895 DE-85240-C 1896 DE-90750-C 1897 DE-96190-C 1898 DE-101760-C 1899 DE-109190-C (we use DE-109189-C as DE-109190-C is missing) 1900 DE-117765-C 1901 DE-128268-C 1902 DE-139092-C 1903 DE-149056-C 1904 DE-158245-C 1905 DE-167845-C 1906 DE-180900-C 1907 DE-194320-C 1908 DE-206135-C 1909 DE-218130-C 1910 DE-230230-C 1911 DE-242870-C 1912 DE-255770-C 1913 DE-269260-C 1914 DE-281820-C 1915 DE-290010-C 1916 DE-296016-C 1917 DE-303620-C 1918 DE-310930-C 1919 DE-318790-C"},{"location":"DE_MODEL_CARD/","title":"MODELS","text":""},{"location":"DE_MODEL_CARD/#i-model-overview","title":"\u2139\ufe0f Model Overview","text":"Name <code>de_ent_depatent01</code> &amp; <code>de_ent_depatent02</code> Language German (de) Pipeline ner Authors Bergeaud and Verluise Date (last**) 02/2020 License MIT"},{"location":"DE_MODEL_CARD/#training","title":"\ud83d\udc77 Training","text":"<pre><code>FORMAT=depatent01  # depatent02\nspacy train configs/de_t2vner.cfg --paths.train data/train_ent_${FORMAT}.spacy --paths.dev data/train_ent_${FORMAT}.spacy --output models/de_ent_${FORMAT}\n</code></pre>"},{"location":"DE_MODEL_CARD/#model-performance","title":"\ud83d\udd2e Model Performance","text":""},{"location":"DE_MODEL_CARD/#de_ent_depatent01model-best","title":"<code>de_ent_depatent01/model-best</code>","text":"ALL ASG CLAS INV LOC OCC p 0.99 0.98 0.99 0.99 1 0.97 r 0.99 0.99 1 0.96 1 0.98 f 0.99 0.98 1 0.98 1 0.97"},{"location":"DE_MODEL_CARD/#de_ent_depatent02model-best","title":"<code>de_ent_depatent02/model-best</code>","text":"ALL ASG CIT CLAS INV LOC OCC p 0.99 0.99 0 0.99 0.98 0.99 0.97 r 0.98 0.98 0 1 0.99 0.98 0.97 f 0.98 0.98 0 0.99 0.99 0.98 0.97"},{"location":"DE_MODEL_CARD/#intended-use","title":"\ud83c\udfaf Intended use","text":"<p><code>de_ent_depatent0*_sm</code> have been specifically trained on DE patents (resp DE1C-DE977922C and DE1000001B-). The model's performances are not guaranteed out of this scope.</p>"},{"location":"DE_MODEL_CARD/#versions-and-alternative-approaches","title":"\ud83d\udd02 Versions and alternative approaches","text":"Version Comment 0.1 ner - spaCy v2 1.0 ner - spaCy v3"},{"location":"FR/","title":"OVERVIEW","text":""},{"location":"FR/#background","title":"Background","text":"<p>The patent system was institutionalised in France as early as 1791. However, the French patents published before 1900 have not been made publicly available in a digitised format.</p> <p>Info</p> <p>The French INPI has manually built a database of inventors' locations spanning over the 19th century. This database is however not publicly available. We are not aware of prior work trying to constitute a database of the location of patentees filing in France for the 1900-1980 period.</p>"},{"location":"FR/#data-source","title":"\ud83d\udcda Data source","text":"Patent office Time span (publication year) Kind code(s) FR 1902-1980 A, A1 Publication number (range) Data source Pre-processing E.g. Format # FR317502A-FR1569050A (excluded) Espacenet OCR FR328212A 1 FR1605567A-FR2427761A Espacenet OCR FR1595761A 2 <p>Done</p> <p>In total, we consider 1,577,934 documents from 1902 to 1980.</p>"},{"location":"FR/#extraction-schema","title":"\ud83d\ude9c Extraction schema","text":"<p>See the annotation guidelines.</p>"},{"location":"FR/#models","title":"\ud83d\udd2e Models","text":"<p>See the models card.</p>"},{"location":"FR/#other","title":"Other","text":"<p>See the geocoding and citizenship documentation.</p>"},{"location":"FR_ANNOTATION_GUIDELINES/","title":"ANNOTATION GUIDELINES","text":"<p>Warning</p> <p>GitHub markdown does not fully support visual annotation components (e.g. entity boxes) used below. We invite user interested in the annotation guidelines to download the documents and open it in a development environment supporting extended markdown syntax (e.g. MacDown, PyCharm, etc) and/or save it as a pdf.</p> <p>The patent corpus that we consider for France spans the period 1902-1980 and has 2 types of formats.</p>"},{"location":"FR_ANNOTATION_GUIDELINES/#preliminary-comments","title":"Preliminary comments","text":"<p>The patent corpus that we consider for France has 2 types of formats and spans the period 1902-1980.</p> <p>The first format spans spans the period 1902-1969 (from FR317502A to FR1569050A) while the second format goes from 1969 to the end of our period of interest (from FR1569051A to FR1605567A and then from FR2000001A1).</p> More on patents numbering<p>The patent numbers from 1605567 to 2000000 do not seem to exist. The patents with letter seem to stop at FR1605566A and those with code A1 start at FR2000001. The code of those subsequent patents can also end in A5 if the publication is unique (otherwise, the A1 publication is associated with a later but basically identical B1 publication).</p>"},{"location":"FR_ANNOTATION_GUIDELINES/#format-1-from-fr317502a-to-fr1569050a","title":"Format 1, from FR317502A to FR1569050A.","text":""},{"location":"FR_ANNOTATION_GUIDELINES/#information-display","title":"Information display","text":"<p>The information we are interested in is in the header.</p> <p>The upper part of the header contains generic terms like the name of the institution and its seal, the patent's publication number and its technological class code.</p> <p>The lower part of the header contains a brief description of the content of the invention and the information about the assignee (name and location). Those two distinct pieces of information can be blended together in the same sentence or not. Finally a last sentence indicates the date at which the patent has been granted as well as the publication date.</p> More on format 1<p>We notice some slight changes within this format across time.</p> <ul> <li>Technological class: up until FR1096200A, the patents provide a French technological class. From patent FR1096201A to patent FR1196800A, both the French technological class as well as the international technological class are mentioned in the header. Finally, starting with patent FR1196801A, only the international technological class is retained.</li> <li>Location: It appears only from FR328212A. The assignee's country of residence is then mentioned. Starting with the patent FR371349A, the county is mentioned when the assignee's country is France (otherwise, only the country is reported).</li> </ul>"},{"location":"FR_ANNOTATION_GUIDELINES/#information-extraction","title":"Information extraction","text":"<p>We extract 4 different \"entities\" from the header of FR patents in format category 1.</p> Entity Content E.g <code>ASG</code> Assignee full name M. Robert John Jocelyn SWAN <code>ASG</code> r\u00e9sidant en Angleterre <code>INV</code> \u00a0Inventor full name (Demande de brevet d\u00e9pos\u00e9e aux Etats-Unis d'Am\u00e9rique au nom de  M. Ladislas Charles MATSCH <code>INV</code>) <code>LOC</code> Location of the assignee/inventor M. Louis LEGRAND r\u00e9sidant en France <code>LOC</code>. <code>CLAS</code> Technological class (French system)  XII Instruments de pr\u00e9cision 3 POIDS ET MESURES, INSTRUMENTS DE MATHEMMATIQUES<code>CLAS</code> <p>Assignees (or inventors) and their corresponding geographic indication are tied together through the relation \"LOCATION\".</p> Relation Content E.g. <code>LOCATION</code> Links an <code>ASG</code>/<code>INV</code> to a <code>LOC</code> M.Frederic PERDRIZET <code>ASG</code>--&gt;<code>LOCATION</code>--&gt;France (Gironde) <code>LOC</code>"},{"location":"FR_ANNOTATION_GUIDELINES/#format-2-from-fr1569051a-to-fr1605567a-and-then-from-fr2000001a1","title":"Format 2, from FR1569051A to FR1605567A and then from FR2000001A1.","text":""},{"location":"FR_ANNOTATION_GUIDELINES/#information-display_1","title":"Information display","text":"<p>The main body of text disappears from the first page of the patent and information are presented in a more \"tabulated\" manner: there are lines and they are associated with a number. For instance, in all of those \"Format 2\" patents, the line with the number 54 gives the title of the invention.</p> <p>In this format:</p> <ul> <li>The \"D\u00e9posant\" refers to the assignee. It contains its name as well as its location (usually introduced by the expression \"r\u00e9sidant en/au/aux\").</li> <li>The line \"Invention\" (or \"Invention de\") can be filled with the name of the inventor, although it is often empty (for instance, FR1595761A has an inventor, while FR2000001A1 does not).</li> </ul> More on format 2<p>Attributes reported but not extracted:</p> <ul> <li>Mandataire: A \"Mandataire\" is a specialised entity that files the patents on behalf of their client -the inventor. It appears in format 2.</li> <li>Technological class: The international technology class is reported</li> </ul>"},{"location":"FR_ANNOTATION_GUIDELINES/#information-extraction_1","title":"Information extraction","text":"<p>We extract 3 different \"entities\" from the header of FR patents in format category 2.</p> Entity Content E.g <code>ASG</code> Assignee full name D\u00e9posant: Soci\u00e9t\u00e9 dite: SALZDETFURTH A.G <code>ASG</code>, r\u00e9sidant en R\u00e9publique F\u00e9d\u00e9rale d'Allemagne <code>INV</code> \u00a0Inventor(s) full name Invention de: Takaya Endo<code>INV</code>, Shui Sato<code>INV</code>, Shoji Kikuchi<code>INV</code>, Koichi Takabe<code>INV</code>, Hiroyuki Imamura <code>INV</code>, Tamotsu Kozima<code>INV</code> et Tugumoto Usui <code>INV</code> <code>LOC</code> Location of the assignee/inventor D\u00e9posant: Soci\u00e9t\u00e9 dite: ROBERT BOSCH GBMH, r\u00e9sidant en R\u00e9publique F\u00e9d\u00e9rale d'Allemagne <code>LOC</code>. <p>Assignees (or inventors) and their corresponding geographic indication are tied together through the relation \"LOCATION\".</p> Relation Content E.g. <code>LOCATION</code> Links an <code>ASG</code>/<code>INV</code> to a <code>LOC</code> KONISHIROKU PHOTO INDUSTRY CO LTD <code>ASG</code>--&gt;<code>LOCATION</code>--&gt;Japon <code>LOC</code>"},{"location":"FR_ANNOTATION_GUIDELINES/#entities","title":"Entities","text":""},{"location":"FR_ANNOTATION_GUIDELINES/#format-1","title":"Format 1","text":""},{"location":"FR_ANNOTATION_GUIDELINES/#asg","title":"<code>ASG</code>","text":""},{"location":"FR_ANNOTATION_GUIDELINES/#general-case","title":"General case","text":"<p>The tag <code>ASG</code> refers to the full name of an assignee, either a firm or a person.</p>"},{"location":"FR_ANNOTATION_GUIDELINES/#specific-cases","title":"Specific cases","text":"<ul> <li>Former name: When the assignee is a firm whose name changed over time, its former name might be reported along with its current one. We do not keep the former name. See example 4.</li> </ul> <p>Examples</p> <ol> <li> <p>Standard Case with several persons, from patent FR504101</p> <p>MM.  Joseph MARTINENGO\u00a0<code>ASG</code> et  Jean-Baptiste GAUDON\u00a0<code>ASG</code> r\u00e9sidant en France (Loire)</p> </li> <li> <p>Standard Case with a person and a firm, from patent FR60167E**</p> <p>M.  Franz DOMALSKY\u00a0<code>ASG</code> et  SOCIETE DES ACIERIES DE LONGWY\u00a0<code>ASG</code> r\u00e9sidant: le 1er en Sarre; la 2e en France (Seine)</p> </li> <li> <p>Standard Case with a firm, from patent FR953956</p> <p>Soci\u00e9t\u00e9 dite:  CURRAN INDUSTRIES, INCORPORATED\u00a0<code>ASG</code> r\u00e9sidant aux Etats-Unis d'Am\u00e9rique</p> </li> <li> <p>Former name, from patent FR1103500</p> <p>Soci\u00e9t\u00e9 anonyme dite:  SOCIETE D'INSTALLATIONS GENERALES\u00a0ET D'AGENCEMENTS (S.I.G.E.A.C) <code>ASG</code> [anciennement H.CAVECCHI ET FILS] r\u00e9sidant en France (Seine)</p> </li> </ol>"},{"location":"FR_ANNOTATION_GUIDELINES/#inv","title":"<code>INV</code>","text":"<p>The tag <code>INV</code> refers to the full name of an inventor (this person is explicitly referred to as the inventor). Format 1 patents often don't have an inventor who is explicitly referred to as such (meaning, distinctively from the assignee).</p> <p>Examples</p> <ol> <li> <p>Standard Case with several inventors, from patent FR1288300</p> <p>Proc\u00e9d\u00e9 de fabrication des mati\u00e8res mousseuses contenant des groupes ur\u00e9thane (Invention:  Rudolf MERTEN\u00a0<code>INV</code>,  G\u00fcnther LOEW\u00a0<code>INV</code> et   Erwin WINDEMUTH\u00a0<code>INV</code>)</p> </li> </ol>"},{"location":"FR_ANNOTATION_GUIDELINES/#loc","title":"<code>LOC</code>","text":"<p>Refers to an indication about the location. It is usually the name of a country when the assignee is not a resident of France. Otherwise, it may be the name of a county with the name of the country (France) in parentheses. N.B: It can happen that no location is associated with an assignee (cf FR318016A).</p> <p>Examples</p> <ol> <li> <p>Standard Case with a foreign country, from patent FR1196800</p> <p>Soci\u00e9t\u00e9 am\u00e9ricaine dite: BENDIX AVIATION CORPORATION, r\u00e9sidant aux  Etats-Unis d'Am\u00e9rique <code>LOC</code>.</p> </li> </ol>"},{"location":"FR_ANNOTATION_GUIDELINES/#clas","title":"<code>CLAS</code>","text":"<p>Technological class of the patent: the classification is specific to France. In some format 1 patents, only the CPC (international) class is reported, in which case we do not tag anything.</p> <p>Examples</p> <ol> <li> <p>Standard Case without text, from patent FR842579</p> <p>BREVET D'INVENTION</p> <p> Gr.10-Cl.4\u00a0<code>CLAS</code> </p> </li> <li> <p>Standard Case with text, from patent FR322801</p> <p>BREVET D'INVENTION du 5 juillet 1902</p> <p> IV. ARTS TEXTILES 6. TULLES, DENTLLES ET FILETS, BRODERIES <code>CLAS</code> </p> </li> </ol>"},{"location":"FR_ANNOTATION_GUIDELINES/#format-2","title":"Format 2","text":""},{"location":"FR_ANNOTATION_GUIDELINES/#asg_1","title":"<code>ASG</code>","text":""},{"location":"FR_ANNOTATION_GUIDELINES/#general-case_1","title":"General case","text":"<p>The tag <code>ASG</code> refers to the full name of an assignee, either a firm or a person. The name of the assignee is found in line 71: \"D\u00e9posant:\".</p>"},{"location":"FR_ANNOTATION_GUIDELINES/#specific-cases_1","title":"Specific cases","text":"<ul> <li>Former name: When the assignee is a firm whose name changed over time, its former name might be reported along with its current one. We do not keep the former name. See example 2.</li> </ul> <p>Examples</p> <ol> <li> <p>Standard Case with a firm, from patent FR2227040A1</p> <p>D\u00e9posant:  MARATHON OIL COMPANY\u00a0<code>ASG</code>, r\u00e9sidant aux Etats-Unis d'Am\u00e9rique.</p> </li> <li> <p>Former name, from patent FR2183816A1</p> <p>D\u00e9posant: Soci\u00e9t\u00e9 dite:  FARBWERKE HOECHST A.G<code></code>ASG` VORMALS MEISTER LUCIUS &amp; BRUNING, r\u00e9sidant en R\u00e9publique F\u00e9d\u00e9rale d'Allemagne.</p> </li> </ol>"},{"location":"FR_ANNOTATION_GUIDELINES/#inv_1","title":"<code>INV</code>","text":""},{"location":"FR_ANNOTATION_GUIDELINES/#general-case_2","title":"General case","text":"<p>The tag <code>INV</code> refers to the full name of an inventor. This is a person that is not referred to as the assignee and is specifically referred to as the inventor. Its name is typically found in line 72: \"Invention:\" or \"Invention de:\".</p>"},{"location":"FR_ANNOTATION_GUIDELINES/#specific-cases_2","title":"Specific cases","text":"<ul> <li>Inventor in lines 31-33: Some patents do not report the name of the inventor in the usual line (72) but instead indicate it in lines 31-33 under the entry \"Priorit\u00e9 revendiqu\u00e9e\". See example 2.</li> </ul> <p>Examples</p> <ol> <li> <p>Standard Case with several inventors, from patent FR2227040A1</p> <p>Invention de:  LaVaun S. Merrill Jr.\u00a0<code>INV</code>,  Dennis Eugene Drayer\u00a0<code>INV</code>,  William Barney Gogarty\u00a0<code>INV</code> et  George Arthur Pouska\u00a0<code>INV</code>.</p> </li> <li> <p>Inventor in lines 31-33, from patent FR2306539A1</p> <p>Priorit\u00e9 revendiqu\u00e9e: Demande de brevet d\u00e9pos\u00e9e aux Etats-Unis d'Am\u00e9rique le 31 mars 1975 au nom de  Anthony Sabatino\u00a0<code>INV</code>.</p> </li> </ol>"},{"location":"FR_ANNOTATION_GUIDELINES/#loc_1","title":"<code>LOC</code>","text":""},{"location":"FR_ANNOTATION_GUIDELINES/#general-case_3","title":"General case","text":"<p>Refers to an indication about the location. Again, when assignees are located outside France, the geographic indication usually boils down to the name of the country.</p>"},{"location":"FR_ANNOTATION_GUIDELINES/#specific-cases_3","title":"Specific cases","text":"<ul> <li> <p>Address: Sometimes, the patent document might give the full address of the assignee. This only happens for assignees located in France. For the sake of consistency, we only keep the name of the city (and associated zipcode when it is provided). See example 2.</p> </li> <li> <p>State of the Headquarters: Typically in the case of an American firm as the assignee, a patent might report the US state in which this firm is headquartered. Again, because the instances are rare and for the sake of consistency, we tag only the country of residence. See example 3.</p> </li> </ul> <p>Examples</p> <ol> <li> <p>Standard Case with a foreign (different from France) country, from patent FR2227040A1</p> <p>D\u00e9posant: MARATHON OIL COMPANY, r\u00e9sidant  aux   Etats-Unis d'Am\u00e9rique\u00a0<code>LOC</code></p> </li> <li> <p>Address, from patent FR2132583A1</p> <p>D\u00e9posant: GUILLON Marcel, 6, avenue Paderi, Regina Cottage,  06-Nice\u00a0<code>LOC</code></p> </li> <li> <p>State of the Headquarters, from patent FR2259617A1</p> <p>D\u00e9posant: Organisme dit: UNIVERSITE DE PENNSYLVANIE. Constitu\u00e9e selon les lois de l'Etat de Pennsylvanie, r\u00e9sidant aux Etats-Unis d'Am\u00e9rique\u00a0<code>LOC</code>.</p> </li> </ol>"},{"location":"FR_ANNOTATION_GUIDELINES/#relationships","title":"Relationships","text":"<p>See the common annotation guidelines.</p>"},{"location":"FR_ANNOTATION_GUIDELINES/#examples","title":"Examples","text":""},{"location":"FR_ANNOTATION_GUIDELINES/#example-1-format-1-without-geographic-indications","title":"Example 1: Format 1 without geographic indications","text":""},{"location":"FR_ANNOTATION_GUIDELINES/#example-2-format-1-with-a-geographic-indication-country-only","title":"Example 2: Format 1 with a geographic indication (country only)","text":""},{"location":"FR_ANNOTATION_GUIDELINES/#example-3-format-1-with-an-inventor","title":"Example 3: Format 1 with an inventor","text":""},{"location":"FR_ANNOTATION_GUIDELINES/#example-4-format-2-without-an-inventor-and-with-a-foreign-non-french-assignee","title":"Example 4: Format 2 without an inventor and with a foreign (non French) assignee","text":""},{"location":"FR_ANNOTATION_GUIDELINES/#example-5-format-2-with-an-inventor-and-a-county-french-assignee","title":"Example 5: Format 2 with an inventor and a county (French assignee)","text":""},{"location":"FR_MODEL_CARD/","title":"OVERVIEW","text":""},{"location":"FR_MODEL_CARD/#i-model-overview","title":"\u2139\ufe0f Model Overview","text":"Name <code>fr_ent_frpatent01</code> &amp; <code>fr_ent_frpatent02</code> Language French (fr) Pipeline ner Authors Bergeaud and Verluise Date (last) 02/2021 License MIT"},{"location":"FR_MODEL_CARD/#training","title":"\ud83d\udc77 Training","text":"<pre><code>FORMAT=frpatent01  # frpatent02\nspacy train configs/fr_t2vner.cfg --paths.train data/train_ent_${FORMAT}.spacy --paths.dev data/train_ent_${FORMAT}.spacy --output models/de_ent_${FORMAT}\n</code></pre>"},{"location":"FR_MODEL_CARD/#model-performance","title":"\ud83d\udd2e Model performance","text":""},{"location":"FR_MODEL_CARD/#fr_ent_frpatent01model-best","title":"<code>fr_ent_frpatent01/model-best</code>","text":"ALL ASG CLAS INV LOC p 0.97 0.99 0.93 0.99 0.99 r 0.97 0.99 0.93 1 0.99 f 0.97 0.99 0.93 0.99 0.99"},{"location":"FR_MODEL_CARD/#fr_ent_frpatent02model-best","title":"<code>fr_ent_frpatent02/model-best</code>","text":"ALL ASG INV LOC p 0.98 0.98 0.99 0.99 r 0.98 0.98 0.98 0.99 f 0.98 0.98 0.98 0.99"},{"location":"FR_MODEL_CARD/#intended-use","title":"\ud83c\udfaf Intended use","text":"<p><code>en_ent_frpatent0*</code> have been specifically trained on FR patents (resp FR317502A-FR1569050A and FR1605567A-FR2427761A). The model's performances are not guaranteed out of this scope.</p>"},{"location":"FR_MODEL_CARD/#versions-and-alternative-approaches","title":"\ud83d\udd02 Versions and alternative approaches","text":"Version Comment 0.1 ent - v2 spaCy 1.0 ent - v3 spaCy"},{"location":"GB/","title":"GB","text":""},{"location":"GB/#background","title":"Background","text":"<p>Although evidence of an earlier version of patents can be found in 1449, the British patent system starts in 1623 (Plasseraud and Savignon, 1983). There were no official publications prior to 1852. To our knowledge, most patent publications earlier than 1894 have not been digitized, and some are still missing from 1894 to 1900.</p>"},{"location":"GB/#data-source","title":"\ud83d\udcda Data source","text":"Patent office Time span (publication year) Kind code(s) GB 1893-1980 A Publication number (range) Data source Pre-processing E.g. Format # GB189317126A-GB2000001A (excluded) Espacenet OCR GB309428A 1 GB2000001A-GB2023380A Espacenet OCR GB2016002A 2 <p>Done</p> <p>In total, we consider 1,780,385 documents from 1894 to 1980.</p>"},{"location":"GB/#extraction-schema","title":"\ud83d\ude9c Extraction schema","text":"<p>See the annotation guidelines.</p>"},{"location":"GB/#models","title":"\ud83d\udd2e Models","text":"<p>See the models card.</p>"},{"location":"GB/#other","title":"Other","text":"<p>See the geocoding and citizenship documentation.</p>"},{"location":"GB_ANNOTATION_GUIDELINES/","title":"ANNOTATION GUIDELINES","text":"<p>Warning</p> <p>GitHub markdown does not fully support visual annotation components (e.g. entity boxes) used below. We invite user interested in the annotation guidelines to download the documents and open it in a development environment supporting extended markdown syntax (e.g. MacDown, PyCharm, etc) and/or save it as a pdf.</p>"},{"location":"GB_ANNOTATION_GUIDELINES/#preliminary-comments","title":"Preliminary comments","text":"<p>The patent corpus that we consider for GB has two types of formats and spans the period 1893-1980. The formatting of UK patent documents have evolved in time but only modestly. Typically, until patent number GB2000001, the first paragraph of the text contains most of the relevant information, which is completed by the header, whose content changes slightly over time. See Figures 1, 2 and 3 for different examples.</p> <p>From GB2000001 onward, the information is located in the front-page of the patent in a structured way (see Figure 4 for an example). This only concerns 23,889 patent documents as we stop the analysis in 1980.</p> More on GB patents numbering<ul> <li>Prior to 1916, patent number is given by a number preceded by the year of application</li> <li>From 1916, patents are numbered from 100001 to 1605470 and then from 2000001 onward.</li> <li>The last application we consider is 2023380</li> </ul>"},{"location":"GB_ANNOTATION_GUIDELINES/#format-1-from-1894-to-1979","title":"Format 1, from 1894 to 1979","text":"<p>In the first format, from 1894 to 1979, all the information is given in the first paragraph, which starts by \"I, \" or \"We, \" and usually ends with \"do hereby declare the nature of this invention to be as follows\" or \"for which we pray that a patent may be granted to us...\"</p> <p>We extract 5 different \"entities\" from the body of GB patents.</p> Entity Content E.g. <code>PERS</code> Person full name Maxim Hanson Hersey <code>PERS</code>, Lighting Engineer <code>ORG</code> \u00a0Firm full name \u00a0We, The Convex Incandescent Mantle Company Limited <code>ORG</code>, Manufacturers <code>CIT</code> The origin of the firm or citizenship of the person \u00a0a subject of the king of Great Britain and Ireland <code>CIT</code>, <code>LOC</code> Location of the person/firm Maxim Hanson Hersey, Lighting Engineer, of 145, Bethune Road, Amhurst Park, London N. <code>LOC</code>. <code>OCC</code> Occupation of the person Maxim Hanson Hersey, Lighting Engineer <code>OCC</code>. <p>These entities are tied together with 3 types of relations.</p> Relation Content E.g. <code>CITIZENSHIP</code> Links an <code>ORG</code>/<code>PERS</code> to its <code>CIT</code> Maxim Hanson Hersey <code>PERS</code>--&gt;<code>CITIZENSHIP</code>--&gt;subject of the king of Great Britain and Ireland <code>CIT</code> <code>LOCATION</code> Links an <code>ORG</code>/<code>PERS</code> to its <code>LOC</code> Maxim Hanson Hersey <code>PERS</code>--&gt;<code>LOCATION</code>--&gt;145, Bethune Road, Amhurst Park, London N. <code>LOC</code> <code>OCCUPATION</code> Links an <code>PERS</code> to its <code>OCC</code> Maxim Hanson Hersey <code>PERS</code>--&gt;<code>OCCUPATION</code>--&gt;Lighting Engineer <code>OCC</code> Specific labelling issues<ul> <li>In some cases the text of the patent is repeated twice in the same document, once for the provisional specification and once for the complete specification (see e.g. GB132951A). In such case, all relevant entities must be labelled, even if this means labelling the same entities twice. -In some cases, the name of the inventor, the name of the assignee and even its address can appear at the end of the patent. Those entities must not be labelled (e.g. GB509140A).</li> </ul> Other meta-data in GB patents<p>The header contains some specific information including:</p> <ul> <li>the publication date</li> <li>the acceptance date</li> <li>the application number</li> <li>the publication number</li> <li>the title</li> <li>the technological class</li> <li>the name of the inventor(s) - in some instance</li> </ul>"},{"location":"GB_ANNOTATION_GUIDELINES/#format-2","title":"Format 2","text":"<p>In the second format, restricted to the year 1979, the information is structured in the front page of the patent. For these patents, the identity of the inventor and the assignee are clearly stated, but only the location of the assignee is given.</p>"},{"location":"GB_ANNOTATION_GUIDELINES/#entities","title":"Entities","text":""},{"location":"GB_ANNOTATION_GUIDELINES/#format-1","title":"Format 1","text":""},{"location":"GB_ANNOTATION_GUIDELINES/#pers","title":"<code>PERS</code>","text":""},{"location":"GB_ANNOTATION_GUIDELINES/#general-case","title":"General case","text":"<p>The tag <code>PERS</code> refers to the full name of a patentee person which can or cannot be directly presented as the inventor. This name usually follows \"I, \" or \"We, \" and is given in capital letters.</p>"},{"location":"GB_ANNOTATION_GUIDELINES/#specific-cases","title":"Specific cases","text":"<ul> <li>Inventor name in the header: The name of the inventor can also be specified in the header, preceded by the mention \"Inventor(s):\" and usually in capital letters. In this case, we label the inventor(s) as <code>PERS</code>. See example 2.</li> <li>Third party: In the rare case where the inventor uses a third party to file the application (deceased, mandated), we don't tag the third party person. See example 3 where we do not tag \"HAROLD WADE\" as a <code>PERS</code> because the context tells us that he is not the inventor.</li> </ul> <p>Examples</p> <ol> <li> <p>standard case, from patent GB150481</p> <p>We, ANTHONY FULFORD READ <code>PERS</code> , 18, Fown Terrace, Brighton, Manufacturers' Agent, and HAROLD NORMAL READ <code>PERS</code> , 18 Down Terrace, Brighton, Manufacturer's Agent.</p> </li> <li> <p>inventor name in the header, from patent GB1222048</p> <p>Inventors WALTER BUNGARD <code>PERS</code> and HANS ZEHNPFENNIG <code>PERS</code> </p> <p>Improvements in or relating to bearings and bearing liners </p> <p>We, T.H. GOLDSCHMIDT A.G., a body corporate organised under the Laws of Germany,</p> </li> <li> <p>third party, from patent GB191413361</p> <p>(A communication from CHARLES LOUIS MICHOD <code>PERS</code>, Manufacturer, of Chicago Heights, Illinois, United States of. America.) </p> <p>I, HAROLD WADE, Chartered Patent Agent, of 111 and 112, Hatton Garden, London, E.C., do hereby declare...</p> </li> <li> <p>dead, from patent GB1046893</p> <p>We, LEVI CLEWS <code>PERS</code> of 140, Finch Road, Birmingham 19, a British Subject, and FRANCES MABEL GROVES, a British subject, of 41 Ettington Road, Aston, Birmingham 6, legal representative of the late Alfred Groves <code>PERS</code> deceased, a British subject of 140 Finch Road, Birmingham 19, do hereby declare...</p> </li> <li> <p>assignees of, from patent GB664753**</p> <p>We, EASTMAN KODAK COMPANY, a Corporation organised under the laws of the State of New Jersey, United States of Aiuevica, of 343, State Street, Rochester, New York, United States of America (Assignees of Fred Waller <code>PERS</code>, a citizen of the United States of America, of 1925, New York Avenue, Huntington Station, New York, United States of America)</p> </li> </ol>"},{"location":"GB_ANNOTATION_GUIDELINES/#org","title":"<code>ORG</code>","text":""},{"location":"GB_ANNOTATION_GUIDELINES/#general-case_1","title":"General case","text":"<p>The tag <code>ORG</code> refers to the full name of the organisation which owns the patent. This name usually follows \"We, \" and is given in capital letters.</p>"},{"location":"GB_ANNOTATION_GUIDELINES/#specific-cases_1","title":"Specific cases","text":"<ul> <li>Third party: Similarly to the tag <code>PERS</code>, we do not tag a third party as an <code>ORG</code> if the context tells us that this is not a patentee.</li> <li>Former name: Do not label the former name of the company when it is given. See example 3.</li> </ul> <p>Examples</p> <ol> <li> <p>standard case, from patent GB848511</p> <p>We, LONZA ELECTRIC AND CHEMICAL WORKS LIMITED <code>ORG</code>, a Swiss Body Corporate of Aeschenvorstadt 72, Basel, do hereby declare the invention for which we pray...</p> </li> <li> <p>standard case, from patent GB757350</p> <p>We, W.S. BARRETT &amp; SON LIMITED <code>ORG</code> a British Company of 106-108, West Street, Boston, Lincolnshire, do hereby declare...</p> </li> <li> <p>former name, from patent GB786015</p> <p>We, THE SCHOLL MFG Co LIMITED <code>ORG</code>, formerly The Scholl Manufacturing Company Limited, a British Company, of 190 St John Street, London, E.C l, England, do hereby declare...</p> </li> </ol>"},{"location":"GB_ANNOTATION_GUIDELINES/#cit","title":"<code>CIT</code>","text":""},{"location":"GB_ANNOTATION_GUIDELINES/#general-case_2","title":"General case","text":"<p>The tag <code>CIT</code> refers to the citizenship of a <code>PERS</code> or by the origin of a <code>ORG</code>. In the first case, it is usually given in the form \"A British citizen\" or \"A subject of the King of Britain\". In the second case, it is usually given in the form \"A company of Sweden\". The full sequence must be tagged, that is, including \"a citizen\", \"a subject\" or \"a company\".</p>"},{"location":"GB_ANNOTATION_GUIDELINES/#specific-cases_2","title":"Specific cases","text":"<ul> <li>ORG from US: When a company is registered in the US, the sequence can be long and include the state of origin. See example 3.</li> </ul> <p>Examples</p> <ol> <li> <p>origin of ORG, from patent GB784551</p> <p>We, PROGRESS MERCANTILE COMPANY LIMITED, a British Company <code>CIT</code>, formerly of 19 Malden Crescent London, N.W.1 ...</p> </li> <li> <p>origin of PERS, from patent GB500752</p> <p>I, HAROLD FREDERICK MAGNUS, of 79 to 82, Fore Street, London E.C.2, British Subject <code>CIT</code>, do hereby declare...</p> </li> <li> <p>ORG from the US, from patent GB388752</p> <p>We, ASSOCIATED TELEPHONE &amp; TELEGRAPH COMPANY, of 1033, West Van Buren Street, Chicago, Illinois, United States of America, a corporation organised under the laws of the State of Delaware, United States of America <code>CIT</code>, do hereby declare...</p> </li> </ol>"},{"location":"GB_ANNOTATION_GUIDELINES/#occ","title":"<code>OCC</code>","text":""},{"location":"GB_ANNOTATION_GUIDELINES/#general-case_3","title":"General case","text":"<p>The tag <code>OCC</code>refers to the occupation of a <code>PERS</code> or in some rare case of the type of a firm.</p> <p>Examples</p> <ol> <li> <p>OCC of PERS from patent GB163765</p> <p>I, HENRY ART KING, Mechanical Draftsman <code>OCC</code>, residing at No. 2012, Linden Avenue et the City of Baltimore, and State of Maryland...</p> </li> <li> <p>OCC of PERS and ORG from patent GB145878</p> <p>We, M. HOWLETT AND COMPANY LIMITED, of 140 Hockley Hill, Birmingham, Manufacturers <code>OCC</code>, and JAMES DOLPHIN of 23, Carless Avenue, Harborne, Birmingham, Works Manager <code>OCC</code>, do hereby declare...</p> </li> </ol>"},{"location":"GB_ANNOTATION_GUIDELINES/#loc","title":"<code>LOC</code>","text":""},{"location":"GB_ANNOTATION_GUIDELINES/#general-case_4","title":"General case","text":"<p>The tag <code>LOC</code> refers to the full location sequence either of a tag <code>PERS</code> or a tag <code>ORG</code>. The address can be given as a full sequence with street number, street name, city, county and country. It can also be simply given by the name of the city/town/village and county (see example 2), or by a postcode (see example 3). In some cases, the location refers to a specific building (see example 4) or university (example 5) and in some other cases, the name of a nearby city is specified (see example 6).</p>"},{"location":"GB_ANNOTATION_GUIDELINES/#specific-cases_3","title":"Specific cases","text":"<ul> <li>Non-patentee location: the tag <code>LOC</code> should only be used to label the address of the inventor or the assignee based on the context (i.e. an entity <code>PERS</code> or <code>ORG</code>).</li> </ul> <p>Examples</p> <ol> <li> <p>full address, from patent GB1910000882</p> <p>Improvements in or relating to Tobacco Pipes, Cigar and Cigarette Holders.</p> <p>I, FRANK WOOD, of 4, Rawes Street, Burnley, in the County of lancaster <code>LOC</code>, Commission Agent, do hereby ...</p> </li> <li> <p>city+, from patent GB850480</p> <p>We, DEPARTMENT of MINES, a Department of the Provincial Government of Quebec, Quebec City, Province of Quebec, Canada<code>LOC</code>,, do hereby...</p> </li> <li> <p>post-code from patent GB1254482</p> <p>Improved Cylinder Lock Mechanism.</p> <p>We OY WARTSILA AB, a Finnish Company of Box 10230, Helsinki 10, Finland <code>LOC</code>, do hereby...</p> </li> <li> <p>building+, from patent GB937358</p> <p>We, MARCONI'S WIRELESS TELEGRAPH COMPANY LIIMITED of English Electric House, Strand, London, W.C.2 <code>LOC</code> , a British Company, do hereby declare...</p> </li> <li> <p>university, from patent GB332692</p> <p>I, ARTHUR SIMEON WATT, a citizen of the United States of America, of Ohio University, in the City of columbus, State of Ohio, United States of America<code>LOC</code> , do hereby declare...</p> </li> <li> <p>former address, from patent GB1018822</p> <p>I, HUSSAIN ALI MOONTASIR, a citizen of the British Commonwealth, of 29, Beechwood Avenue, Kew, Surrey <code>LOC</code>, (formerly of 409, Mistery Chambers opposite Strand Cinema, Colaba, Bombay 5, India), do hereby declare...</p> </li> <li> <p>nearby city, from patent GB1114180**</p> <p>I, DENNIS ROBERT CHASE, a British Subject, of 29 St John's Road, Locksheath, Near Southampton, Hampshire <code>LOC</code>.</p> </li> </ol>"},{"location":"GB_ANNOTATION_GUIDELINES/#relationships","title":"Relationships","text":"<p>See the common annotation guidelines.</p>"},{"location":"GB_ANNOTATION_GUIDELINES/#examples","title":"Examples","text":""},{"location":"GB_ANNOTATION_GUIDELINES/#figure-1-gb309428a","title":"Figure 1: GB309428A","text":""},{"location":"GB_ANNOTATION_GUIDELINES/#figure-2-gb979428a","title":"Figure 2: GB979428A","text":""},{"location":"GB_ANNOTATION_GUIDELINES/#figure-3-gb1309428a","title":"Figure 3: GB1309428A","text":""},{"location":"GB_ANNOTATION_GUIDELINES/#figure-3-gb2016002a","title":"Figure 3: GB2016002A","text":""},{"location":"GB_MODEL_CARD/","title":"MODELS","text":""},{"location":"GB_MODEL_CARD/#i-model-overview","title":"\u2139\ufe0f Model Overview","text":"Name <code>en_ent_gbpatent01</code> Language English (en) Pipeline ner Authors Bergeaud and Verluise Date (last) 02/2021 License MIT"},{"location":"GB_MODEL_CARD/#training","title":"\ud83d\udc77 Training","text":"<pre><code>FORMAT=gbpatent01\nspacy train configs/en_t2vner.cfg --paths.train data/train_ent_${FORMAT}.spacy --paths.dev data/train_ent_${FORMAT}.spacy --output models/en_ent_${FORMAT}\n</code></pre>"},{"location":"GB_MODEL_CARD/#model-performance","title":"\ud83d\udd2e Model Performance","text":""},{"location":"GB_MODEL_CARD/#en_ent_gbpatent01model-best","title":"<code>en_ent_gbpatent01/model-best</code>","text":"ALL ASG CIT INV LOC OCC p 0.93 0.93 0.96 0.95 0.92 0.9 r 0.94 0.92 0.96 0.96 0.92 0.86 f 0.94 0.93 0.96 0.96 0.92 0.88"},{"location":"GB_MODEL_CARD/#intended-use","title":"\ud83c\udfaf Intended use","text":"<p><code>en_ent_gbpatent01</code> has been specifically trained on GB patents GB189317126A to GB2000001A (excluded). The model's performances are not guaranteed out of this scope.</p>"},{"location":"GB_MODEL_CARD/#versions-and-alternative-approaches","title":"\ud83d\udd02 Versions and alternative approaches","text":"Version Comment 0.1 ent - v2 spaCy 1.0 ent - v3 spaCy"},{"location":"LICENSE_CODE/","title":"Code","text":"<p>Copyright 2021 Cyril VERLUISE and Antonin BERGEAUD</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"LICENSE_DATA/","title":"Creative Commons Attribution 4.0 International","text":"<p>Creative Commons Corporation (\u201cCreative Commons\u201d) is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an \u201cas-is\u201d basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible.</p>"},{"location":"LICENSE_DATA/#using-creative-commons-public-licenses","title":"Using Creative Commons Public Licenses","text":"<p>Creative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses.</p> <ul> <li> <p>Considerations for licensors: Our public licenses are intended for use by those authorized to give the public permission to use material in ways otherwise restricted by copyright and certain other rights. Our licenses are irrevocable. Licensors should read and understand the terms and conditions of the license they choose before applying it. Licensors should also secure all rights necessary before applying our licenses so that the public can reuse the material as expected. Licensors should clearly mark any material not subject to the license. This includes other CC-licensed material, or material used under an exception or limitation to copyright. More considerations for licensors.</p> </li> <li> <p>Considerations for the public: By using one of our public licenses, a licensor grants the public permission to use the licensed material under specified terms and conditions. If the licensor\u2019s permission is not necessary for any reason\u2013for example, because of any applicable exception or limitation to copyright\u2013then that use is not regulated by the license. Our licenses grant only permissions under copyright and certain other rights that a licensor has authority to grant. Use of the licensed material may still be restricted for other reasons, including because others have copyright or other rights in the material. A licensor may make special requests, such as asking that all changes be marked or described. Although not required by our licenses, you are encouraged to respect those requests where reasonable. More considerations for the public.</p> </li> </ul>"},{"location":"LICENSE_DATA/#creative-commons-attribution-40-international-public-license","title":"Creative Commons Attribution 4.0 International Public License","text":"<p>By exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution 4.0 International Public License (\"Public License\"). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.</p>"},{"location":"LICENSE_DATA/#section-1-definitions","title":"Section 1 \u2013 Definitions.","text":"<p>a. Adapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image.</p> <p>b. Adapter's License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License.</p> <p>c. Copyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights.</p> <p>d. Effective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements.</p> <p>e. Exceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material.</p> <p>f. Licensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License.</p> <p>g. Licensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license.</p> <p>h. Licensor means the individual(s) or entity(ies) granting rights under this Public License.</p> <p>i. Share means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them.</p> <p>j. Sui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world.</p> <p>k. You means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.</p>"},{"location":"LICENSE_DATA/#section-2-scope","title":"Section 2 \u2013 Scope.","text":"<p>a. License grant.</p> <ol> <li> <p>Subject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to:</p> <p>A. reproduce and Share the Licensed Material, in whole or in part; and</p> <p>B. produce, reproduce, and Share Adapted Material.</p> </li> <li> <p>Exceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions.</p> </li> <li> <p>Term. The term of this Public License is specified in Section 6(a).</p> </li> <li> <p>Media and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)(4) never produces Adapted Material.</p> </li> <li> <p>Downstream recipients.</p> <p>A. Offer from the Licensor \u2013 Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License.</p> <p>B. No downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material.</p> </li> <li> <p>No endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i).</p> </li> </ol> <p>b. Other rights.</p> <ol> <li> <p>Moral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise.</p> </li> <li> <p>Patent and trademark rights are not licensed under this Public License.</p> </li> <li> <p>To the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties.</p> </li> </ol>"},{"location":"LICENSE_DATA/#section-3-license-conditions","title":"Section 3 \u2013 License Conditions.","text":"<p>Your exercise of the Licensed Rights is expressly made subject to the following conditions.</p> <p>a. Attribution.</p> <ol> <li> <p>If You Share the Licensed Material (including in modified form), You must:</p> <p>A. retain the following if it is supplied by the Licensor with the Licensed Material:</p> <pre><code> i. identification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated);\n\nii. a copyright notice;\n\niii. a notice that refers to this Public License;\n\niv. a notice that refers to the disclaimer of warranties;\n\nv. a URI or hyperlink to the Licensed Material to the extent reasonably practicable;\n</code></pre> <p>B. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and</p> <p>C. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License.</p> </li> <li> <p>You may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information.</p> </li> <li> <p>If requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable.</p> </li> <li> <p>If You Share Adapted Material You produce, the Adapter's License You apply must not prevent recipients of the Adapted Material from complying with this Public License.</p> </li> </ol>"},{"location":"LICENSE_DATA/#section-4-sui-generis-database-rights","title":"Section 4 \u2013 Sui Generis Database Rights.","text":"<p>Where the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:</p> <p>a. for the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database;</p> <p>b. if You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material; and</p> <p>c. You must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database.</p> <p>For the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.</p>"},{"location":"LICENSE_DATA/#section-5-disclaimer-of-warranties-and-limitation-of-liability","title":"Section 5 \u2013 Disclaimer of Warranties and Limitation of Liability.","text":"<p>a. Unless otherwise separately undertaken by the Licensor, to the extent possible, the Licensor offers the Licensed Material as-is and as-available, and makes no representations or warranties of any kind concerning the Licensed Material, whether express, implied, statutory, or other. This includes, without limitation, warranties of title, merchantability, fitness for a particular purpose, non-infringement, absence of latent or other defects, accuracy, or the presence or absence of errors, whether or not known or discoverable. Where disclaimers of warranties are not allowed in full or in part, this disclaimer may not apply to You.</p> <p>b. To the extent possible, in no event will the Licensor be liable to You on any legal theory (including, without limitation, negligence) or otherwise for any direct, special, indirect, incidental, consequential, punitive, exemplary, or other losses, costs, expenses, or damages arising out of this Public License or use of the Licensed Material, even if the Licensor has been advised of the possibility of such losses, costs, expenses, or damages. Where a limitation of liability is not allowed in full or in part, this limitation may not apply to You.</p> <p>c. The disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.</p>"},{"location":"LICENSE_DATA/#section-6-term-and-termination","title":"Section 6 \u2013 Term and Termination.","text":"<p>a. This Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically.</p> <p>b. Where Your right to use the Licensed Material has terminated under Section 6(a), it reinstates:</p> <ol> <li> <p>automatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or</p> </li> <li> <p>upon express reinstatement by the Licensor.</p> </li> </ol> <p>For the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License.</p> <p>c. For the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License.</p> <p>d. Sections 1, 5, 6, 7, and 8 survive termination of this Public License.</p>"},{"location":"LICENSE_DATA/#section-7-other-terms-and-conditions","title":"Section 7 \u2013 Other Terms and Conditions.","text":"<p>a. The Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed.</p> <p>b. Any arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.</p>"},{"location":"LICENSE_DATA/#section-8-interpretation","title":"Section 8 \u2013 Interpretation.","text":"<p>a. For the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License.</p> <p>b. To the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions.</p> <p>c. No term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor.</p> <p>d. Nothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.</p> <p>Creative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the \u201cLicensor.\u201d Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark \u201cCreative Commons\u201d or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses.</p> <p>Creative Commons may be contacted at creativecommons.org</p>"},{"location":"RECIPE_PATENTCITY/","title":"RECIPE PATENTCITY","text":"<p>Note</p> <p>The below snippets provide guidance for the main steps of the PatentCity pipeline.</p>"},{"location":"RECIPE_PATENTCITY/#serialize-data","title":"Serialize data\ufe0f","text":""},{"location":"RECIPE_PATENTCITY/#get-data","title":"Get data","text":"Preped data not available <pre><code># get raw data\ngsutil -m cp \"gs://patentcity_dev/v1/*patent*.txt.tar.gz\" ./\n\n# Unpack data\ncat lib/formats.txt | parallel --eta 'tar -xvzf {}.txt.tar.gz -C ./{}'\n# then, you can go for a week-end\n\n# Prepare data\ncat lib/formats.txt | parallel --eta -j 2 'patentcity brew v1.grind {}/*.txt &gt;&gt; {}.jsonl &amp;&amp; gzip {}.jsonl'\n</code></pre> Preped data available <pre><code>gsutil -m cp \"gs://patentcity_dev/v1/*.jsonl.gz\" ./\n# should dl ddpatent01.jsonl.gz, ddpatent02.jsonl.gz, etc\n</code></pre>"},{"location":"RECIPE_PATENTCITY/#extract-patentees-and-add-topping","title":"Extract patentees (and add topping)","text":"<pre><code># Extract entities (brew data)\ncat lib/formats.txt | parallel --eta -j 3 'MODEL=$(ls -d models/**/model-best | grep {} ) &amp;&amp; patentcity brew v1 {}.jsonl.gz ${MODEL} configs/rel_{}.yaml --batch-size 500 &gt;&gt; entrel_{}.jsonl'\n# Number of job for a 8 CPUs 32Gb ram machine\n\n# Merge all format belonging to the same office in one single file\nfor OFFICE in  dd de fr gb us; do echo ${OFFICE} &amp;&amp; cat entrel_${OFFICE}patent*.jsonl &gt;&gt; entrel_${OFFICE}patentxx.jsonl; done;\n\n# Add topping\nls entrel_*patentxx.jsonl | parallel --eta -j 2 'mv {} {}_tmp &amp;&amp; patentcity brew v1.topping --config-file configs/top_xxpatentxx.yaml {}_tmp &gt;&gt; {} '\n# Note: it can be memory greedy, you might want to limit the nb or jobs and/or the nb of workers\n\n# Check output not corrupted\nls entrel_*patentxx.jsonl | parallel \"wc -l {}*\"\n</code></pre>"},{"location":"RECIPE_PATENTCITY/#get-loc-data","title":"Get LOC data","text":"All <pre><code># Get loc data\nls entrel_*patentxx.jsonl |cut -d_ -f2 |  parallel --eta 'patentcity geo prep entrel_{} | sort -u &gt;&gt; loc_{.}.txt'\n\n# Prep geoc data\nls loc_*patentxx.txt | parallel --eta 'mv {} {}_tmp &amp;&amp; patentcity utils prep-searchtext {}_tmp configs/{.}.yaml &gt;&gt; {}'\n</code></pre> Not geocoded yet <pre><code># Note: This is useful when you geocode the dataset in more than one pass (for example because of limited quotas)\n# Below we assume that part of dataset has already been geocoded using HERE (loc_*patentxx.here.txt files) and we want  to geocode the rest (wrt the full list of loc in loc_*patentxx.txt) using GMAPS (in loc_*patentxx.tbd.txt).\nls loc_*patentxx.txt | parallel --eta 'comm -13 &lt;(sort {.}.here.txt) &lt;(sort {}) &gt;&gt; {.}.tbd.txt'\n</code></pre> Most reccurent loc <pre><code>ls entrel_*patentxx.jsonl |cut -d_ -f2 |  parallel --eta 'patentcity geo prep entrel_{} | sort | uniq -c &gt;&gt; loc_{.}.count.txt'\nls loc_*patentxx.count.txt | cut -d. -f 1,2 | parallel --eta 'mv {}.txt {}.txt_tmp &amp;&amp; patentcity utils prep-searchtext {}.txt_tmp configs/{.}.yaml &gt;&gt; {}.txt'\nfor FILE in $(ls loc_*patentxx.count.txt | cut -d. -f 1 ); do cat ${FILE}.count.txt | sort -nr  |awk '{$1=\"\"; print $0}' | cut -c2- &gt;&gt; ${FILE}.sorted.txt; done;\n# nb sorted in descending order\n\n# Now assume that you want to get 250k addresses to geocode, covering as many occurences as possible and making sure that they have not been geocoded yet\n# Below, we get the 275k most cited addresses (unconditional) and we keep only those which are no yet done (ie in tbd as well)\n# Nb requires a bit of fine tuning to make sure that we have the right nbr of lines:  rm -f tmp &amp;&amp; head -n 275000 loc_${FORMAT}.sorted.txt &gt;&gt; tmp &amp;&amp; comm -13 &lt;(sort loc_${FORMAT}.tbd.txt) &lt;(sort tmp) | wc -l\nFORMAT=\"uspatentxx\"\nrm -f tmp &amp;&amp; head -n 275000 loc_${FORMAT}.sorted.txt &gt;&gt; tmp &amp;&amp; comm -13 &lt;(sort loc_${FORMAT}.tbd.txt) &lt;(sort tmp) | sort -r &gt;&gt;  loc_${FORMAT}.tbd.txt_00\n</code></pre> HERE nomatch <pre><code>ROUND=\"\"  # e.g. 00\nfor OFFICE in dd de fr gb us; do\npatentcity utils get-recid-nomatch geoc_${OFFICE}patentxx.here.csv_${ROUND}.gz loc_${OFFICE}patentxx.tbd.txt_${ROUND} &gt;&gt; loc_${OFFICE}patentxx.here.nomatch.txt_${ROUND};\ndone;\n</code></pre>"},{"location":"RECIPE_PATENTCITY/#geocode-dataset","title":"Geocode dataset","text":"<p>Danger</p> <p>Take care, geocoding is not free, especially using GMAPS. Keep calm and plan your budget, you might want to ask for a grant and/or chunk the data and process it month-by-month as your free-tier gets automatically refilled. You might also want to first start with the batch geocoding API from HERE (which offers a much more generous free plan) and use gmaps only for the no-match. NB: HERE batch geocoding API is supported by patentcity.</p> HERE <pre><code># Make sure that there is the appropriate header, ie recId|searchText\n# if not, you can use sthg in the flavor of\n# ls loc_*patentxx.tbd.txt_00* | parallel --eta 'mv {} {}_tmp &amp;&amp; echo \"recId|searchText\" &gt;&gt; {} &amp;&amp; cat {}_tmp &gt;&gt; {}'\nAPIKEY=\"\"\nFILE=\"\" # e.g. loc_ddpatentxx.tbd.txt_00\nCNTFOCUS=\"\" # e.g. deu\n\necho \"FILE: ${FILE} CNTFOCUS: ${CNTFOCUS}\"\n\npatentcity geo here.post ${FILE} ${APIKEY} ${CNTFOCUS}\n# print REQUESTID to stdout\n\n# monitor status\nREQUESTID=\"\"\npatentcity geo here.status $REQUESTID $APIKEY\n\n# get data and rename\nOUTPUTDIR=\"tmp\"\nmkdir -p ${OUTPUTDIR}\npatentcity geo here.get ${REQUESTID} ${APIKEY} --output-dir ${OUTPUTDIR} &amp;&amp; RESULT=$(ls ${OUTPUTDIR}/${REQUESTID}) &amp;&amp; mv ${OUTPUTDIR}/${REQUESTID}/$RESULT ./\"$(echo ${FILE} | sed -e 's/tbd/here/g; s/txt/csv/g; s/loc/geoc/g')\" &amp;&amp; echo \"Saved as $(echo ${FILE} | sed -e 's/tbd/here/g; s/txt/csv/g; s/loc/geoc/g')!\"\n</code></pre> GMAPS <pre><code># Geocode using GMAPS\n# 1-by-1\nAPIKEY=\"\"\nOFFICE=\"\"  # see above\nREGION=\"\"  # see above (nb uk for gb)\nROUND=\"\"  # e.g. 00\necho \"OFFICE:${OFFICE} REGION:${REGION} ROUND:${ROUND}\"\necho \"loc_${OFFICE}patentxx.here.nomatch.txt_${ROUND} has $(wc -l loc_${OFFICE}patentxx.here.nomatch.txt_${ROUND}) line(s)\"\n# better safe than sorry\npatentcity geo gmaps.get loc_${OFFICE}patentxx.here.nomatch.txt_${ROUND} ${APIKEY} ${REGION} &gt;&gt; geoc_${OFFICE}patentxx.gmaps.txt_${ROUND}\n</code></pre> Manual annotations <pre><code># Generate manual annotations using Prodigy\nXX\n\n# Generate manual annotations for country codes\nFORMAT = \"\"  # e.g. ddpatentxx\npatentcity utils disamb-countrycodes loc_${FORMAT}.txt &gt;&gt; lib/loc_${FORMAT}.disamb.txt\n\n# Add manual geoc\nFORMAT=\"\"  # e.g. frpatentxx, ddpatentxx\nDISAMBFILE=\"\"  # e.g. lib/loc_${FORMAT}.disamb.txt\nGEOCINDEX=\"\"  # e.g. lib/geoc_${FORMAT}.disamb.index.txt lib/geoc_iso.disamb.index.txt\nFLAVOR=\"\"  # HERE or GMAPS\npatentcity geo add.disamb ${DISAMBFILE} ${GEOCINDEX} --flavor ${FLAVOR}&gt;&gt; geoc_${FORMAT}.manual.txt\n# DISAMBFILE is a list of disambiguated loc together with their *original* hash (sep by the standard inDelim)\n# GEOCINDEX is the list of geoc of disambigated loc (e.g. \"r\u00e9publique f\u00e9d\u00e9rale d'allemagne\")\n# FLAVOR is HERE or GMAPS depending on the flavor of GEOCINDEX\n# The output is a GMAPS like file (md5|{})\n</code></pre>"},{"location":"RECIPE_PATENTCITY/#prep-geocoded-data","title":"Prep geocoded data","text":"<pre><code># Harmonize GMAPS and MANUAL as HERE geocoded data\nparallel --eta 'test -f geoc_{1}patentxx.gmaps.txt_{2}.gz &amp;&amp; patentcity geo gmaps.harmonize  geoc_{1}patentxx.gmaps.txt_{2}.gz --out-format csv &gt;&gt; geoc_{1}patentxx.gmaps.csv_{2} &amp;&amp; gzip geoc_{1}patentxx.gmaps.csv_{2}' ::: dd de fr gb us ::: 00 01 02\nMANUALDISAMB=\"fr\"\nfor OFFICE in ${MANUALDISAMB}; do\npatentcity geo gmaps.harmonize geoc_${OFFICE}patentxx.manual.txt.gz --out-format csv &gt;&gt; geoc_${OFFICE}patentxx.manual.csv &amp;&amp;\ngzip geoc_${OFFICE}patentxx.manual.csv;\ndone;\n\n# Stack geocoded data\n# we assume that there have been several rounds of geocoding (e.g. due to limited credits) and each round result is suffixed by 0x (e.g. geoc_ddpatentxx.gmaps.csv_00.gz\nparallel --eta 'zcat $(ls geoc_{1}patentxx.{2}.csv_*.gz | head -n 1) | head -n 1 &gt;&gt; geoc_{1}patentxx.{2}.csv_xx' ::: dd de fr gb us ::: gmaps here\nparallel --eta 'zcat geoc_{1}patentxx.{2}.csv_*.gz | grep -v \"recId\" | sort -u &gt;&gt; geoc_{1}patentxx.{2}.csv_xx' ::: dd de fr gb us ::: gmaps here\ngzip geoc_*patentxx.*.csv_xx  # overwrite existing file if any\n\n# Add statistical areas\nparallel -j2 --eta 'patentcity geo add.statisticalareas geoc_{1}patentxx.{2}.csv_xx.gz \"assets/statisticalareas_*.csv\" &gt;&gt; geoc_{1}patentxx.{2}.csv_xx' ::: dd de fr gb us ::: gmaps here\nparallel -j2 --eta 'patentcity geo add.statisticalareas geoc_{1}patentxx.manual.csv.gz \"assets/statisticalareas_*.csv\" &gt;&gt; geoc_{1}patentxx.manual.csv' ::: dd fr\ngzip geoc_*patentxx.*.csv_xx  # overwrite existing file if any\ngzip geoc_*patentxx.manual.csv  # overwrite existing file if any\n</code></pre>"},{"location":"RECIPE_PATENTCITY/#add-geocoded-data","title":"Add geocoded data","text":"<p>level up</p> <p>Incorporating data is hard on memory. Upgrade to a 32Gb memory machine for this stage.</p> <pre><code># Incorporate geocoded data\n# HERE and GMAPS\nfor OFFICE in dd de fr gb us; do\necho ${OFFICE}\npatentcity geo add entrel_${OFFICE}patentxx.jsonl.gz geoc_${OFFICE}patentxx.here.csv_xx.gz --source HERE &gt;&gt; entrelgeoc_${OFFICE}patentxx.jsonl_tmp &amp;&amp;\npatentcity geo add entrelgeoc_${OFFICE}patentxx.jsonl_tmp geoc_${OFFICE}patentxx.gmaps.csv_xx.gz --source GMAPS &gt;&gt; entrelgeoc_${OFFICE}patentxx.jsonl &amp;&amp;\nrm entrelgeoc_${OFFICE}patentxx.jsonl_tmp;\ndone;\n\nMANUALDISAMB=\"dd fr\"  # we add dd which is already in HERE like format\nfor OFFICE in ${MANUALDISAMB}; do\nmv entrelgeoc_${OFFICE}patentxx.jsonl entrelgeoc_${OFFICE}patentxx.jsonl_tmp &amp;&amp;\npatentcity geo add entrelgeoc_${OFFICE}patentxx.jsonl_tmp geoc_${OFFICE}patentxx.manual.csv.gz --source MANUAL &gt;&gt; entrelgeoc_${OFFICE}patentxx.jsonl &amp;&amp;\nrm entrelgeoc_${OFFICE}patentxx.jsonl_tmp;\ndone;\n\n# Add origin\nfor file in $(ls entrelgeoc_*patentxx.jsonl); do\nmv ${file} ${file}_tmp &amp;&amp;\njq -c --arg origin PC '. + {origin: $origin}' ${file}_tmp &gt;&gt; ${file} &amp;&amp;\nrm ${file}_tmp;\ndone;\n\n# Prep var name\nls entrelgeoc_*patentxx.jsonl | parallel --eta \"\"\"mv {} {}_tmp &amp;&amp; sed 's/\\\"seqNumber\\\":/\\\"loc_seqNumber\\\":/g; s/\\\"seqLength\\\":/\\\"loc_seqLength\\\":/g; s/\\\"latitude\\\":/\\\"loc_latitude\\\":/g; s/\\\"longitude\\\":/\\\"loc_longitude\\\":/g; s/\\\"locationLabel\\\":/\\\"loc_locationLabel\\\":/g; s/\\\"addressLines\\\":/\\\"loc_addressLines\\\":/g; s/\\\"street\\\":/\\\"loc_street\\\":/g; s/\\\"houseNumber\\\":/\\\"loc_houseNumber\\\":/g; s/\\\"building\\\":/\\\"loc_building\\\":/g; s/\\\"subdistrict\\\":/\\\"loc_subdistrict\\\":/g; s/\\\"district\\\":/\\\"loc_district\\\":/g; s/\\\"city\\\":/\\\"loc_city\\\":/g; s/\\\"postalCode\\\":/\\\"loc_postalCode\\\":/g; s/\\\"county\\\":/\\\"loc_county\\\":/g; s/\\\"state\\\":/\\\"loc_state\\\":/g; s/\\\"country\\\":/\\\"loc_country\\\":/g; s/\\\"relevance\\\":/\\\"loc_relevance\\\":/g; s/\\\"matchType\\\":/\\\"loc_matchType\\\":/g; s/\\\"matchCode\\\":/\\\"loc_matchCode\\\":/g; s/\\\"matchLevel\\\":/\\\"loc_matchLevel\\\":/g; s/\\\"matchQualityStreet\\\":/\\\"loc_matchQualityStreet\\\":/g; s/\\\"matchQualityHouseNumber\\\":/\\\"loc_matchQualityHouseNumber\\\":/g; s/\\\"matchQualityBuilding\\\":/\\\"loc_matchQualityBuilding\\\":/g; s/\\\"matchQualityDistrict\\\":/\\\"loc_matchQualityDistrict\\\":/g; s/\\\"matchQualityCity\\\":/\\\"loc_matchQualityCity\\\":/g; s/\\\"matchQualityPostalCode\\\":/\\\"loc_matchQualityPostalCode\\\":/g; s/\\\"matchQualityCounty\\\":/\\\"loc_matchQualityCounty\\\":/g; s/\\\"matchQualityState\\\":/\\\"loc_matchQualityState\\\":/g; s/\\\"matchQualityCountry\\\":/\\\"loc_matchQualityCountry\\\":/g; s/\\\"statisticalArea1\\\":/\\\"loc_statisticalArea1\\\":/g; s/\\\"statisticalArea1Code\\\":/\\\"loc_statisticalArea1Code\\\":/g; s/\\\"statisticalArea2\\\":/\\\"loc_statisticalArea2\\\":/g; s/\\\"statisticalArea2Code\\\":/\\\"loc_statisticalArea2Code\\\":/g; s/\\\"statisticalArea3\\\":/\\\"loc_statisticalArea3\\\":/g; s/\\\"statisticalArea3Code\\\":/\\\"loc_statisticalArea3Code\\\":/g; s/\\\"key\\\":/\\\"loc_key\\\":/g ' {}_tmp &gt;&gt; {} \"\"\"\nrm entrelgeoc_*patentxx.jsonl_tmp\n\n# Sync data\ngsutil -m rsync ./ gs://patentcity_dev/v1/\n</code></pre>"},{"location":"RECIPE_PATENTCITY/#build-data","title":"Build data","text":"patentcity + wgp <pre><code>KEYFILE=\"\" # \"credentials-patentcity.json\"\nURIPC=\"\"  # \"gs://patentcity_dev/v1/entrelgeoc_*patentxx.jsonl\"\nURIWGP=\"\"  # \"gs://gder_dev/v100rc5/patentcity*.jsonl.gz\"\nSTAGETABLE=\"\" #e.g \"patentcity:tmp.v100rc5\"\nRELEASETABLE=\"\"  # \"patentcity:patentcity.v100rc5\"\n\nbq load --source_format NEWLINE_DELIMITED_JSON --replace --ignore_unknown_values --max_bad_records 10000 ${STAGETABLE} ${URIPC} schema/patentcity_v1.sm.json\nbq load --source_format NEWLINE_DELIMITED_JSON --noreplace --ignore_unknown_values --max_bad_records 1000 ${STAGETABLE} ${URIWGP} schema/patentcity_v1.sm.json\n\n# Augment data\npatentcity io augment-patentcity $(echo ${STAGETABLE} | sed -e 's/:/./') $(echo ${STAGETABLE} | sed -e 's/:/./') --credentials ${KEYFILE}\n\n# Impute missing dates\n#for OFFICE in dd de; do\n#  patentcity utils expand-pubdate-imputation lib/pubdate_${OFFICE}patentxx.imputation.csv --output pubdate_${OFFICE}patentxx.imputation.expanded.csv;\n#done;\n# gsutil -m cp \"pubdate_*patentxx.imputation.expanded.csv\" gs://patentcity_dev/v1/\nfor OFFICE in dd de; do\nbq load --source_format CSV --replace --ignore_unknown_values --max_bad_records 1000 patentcity:tmp.de_pubdate_imputation \"gs://patentcity_dev/v1/pubdate_${OFFICE}patentxx.imputation.expanded.csv\" schema/date_imputation.json\n  patentcity io impute-publication-date $(echo ${STAGETABLE} | sed -e 's/:/./') patentcity.tmp.${OFFICE}_pubdate_imputation --country-code ${OFFICE:u} --credentials ${KEYFILE};\ndone;\n\n# Deduplicate data (pc, wgp25 and wgp45 have a small overlap)\npatentcity io deduplicate $(echo ${STAGETABLE} | sed -e 's/:/./')  $(echo ${STAGETABLE} | sed -e 's/:/./') $KEYFILE\n\n# Expand (we use the family of publications in the dataset to expand to publications in the same family but not yet in the dataset)\npatentcity io family-expansion $(echo ${STAGETABLE} | sed -e 's/:/./') $(echo ${STAGETABLE}_expansion | sed -e 's/:/./') $KEYFILE schema/patentcity_v1.json\ngsutil -m rm \"gs://tmp/family_expansion_*.jsonl.gz\"\nbq extract --destination_format NEWLINE_DELIMITED_JSON --compression GZIP ${STAGETABLE}_expansion \"gs://tmp/family_expansion_*.jsonl.gz\"\nbq load --source_format NEWLINE_DELIMITED_JSON --noreplace --ignore_unknown_values --max_bad_records 1000 $STAGETABLE \"gs://tmp/family_expansion_*.jsonl.gz\"\n\n# Filter kind codes (we have kind codes that do not correspond to utility patents - we filter them out)\npatentcity io filter-kind-codes $(echo ${STAGETABLE} | sed -e 's/:/./') $(echo ${RELEASETABLE} | sed -e 's/:/./') $KEYFILE\n\n# Filter granted first publication\npatentcity io filter-granted-firstpub $(echo ${RELEASETABLE} | sed -e 's/:/./') $(echo ${RELEASETABLE} | sed -e 's/:/./') $KEYFILE\n</code></pre> patentcity only <pre><code>#STAGETABLE=\"patentcity:tmp.tmp\"\nURI=\"\" # e.g \"gs://patentcity_dev/v1/entrelgeoc_*patentxx.jsonl\"\nRELEASETABLE=\"\" # e.g. \"patentcity:patentcity.pc_v100rc5\"\nKEYFILE=\"\" # e.g. \"credentials-patentcity.json\"\n# Load data\nbq load --source_format NEWLINE_DELIMITED_JSON --replace --ignore_unknown_values --max_bad_records 10000 ${RELEASETABLE} ${URI} schema/patentcity_v1.sm.json\n</code></pre>"},{"location":"RECIPE_WGP/","title":"RECIPE WGP","text":"<p>Note</p> <p>The below snippets provide guidance for the main steps of the WGP pipeline.</p>"},{"location":"RECIPE_WGP/#join-individuals-and-geocoded-addresses","title":"Join individuals and geocoded addresses","text":"<p>Warning</p> <p>For some reasons, the flavor 25 join yields inconsistent results. We don't know why. As a turn around, we use the addresses collected by de Rassenfosse et al (2019) but we do not use their geocoding files. We geocode the addresses ourselves.</p> wgp45 <pre><code># Load individual - location_id crossover\nbq load --replace --source_format CSV --autodetect patentcity:external.person_location_id gs://gder_dev/person_location_id.csv.gz\n\n# Build Geoc index (patent city flavor)\npatentcity utils get-gmaps-index-wgp --flavor 45 addresses_florian45.csv &gt;&gt; addresses_florian45.jsonl\npatentcity geo gmaps.harmonize addresses_florian45.jsonl --out-format csv &gt;&gt; addresses_florian45_patentcity.csv\nmv addresses_florian45_patentcity.csv addresses_florian45_patentcity.tmp.csv &amp;&amp; csvstack -n source -g GMAPS addresses_florian45_patentcity.tmp.csv &gt;&gt; addresses_florian45_patentcity.csv\nmv addresses_florian45_patentcity.csv addresses_florian45_patentcity.tmp.csv &amp;&amp; csvstack -n origin -g WGP45 addresses_florian45_patentcity.tmp.csv &gt;&gt; addresses_florian45_patentcity.csv\n\n# Add statistical areas\nmv addresses_florian45_patentcity.csv addresses_florian45_patentcity.tmp.csv &amp;&amp; patentcity geo add.statisticalareas addresses_florian45_patentcity.tmp.csv \"assets/statisticalareas_*.csv\" &gt;&gt; addresses_florian45_patentcity.csv\n\n# Load addresses\ngzip addresses_florian45_patentcity.csv\ngsutil -m cp \"addresses*patentcity.csv.gz\" gs://gder_dev/\nbq load --replace --autodetect --source_format CSV  --max_bad_records 100 patentcity:external.addresses_florian45_patentcity gs://gder_dev/addresses_florian45_patentcity.csv.gz\n\n# Join\nKEY_FILE=\"credentials-patentcity.json\"\npatentcity io build-wgp-as-patentcity  patentcity.external.addresses_florian45_patentcity  patentcity.external.person_location_id --tls206-table patentcity.external.tls206 --tls207-table patentcity.external.tls207 --patstat-patent-properties-table patentcity.external.patstat_patent_properties --destination-table patentcity.tmp.patentcity45 --flavor 45 --credentials $KEY_FILE\n</code></pre> wgp25 (fixed) <pre><code># Load individual - recid crossover\n# TODO add `recId` to inventor_applicant_location_id.csv &gt;&gt; inventor_applicant_recid.csv\nbq load --replace --source_format CSV --autodetect patentcity:external.inventor_applicant_recid gs://gder_dev/inventor_applicant_recid.csv.gz\n\n# Build Geoc index (patent city flavor)\n## extract data\nfor OFFICE in DE FR GB US; do\npython patentcity/io.py get-wgp25-recid $OFFICE patentcity.external.inventor_applicant_recid patentcity.tmp.loc_${(L)OFFICE}patentwgp25 credentials-patentcity.json;\nbq extract --destination_format CSV -F \"|\" patentcity:tmp.loc_${(L)OFFICE}patentwgp25 gs://gder_dev/loc_${(L)OFFICE}patentwgp25.txt;\ndone;\n\n# Geocode\n## follow the same procedure as for PatentCity see RECIPE_PATENTCITY.md\n## harmonize HERE and GMAPS outputs\nls geoc_*patentwgp25.gmaps.txt | cut -d. -f1,2 |parallel --eta 'patentcity geo gmaps.harmonize {}.txt --out-format csv &gt;&gt; {}.csv'\n## remove extra recId field (returned by HERE)\nls geoc_*patentwgp25.here.csv.gz | parallel --eta 'mv {} {.}.tmp.gz &amp;&amp; csvcut -C 4 {.}.tmp.gz &gt;&gt; {.} &amp;&amp; gzip {.}'\n\n# add source and origin\nls geoc_*patentwgp25.here.csv.gz | parallel --eta 'mv {} {.}.tmp.gz &amp;&amp; csvstack -n source -g HERE {.}.tmp.gz &gt;&gt; {.} &amp;&amp; gzip {.}'\nls geoc_*patentwgp25.gmaps.csv.gz | parallel --eta 'mv {} {.}.tmp.gz &amp;&amp; csvstack -n source -g GMAPS {.}.tmp.gz &gt;&gt; {.} &amp;&amp; gzip {.}'\n\n# pack everything together in addresses_cyril25_patentcity.csv\nzcat geoc_depatentwgp25.gmaps.csv.gz | head -n 1 &gt;&gt; addresses_cyril25_patentcity.csv  # this is just the header\nzcat geoc_*patentwgp25.*.csv*.gz |  grep -v \"recId\" | sort -u &gt;&gt; addresses_cyril25_patentcity.csv\ngzip addresses_cyril25_patentcity.csv\n\n# add origin\nmv addresses_cyril25_patentcity.csv.gz addresses_cyril25_patentcity.csv.tmp.gz &amp;&amp; csvstack -n origin -g WGP25 addresses_cyril25_patentcity.csv.tmp.gz &gt;&gt; addresses_cyril25_patentcity.csv\n\n# Add statistical areas\nmv addresses_cyril25_patentcity.csv addresses_cyril25_patentcity.tmp.csv &amp;&amp; patentcity geo add.statisticalareas addresses_cyril25_patentcity.tmp.csv \"assets/statisticalareas_*.csv\" &gt;&gt; addresses_cyril25_patentcity.csv\ngzip addresses_cyril25_patentcity.csv\n\n# Load addresses\ngsutil -m cp \"addresses*patentcity.csv.gz\" gs://gder_dev/\nbq load --replace --autodetect --source_format CSV  --max_bad_records 100 patentcity:external.addresses_cyril25_patentcity gs://gder_dev/addresses_cyril25_patentcity.csv.gz\n\n# Join\nKEY_FILE=\"credentials-patentcity.json\"\npatentcity io build-wgp-as-patentcity  patentcity.external.addresses_cyril25_patentcity  patentcity.external.inventor_applicant_recid --patstat-patent-properties-table patentcity.external.patstat_patent_properties --destination-table patentcity.tmp.patentcity25 --flavor 25 --credentials $KEY_FILE\n</code></pre> wgp25 (broken) <pre><code># Load individual - location_id crossover\nbq load --replace --source_format CSV --autodetect patentcity:external.inventor_applicant_location_id gs://gder_dev/inventor_applicant_location_id.csv.gz\n\n# Build Geoc index (patent city flavor)\npatentcity utils get-gmaps-index-wgp --flavor 25 addresses_florian25.csv &gt;&gt; addresses_florian25.jsonl\npatentcity geo gmaps.harmonize addresses_florian25.jsonl --out-format csv &gt;&gt; addresses_florian25_patentcity.csv\nmv addresses_florian25_patentcity.csv addresses_florian25_patentcity.tmp.csv &amp;&amp; csvstack -n source -g GMAPS addresses_florian25_patentcity.tmp.csv &gt;&gt; addresses_florian25_patentcity.csv\nmv addresses_florian25_patentcity.csv addresses_florian25_patentcity.tmp.csv &amp;&amp; csvstack -n origin -g WGP25 addresses_florian25_patentcity.tmp.csv &gt;&gt; addresses_florian25_patentcity.csv\n\n# Load addresses\ngsutil -m cp \"addresses*patentcity.csv.gz\" gs://gder_dev/\nbq load --replace --autodetect --source_format CSV  --max_bad_records 100 patentcity:external.addresses_florian25_patentcity gs://gder_dev/addresses_florian25_patentcity.csv.gz\n\n# Join\nKEY_FILE=\"credentials-patentcity.json\"\npatentcity io build-wgp-as-patentcity  patentcity.external.addresses_florian25_patentcity  patentcity.external.inventor_applicant_location_id --patstat-patent-properties-table patentcity.external.patstat_patent_properties --destination-table patentcity.tmp.patentcity25 --flavor 25 --credentials $KEY_FILE\n</code></pre>"},{"location":"RECIPE_WGP/#build-data","title":"Build data","text":"<pre><code># Format data as patentcity v1\n## sort data (required since chunked at extraction)\npatentcity io order patentcity.tmp.patentcity25 --by publication_number --destination-table patentcity.tmp.tmp25 --credentials credentials-patentcity.json\npatentcity io order patentcity.tmp.patentcity45 --by publication_number --destination-table patentcity.tmp.tmp45 --credentials credentials-patentcity.json\n## extract data\ngsutil -m rm \"gs://tmp/flat_patentcity*.jsonl.gz\"\nbq extract --destination_format NEWLINE_DELIMITED_JSON --compression GZIP patentcity:tmp.tmp25 \"gs://tmp/flat_patentcity25_*.jsonl.gz\"\nbq extract --destination_format NEWLINE_DELIMITED_JSON --compression GZIP patentcity:tmp.tmp45 \"gs://tmp/flat_patentcity45_*.jsonl.gz\"\n## remove staged tables\nbq rm patentcity:tmp.tmp25\nbq rm patentcity:tmp.tmp45\n## download data\ngsutil -m cp \"gs://tmp/flat_patentcity*.jsonl.gz\" ./\n## nest\nls flat_patentcity25_*.jsonl.gz | cut -d_ -f 2,3 | parallel -j+0 --eta \"\"\"gunzip flat_{} &amp;&amp; jq -s -c 'group_by(.publication_number)[] | {publication_number: .[0].publication_number, publication_date: .[0].publication_date, country_code: .[0].country_code, pubnum: .[0].pubnum, kind_code: .[0].kind_code, appln_id: .[0].appln_id, family_id: .[0].docdb_family_id, origin: .[0].origin, patentee: [ .[] | {is_inv: .is_inv, is_asg: .is_app, loc_text: .address_, loc_recId: .recId, loc_locationLabel: .locationLabel, loc_country: .country, loc_state: .state, loc_county: .county, loc_city: .city, loc_district: .district, loc_postalCode: .postalCode, loc_street: .street, loc_building: .building, loc_houseNumber: .houseNumber, loc_longitude: .longitude, loc_latitude: .latitude, loc_matchType: .matchType, loc_matchLevel: .matchLevel, loc_seqNumber: .seqNumber, loc_source: .source, loc_key: .key, loc_statisticalArea1: .statisticalArea1, loc_statisticalArea1Code: .statisticalArea1Code, loc_statisticalArea2: .statisticalArea2, loc_statisticalArea2Code: .statisticalArea2Code, loc_statisticalArea3: .statisticalArea3, loc_statisticalArea3Code: .statisticalArea3Code} ] }' flat_{.} &gt;&gt; {.} &amp;&amp; gzip {.} &amp;&amp; gzip flat_{.}\"\"\"\nls flat_patentcity45_*.jsonl.gz | cut -d_ -f 2,3 | parallel -j+0 --eta \"\"\"gunzip flat_{} &amp;&amp; jq -s -c 'group_by(.publication_number)[] | {publication_number: .[0].publication_number, publication_date: .[0].publication_date, country_code: .[0].country_code, pubnum: .[0].pubnum, kind_code: .[0].kind_code, appln_id: .[0].appln_id, family_id: .[0].docdb_family_id, origin: .[0].origin, patentee: [.[] | {name_text: .person_name, person_id: .person_id, is_inv: .is_inv, is_asg: .is_asg, loc_text: .address_, loc_recId: .recId, loc_locationLabel: .locationLabel, loc_country: .country, loc_state: .state, loc_county: .county, loc_city: .city, loc_district: .district, loc_postalCode: .postalCode, loc_street: .street, loc_building: .building, loc_houseNumber: .houseNumber, loc_longitude: .longitude, loc_latitude: .latitude, loc_matchType: .matchType, loc_matchLevel: .matchLevel, loc_seqNumber: .seqNumber, loc_source: .source, loc_key: .key, loc_statisticalArea1: .statisticalArea1, loc_statisticalArea1Code: .statisticalArea1Code, loc_statisticalArea2: .statisticalArea2, loc_statisticalArea2Code: .statisticalArea2Code, loc_statisticalArea3: .statisticalArea3, loc_statisticalArea3Code: .statisticalArea3Code}]}' flat_{.} &gt;&gt; {.} &amp;&amp; gzip {.} &amp;&amp; gzip flat_{.}\"\"\"\n\n## upload data\ngsutil -m mv  \"./patentcity*.jsonl.gz\" gs://gder_dev/v1/\n\n# Load to BQ\nURI=\"\" # e.g. \"gs://gder_dev/v100rc4/patentcity*.jsonl.gz\"\nRELEASETABLE=\"\"  #e.g. \"patentcity:patentcity.wgp_v100rc4\"\nbq load --source_format=NEWLINE_DELIMITED_JSON --max_bad_records=1000 --ignore_unknown_values --replace ${RELEASETABLE} ${URI} schema/patentcity_v1.sm.json\n</code></pre>"},{"location":"RECORD_DATA/","title":"DATA","text":"<p>\u2139\ufe0f File names refer to data files in <code>gs://patentcity_dev/v1</code></p> Name Content data <code>*patentff.txt.tar.gz</code> tar file containing format <code>ff</code> office <code>*</code> patents (<code>.txt</code> blobs) List[text] <code>*patentff.jsonl.gz</code> jsonl file with format <code>ff</code> office <code>*</code> patents, to be used with <code>brew v1</code> {\"publication_number\": \"\", \"text\": \"\", \"hash_id\": \"\"} <code>entrel_*patentff.jsonl.gz</code> jsonl files of extracted entities and relations from office <code>*</code> patents {\"publication_number\":\"\", \"patentee\": [{}, {}]} <code>entrelgeoc_*patentxx.jsonl.gz</code> same but with geocoded data in addition \" \" <code>loc_*patentxx.txt_tmp.gz</code> loc data (extracted from <code>entrel_*patentff.jsonl.gz</code>) recId | loc_text <code>loc_*patentxx.txt.gz</code> same but wth prepared loc text recId | loc_text <code>loc_*patentxx.tbd.txt.gz</code> loc data (preped) which has not been processed yet (ie tbd) recId | loc_text <code>loc_*patentxx.tbd.txt_rr.gz</code> loc data (preped) to be processed at round <code>rr</code> recId | loc_text <code>loc_*patentxx.count.txt_tmp.gz</code> loc data with their number of occurences #occ recId | loc_text <code>loc_*patentxx.count.txt.gz</code> same but loc data preped #occ recId | loc_text <code>loc_*patentxx.sorted.txt.gz</code> loc data (preped) unique and sorted by descending order of occurences recId | loc_text <code>loc_*patentxx.gmaps[here].txt_tmp.gz</code> loc data sent to gmaps[here] recId | loc_text <code>loc_*patentxx.gmaps[here].txt.gz</code> loc data (preped)sent to gmaps[here] recId | loc_text <code>geoc_*patentxx.gmaps.txt.gz</code> geocoded data using GMAPS <code>recId {gmaps output json}</code> <code>geoc_*patentxx.gmaps[here].csv.gz</code> geocoded data using GMAPS [here]&amp; harmonized with HERE data structure <code>,,,</code>"},{"location":"US/","title":"US OVERVIEW","text":""},{"location":"US/#background","title":"Background","text":"<p>XX</p>"},{"location":"US/#data-source","title":"\ud83d\udcda Data source","text":"<p>From the earliest patent that we consider US1A to patent XX (excluded), we collected image data (png) from Espacenet and OCRed the first page using Tesseract v5.</p> Patent office Time span (publication year) Kind code(s) US 1836-1980 A; B1,B2* <p>Notes: : Before 2001; *: After 2001</p> Publication number (range) Data source Pre-processing E.g. Format # US1A-US1583766A Espacenet OCR US75A 1 US1583767A-US1920166A Espacenet OCR US1602651A 2 US1920167A-US3554066A Espacenet OCR US2427801A 3 US3554067A-... Espacenet OCR US3564067A 4"},{"location":"US/#extraction-schema","title":"\ud83d\ude9c Extraction schema","text":"<p>See the annotation guidelines.</p>"},{"location":"US/#models","title":"\ud83d\udd2e Models","text":"<p>See the models card.</p>"},{"location":"US/#other","title":"Other","text":"<p>See the geocoding and citizenship and deduplication documentation.</p>"},{"location":"US_ANNOTATION_GUIDELINES/","title":"ANNOTATION GUIDELINES","text":"<p>Warning</p> <p>GitHub markdown does not fully support visual annotation components (e.g. entity boxes) used below. We invite user interested in the annotation guidelines to download the documents and open it in a development environment supporting extended markdown syntax (e.g. MacDown, PyCharm, etc) and/or save it as a pdf.</p>"},{"location":"US_ANNOTATION_GUIDELINES/#preliminary-comments","title":"Preliminary comments","text":"<p>The patent corpus that we consider for US has 4 types of formats and spans the period 1836-1980.</p> <p>The formatting is different from one format to the next one. In publication prior to US1248454A, the relevant information is contained in the first paragraph and in the header (format 1), it is subsequently only contained in the header. See Figures 1,2, 3 and 4 for an example of each format type. From publication US3930271A onward, we use information provided by the USPTO in the Patentsview database.</p>"},{"location":"US_ANNOTATION_GUIDELINES/#format-1-from-1836-to-1926","title":"Format 1, from 1836 to 1926","text":"<p>This first format starts with patent US1A and ends with patent US1583766A published in 1926, it is characterized by the presence of the item \"be it known\" at the top of the text.</p> <p>We extract 4 different \"entities\".</p> Entity Content E.g. INV Inventor full name Be it known that I, JAMES M. GARDINER\u00a0<code>INV</code>, ... ASG Assignee full name ASSIGNOR OF ONE-HALF TO SMITH FULMER\u00a0<code>ASG</code> LOC Location of the inventor/assignee residing at Mikkalo, in the county of Gilliam and State of Oregon\u00a0<code>LOC</code> CIT Citizenship of inventor JOHN SCHLATTER, a citizen of United States <code>CIT</code> <p>Entities are tied together with 2 types of relations.</p> Relation Content E.g. <code>LOCATION</code> Links an <code>INV/ASG</code> to its <code>LOC</code> SEDWARD WILLIAM YOUNG <code>INV</code>--&gt;<code>LOCATION</code>--&gt;Tytherley, Wimborne, Dorset, England <code>LOC</code> <code>CITIZENSHIP</code> Links an <code>INV/ASG</code> to its <code>CIT</code> WILLIAM H. BAKER <code>INV</code>--&gt;<code>CITIZENSHIP</code>--&gt;citizen of the United States<code>CIT</code>"},{"location":"US_ANNOTATION_GUIDELINES/#format-2-from-1926-to-1933","title":"Format 2, from 1926 to 1933","text":"<p>This second format starts with patent US1583767A and ends with patent US1920166A. All the information is contained in a header just below the title.</p> <p>We extract 4 different \"entities\".</p> Entity Content E.g. INV Inventor full name PHILIP B. ROHNER\u00a0<code>INV</code> OF CARROLL, IOWA ASG Assignee full name ASSIGNOR TO NICHOLAS POWER COMPANY, INC. <code>ASG</code>, OF NEW YORK, N. Y., SMITH FULMER\u00a0<code>ASG</code> LOC Location of the assignee/inventor WARBEN NOBLE AND LEON W. PITTMAN, OF  DETROIT, MICHIGAN\u00a0<code>LOC</code> CIT Citizenship of assignee STOW MANUFACTURING COMPANY, OF BINGHAMTON, NEW YORK, A CORPORATION OF NEW YORK <code>CIT</code> <p>Entities are tied together with 2 types of relations.</p> Relation Content E.g. <code>LOCATION</code> Links an <code>INV/ASG</code> to its <code>LOC</code> ISIDOR EDWARD BRENNER\u00a0<code>INV</code>--&gt;<code>LOCATION</code>--&gt;CHICAGO, ILLINOIS\u00a0<code>LOC</code> <code>CITIZENSHIP</code> Links an <code>ASG</code> to its <code>CIT</code> EASTERN EXPANDED METAL COMPANY\u00a0\u00a0<code>ASG</code>--&gt;<code>CITIZENSHIP</code>--&gt;CORPORATION . OF MASSACHUSETTS\u00a0<code>CIT</code>"},{"location":"US_ANNOTATION_GUIDELINES/#format-3-from-1933-to-1971","title":"Format 3, from 1933 to 1971","text":"<p>This third format starts with patent US1920167A and ends with patent US3554066A. The information is still in the header under the title but adopts a different formatting. Note that the ending point for format 3 is not very clear as a few publications continue to have a similar format after US3554066A, although most of them have format 4.</p> <p>We extract 4 different \"entities\".</p> Entity Content E.g. INV Inventor full name Vincent S. Farricielli\u00a0<code>INV</code> , New Haven, Conn. ASG Assignee full name assignor, by mesne assignments, to Mohasco Industries, Inc. <code>ASG</code>, Bridgeport, Pa. LOC Location of the assignee/inventor Hugh Graham Webster and Ray W. Thomas, Detroit, Mich\u00a0<code>LOC</code> CIT Citizenship of assignee , assignors to Esso Research and Engineer ing Company, a corporation of Delaware <code>CIT</code> <p>Entities are tied together with 2 types of relations.</p> Relation Content E.g. <code>LOCATION</code> Links an <code>INV/ASG</code> to its <code>LOC</code> George Norwitz<code>INV</code>--&gt;<code>LOCATION</code>--&gt;Philadelphia, Pa.<code>LOC</code> <code>CITIZENSHIP</code> Links an <code>ASG</code> to its <code>CIT</code> The De Laval Separator Company\u00a0<code>ASG</code>--&gt;<code>CITIZENSHIP</code>--&gt;Corporation of New Jersey\u00a0<code>CIT</code>"},{"location":"US_ANNOTATION_GUIDELINES/#format-4-from-1971","title":"Format 4, from 1971","text":"<p>In this fourth format, the information is structured in the front page of the patent. For these patents, the identity of the inventor and the assignee are clearly stated along with their addresses. We consider patent US3554067A to be the first patent of Format 4, but some publications are closer to format 3 even after this number. We consider all cases.</p> <p>We extract 4 different \"entities\".</p> Entity Content E.g. INV Inventor full name Inventor: Vincent S. Farricielli\u00a0<code>INV</code> , New Haven, Conn. ASG Assignee full name Assignee: Hannes Marker <code>ASG</code>, Garmisch-Partenkirchen Germany. LOC Location of the assignee/inventor Theodore A. Rich Scotia, N.Y.\u00a0<code>LOC</code> <p>Entities are tied together with 1 type of relations.</p> Relation Content E.g. <code>LOCATION</code> Links an <code>INV/ASG</code> to its <code>LOC</code> Willi Wolff <code>INV</code>--&gt;<code>LOCATION</code>--&gt;Schildgen, Germany <code>LOC</code>"},{"location":"US_ANNOTATION_GUIDELINES/#named-entity-recognition","title":"Named Entity recognition","text":""},{"location":"US_ANNOTATION_GUIDELINES/#format-1","title":"Format 1","text":""},{"location":"US_ANNOTATION_GUIDELINES/#inv","title":"<code>INV</code>","text":""},{"location":"US_ANNOTATION_GUIDELINES/#general-case","title":"General case","text":"<p>The tag <code>INV</code> refers to the full name of an inventor. This is a person that is not referred to as the assignee and is sometimes specifically referred to as the inventor.</p>"},{"location":"US_ANNOTATION_GUIDELINES/#specific-cases","title":"Specific cases","text":"<ul> <li>Inventor in the header (example 1)</li> <li>Inventor in the text (example 2)</li> </ul> <p>Examples</p> <ol> <li> <p>Inventor in header, from patent US1108402A</p> <p>PAUL SCHMITZ <code>INV</code>, OF COLOGNE-NIEHL, GERMANY</p> </li> <li> <p>Inventor in text, from patent US913422A</p> <p>Be it known that I, CHARLES M. McConrnok <code>INV</code></p> </li> </ol>"},{"location":"US_ANNOTATION_GUIDELINES/#asg","title":"<code>ASG</code>","text":""},{"location":"US_ANNOTATION_GUIDELINES/#general-case_1","title":"General case","text":"<p>The tag <code>ASG</code> refers to the full name of the assignee, usually a person but can also be a firm.</p>"},{"location":"US_ANNOTATION_GUIDELINES/#specific-cases_1","title":"Specific cases","text":"<ul> <li>Assignee as a person (example 1)</li> <li>Assignee as a firm (example 2)</li> </ul> <p>Examples</p> <ol> <li> <p>person, from patent US1030738A</p> <p>ASSIGNOR OF NINE THIRTY-SECONDS TO  JOSEPH ANTOINE HILAIRE HEBERT <code>ASG</code></p> </li> <li> <p>firm, from patent US1488673A</p> <p>ASSIGNOR TO MIEHELE PRINTING PRESS &amp; MANUFACTURING COMPANY <code>ASG</code></p> </li> </ol>"},{"location":"US_ANNOTATION_GUIDELINES/#loc","title":"<code>LOC</code>","text":""},{"location":"US_ANNOTATION_GUIDELINES/#general-case_2","title":"General case","text":"<p>The tag <code>LOC</code> refers to the full location of an inventor or an assignee. The granularity of the location information is the city in the standard case. In some rare instances, the full address is given, in which case only the city/county/state/country must be labeled.</p>"},{"location":"US_ANNOTATION_GUIDELINES/#specific-cases_2","title":"Specific cases","text":"<ul> <li>Location in header: the location is given in the header in the form: CITY/STATE or CITY/COUNTRY (example 1)</li> <li>Location in text: the location is also given in the text following the name of the inventor. The location is usually given as \"in [CITY] in the county of [COUNTY] and state of [STATE]\" (example 2)</li> <li>Detailed address: in some rare cases, more detailed information is given such as the borough or the full postal address. In which case only information more aggregated than city is labeled (example 3)</li> </ul> <p>Examples</p> <ol> <li> <p>location in header, from patent US1030738A</p> <p>WILLIAM. V. B. AMES, OF CHICAGO, ILLINOIS <code>LOC</code></p> </li> <li> <p>location in text, from patent US1530731</p> <p>resident of Osceola in the county of Clarke and State of Iowa <code>LOC</code></p> </li> <li> <p>detailed address, from patent US114318</p> <p>a resident of the borough of Brooklyn, county of Kings, city and State of New York <code>LOC</code></p> </li> </ol>"},{"location":"US_ANNOTATION_GUIDELINES/#cit","title":"<code>CIT</code>","text":""},{"location":"US_ANNOTATION_GUIDELINES/#general-case_3","title":"General case","text":"<p>The tag <code>CIT</code> refers either to the citizenship of the inventor (or assignee when applicable) or to the legal origin of an assignee firm. The initial a (\"a firm\", \"a citizen\") must not be labeled.</p>"},{"location":"US_ANNOTATION_GUIDELINES/#specific-cases_3","title":"Specific cases","text":"<ul> <li>Citizenship of the inventor: the citizenship usually follows  \"a citizen of\" (example 1), or \"a subject of\" (example 2)</li> <li>Assignee as a firm (example 3)</li> </ul> <p>Examples</p> <ol> <li> <p>Citizen of, from patent US1030738A</p> <p>CHARLES B. CLEMENTS, a citizen of the United States <code>CIT</code></p> </li> <li> <p>Subject of, from patent US1244286A</p> <p>Joseph C. Breinl, a subject of the Emperor of Austria <code>CIT</code></p> </li> <li> <p>Firm, from patent US1488673A</p> <p>AMERICAN GRAPHOPHONE COMPANY, OF BRIDGEPORT, CONNECTICUT, A CORPORATION OF WEST VIRGINIA <code>CIT</code></p> </li> </ol>"},{"location":"US_ANNOTATION_GUIDELINES/#format-2","title":"Format 2","text":""},{"location":"US_ANNOTATION_GUIDELINES/#inv_1","title":"<code>INV</code>","text":""},{"location":"US_ANNOTATION_GUIDELINES/#general-case_4","title":"General case","text":"<p>The tag <code>INV</code> refers to the full name of an inventor. This is a person that is not referred to as the assignee and is sometimes specifically referred to as the inventor.</p> <p>Examples</p> <ol> <li> <p>Standard Case, from patent US1634855</p> <p> OSCAR SIVERTZEN <code>INV</code>, OF TRONDHJEM, NORWAY</p> </li> </ol>"},{"location":"US_ANNOTATION_GUIDELINES/#asg_1","title":"<code>ASG</code>","text":""},{"location":"US_ANNOTATION_GUIDELINES/#general-case_5","title":"General case","text":"<p>XX</p>"},{"location":"US_ANNOTATION_GUIDELINES/#specific-cases_4","title":"Specific cases","text":"<ul> <li>Person Assignee: Some patents report that a person (not the inventor) has some rights over the patent. See example 2.</li> </ul> <p>Examples</p> <ol> <li> <p>Standard Case, from patent US198045</p> <p>MARCUS B.BERHMAN, OF BROOKLYN, NEW YORK, ASSIGNOR TO  THE LOX SEAL CORPORATION <code>ASG</code>, OF BROOKLYN, NEW YORK, A CORPORATION OF NEW YORK</p> </li> <li> <p>Person Assignee, from patent US1908223</p> <p>LOFTUS B.CUDDY, OF SEWICKLEY, PENNSYLVANIA, ASSIGNOR OF ONE-HALF TO KINLEY J.TENER<code>ASG</code>, OF PITTSBURGH, PENNSYLVANIA</p> </li> </ol>"},{"location":"US_ANNOTATION_GUIDELINES/#loc_1","title":"<code>LOC</code>","text":""},{"location":"US_ANNOTATION_GUIDELINES/#general-case_6","title":"General case","text":"<p>XX</p>"},{"location":"US_ANNOTATION_GUIDELINES/#specific-cases_5","title":"Specific cases","text":"<ul> <li> <p>Location of  inventor and assignee (example 1)</p> </li> <li> <p>Location of the inventor: in the case where there is no assignee, only the location of the inventor is available (example 2). But in some case, the location of the assignee is not given even if there is an assignee (example 3).</p> </li> </ul> <p>Examples</p> <ol> <li> <p>Location of inventor and assignee, from patent US1861234</p> <p>WILLIAM W.KNIGHT, OF CICERO, ILLINOIS <code>LOC</code>, ASSIGNOR TO ROTH RUBBER COMPANY, OF  CICERO, ILLINOIS <code>LOC</code>, A CORPORATION OF ILLINOIS</p> </li> <li> <p>Location of inventor, from patent US1690033</p> <p>WARREN NOBLE, OF DETROIT, MICHIGAN<code>LOC</code></p> </li> <li> <p>Location of inventor with assignee, from patent US1700112</p> <p>WILLIAM E. BEATTY, OF LAUREL HILL, NEW YORK <code>LOC</code>, ASSIGNOR TO ELEVATOR, SUPPLIES COMPANY, INC., A CORPORATION OF NEW JERSEY.</p> </li> </ol>"},{"location":"US_ANNOTATION_GUIDELINES/#cit_1","title":"<code>CIT</code>","text":""},{"location":"US_ANNOTATION_GUIDELINES/#general-case_7","title":"General case","text":"<p>The tag <code>CIT</code> refers either to the citizenship of the assignee i.e. the legal origin of the firm when applicable. The initial a (\"a firm\", \"a corporation\") must not be labeled.</p> <p>Examples</p> <ol> <li> <p>Standard Case, from patent US1832319</p> <p>ASSIGNMENTS, TO UNION CARBIDE AND CARBON RESEARCH LABORATORIES, INC, OF NEW YORK, N.Y., A CORPORATION OF NEW YORK\u00a0<code>CIT</code></p> </li> </ol>"},{"location":"US_ANNOTATION_GUIDELINES/#format-3","title":"Format 3","text":""},{"location":"US_ANNOTATION_GUIDELINES/#inv_2","title":"<code>INV</code>","text":""},{"location":"US_ANNOTATION_GUIDELINES/#general-case_8","title":"General case","text":"<p>The tag <code>INV</code> refers to the full name of an inventor. This is a person that is not referred to as the assignee and is sometimes specifically referred to as the inventor.</p> <p>Examples</p> <ol> <li> <p>Standard Case, from patent US2924015</p> <p> Richard M.Gurries<code>INV</code>, San Jose, Calif.</p> </li> </ol>"},{"location":"US_ANNOTATION_GUIDELINES/#asg_2","title":"<code>ASG</code>","text":""},{"location":"US_ANNOTATION_GUIDELINES/#general-case_9","title":"General case","text":"<p>The tag <code>ASG</code> refers to the full name of the assignee, usually a person but can also be a firm.</p> <p>Examples</p> <ol> <li> <p>Standard Case, from patent US2831921</p> <p>Samuel P.Morgan, Jr., Morristown, NJ, assignor to  Bell Telephone Laboratories, Incorporated<code>ASG</code>, New York, NY, a corporation of New York</p> </li> </ol>"},{"location":"US_ANNOTATION_GUIDELINES/#loc_2","title":"<code>LOC</code>","text":""},{"location":"US_ANNOTATION_GUIDELINES/#general-case_10","title":"General case","text":"<p>The tag <code>LOC</code> refers to the location of the inventor or assignee and is given by the city and state. The state itself is given as the US Government Printing Office code (GPO).</p> <p>Examples</p> <ol> <li> <p>Standard Case, from patent US2224950</p> <p>Alfred Burke, New York, N.Y<code>LOC</code></p> </li> </ol>"},{"location":"US_ANNOTATION_GUIDELINES/#cit_2","title":"<code>CIT</code>","text":""},{"location":"US_ANNOTATION_GUIDELINES/#general-case_11","title":"General case","text":"<p>The tag <code>CIT</code> refers either to the citizenship of the assignee i.e. the legal origin of the firm when applicable. The initial a (\"a firm\", \"a corporation\") must not be labeled.</p> <p>Examples</p> <ol> <li> <p>Standard Case, from patent US2924016</p> <p>Richard Diener, Berlin-Hermsdorf, Germany, assignor to Berliner Maschinenbau-Actien-Gesellschaft, Berlin, Germany, a corporation of Germany<code>CIT</code></p> </li> </ol>"},{"location":"US_ANNOTATION_GUIDELINES/#format-4","title":"Format 4","text":""},{"location":"US_ANNOTATION_GUIDELINES/#inv_3","title":"<code>INV</code>","text":""},{"location":"US_ANNOTATION_GUIDELINES/#general-case_12","title":"General case","text":"<p>The tag <code>INV</code> refers to the full name of an inventor.</p>"},{"location":"US_ANNOTATION_GUIDELINES/#specific-cases_6","title":"Specific cases","text":"<ul> <li>Format 3: the format 3 corresponds to a format that is very close the format 3 describes above. See example 1.</li> <li>Format 4: the standard case which is structured with a dedicated field named: inventor(s). See example 2.</li> <li>Deceased: in some rare case, the inventor is dead and an administrator is designated. Only the (dead) inventor should be labeled then. See example 3.</li> </ul> <p>Examples</p> <ol> <li> <p>Format 3, from patent US3719374A</p> <p>Francisco M. Serrano<code>INV</code>, Paris, France, assignor to</p> </li> <li> <p>Format 4, from patent US3702536A</p> <p>Inventor: John W. Gregory<code>INV</code>, Middleburg Heights, Ohio</p> </li> <li> <p>Decreased, from patent US3718608A</p> <p>Inventors: Daniel W. Mason<code>INV</code>, Peabody; Henry H. Nester<code>INV</code>, deceased, late of Peabody, Mass. by Dianne L. Nester, administratrix</p> </li> </ol>"},{"location":"US_ANNOTATION_GUIDELINES/#loc_3","title":"<code>LOC</code>","text":""},{"location":"US_ANNOTATION_GUIDELINES/#general-case_13","title":"General case","text":"<p>The tag <code>LOC</code> refers to the location of the inventor or assignee and is given by the city and state.</p>"},{"location":"US_ANNOTATION_GUIDELINES/#specific-cases_7","title":"Specific cases","text":"<ul> <li>Format 3: the format 3 corresponds to a format that is very close the format 3 describes above. See example 1.</li> <li>Format 4: the standard case which is structured. The location appears in the field inventor and/or assignee. See example 2.</li> <li>all of / both of: in some cases with multiple inventors, the location is designated in two times (INV1, [CITY] and INV2, [CITY], both of [STATE]). See example 3.</li> <li>Full address: in some cases, the full postal address is given. In this case, only the city and more aggregated geographical entities should be labeled. See example 4.</li> </ul> <p>Examples</p> <ol> <li> <p>Format 3, from patent US3702735A</p> <p>Andrew E. Potter, Jr., Houston, Tex<code>LOC</code></p> </li> <li> <p>Format 4, from patent US3692296</p> <p>Inventor: William W. Higginbotham, Monroe, Mich.<code>LOC</code></p> </li> <li> <p>all of, from patent US3697893A</p> <p>James L. Faustlin, Plano<code>LOC</code>; Eliseo Saenz, Garland<code>LOC</code>, both of Tex<code>LOC</code></p> </li> <li> <p>full address, from patent US3624981A</p> <p>Arthur Fischer, Altheimer Strasse 219, Tumlingen , Germany<code>LOC</code></p> </li> </ol>"},{"location":"US_ANNOTATION_GUIDELINES/#asg_3","title":"<code>ASG</code>","text":""},{"location":"US_ANNOTATION_GUIDELINES/#general-case_14","title":"General case","text":"<p>The tag <code>ASG</code> refers either to the name of the assignee.</p>"},{"location":"US_ANNOTATION_GUIDELINES/#specific-cases_8","title":"Specific cases","text":"<ul> <li>Format 3: the format 3 corresponds to a format that is very close the format 3 describes above. See example 1.</li> <li>Format 4: the standard case which is structured with a dedicated field named: assignee. See example 2.</li> <li>The United States of America: when the assignee is part of the government, the assignee is referred to as \"the United States of America, as represented by XX\". In such a case, only \"the United States of America\" should be labeled (example 3) do not tag the representant</li> </ul> <p>Examples</p> <ol> <li> <p>Format 3, from patent US3608112A</p> <p>Finn T. Ergens, Milwaukeee, Wis., assignor to Outboard Marine Corporation<code>ASG</code>, Milwaukee, Wis.</p> </li> <li> <p>Format 4, from patent US3621396A</p> <p>Assignee: Bell Telephone Laboratory, Inc.<code>ASG</code></p> </li> <li> <p>USA, from patent US3722202A</p> <p>Assignee: The United States of America<code>ASG</code> as represented by the Secretary of Agriculture</p> </li> </ol>"},{"location":"US_ANNOTATION_GUIDELINES/#relationships","title":"Relationships","text":"<p>See the common annotation guidelines.</p>"},{"location":"US_ANNOTATION_GUIDELINES/#examples","title":"Examples","text":""},{"location":"US_ANNOTATION_GUIDELINES/#figure-1-us1248454","title":"Figure 1: US1248454","text":""},{"location":"US_ANNOTATION_GUIDELINES/#figure-2-us1612578","title":"Figure 2: US1612578","text":""},{"location":"US_ANNOTATION_GUIDELINES/#figure-3-us2954064","title":"Figure 3: US2954064","text":""},{"location":"US_ANNOTATION_GUIDELINES/#figure-4-us-3578005","title":"Figure 4: US-3578005","text":""},{"location":"US_MODEL_CARD/","title":"MODELS","text":""},{"location":"US_MODEL_CARD/#i-model-overview","title":"\u2139\ufe0f Model Overview","text":"Name <code>en_ent_uspatent01</code> Language English (en) Pipeline ner Authors Bergeaud and Verluise Date (last) 02/2021 License MIT"},{"location":"US_MODEL_CARD/#training","title":"\ud83d\udc77 Training","text":"<pre><code>FORMAT=uspatent01  # uspatent02 uspatent03 uspatent04\nspacy train configs/en_t2vner.cfg --paths.train data/train_ent_${FORMAT}.spacy --paths.dev data/train_ent_${FORMAT}.spacy --output models/de_ent_${FORMAT}\n</code></pre>"},{"location":"US_MODEL_CARD/#model-performance","title":"\ud83d\udd2e Model Performance","text":""},{"location":"US_MODEL_CARD/#en_ent_uspatent01model-best","title":"<code>en_ent_uspatent01/model-best</code>","text":"ALL ASG CIT INV LOC p 0.98 0.94 0.98 1 0.98 r 0.99 0.96 0.98 0.99 0.99 f 0.99 0.95 0.98 0.99 0.99"},{"location":"US_MODEL_CARD/#en_ent_uspatent02model-best","title":"<code>en_ent_uspatent02/model-best</code>","text":"ALL ASG CIT INV LOC p 0.98 0.96 0.98 1 0.98 r 0.99 0.96 0.97 1 0.99 f 0.98 0.96 0.98 1 0.99"},{"location":"US_MODEL_CARD/#en_ent_uspatent03model-best","title":"<code>en_ent_uspatent03/model-best</code>","text":"ALL ASG CIT INV LOC p 0.97 0.96 0.97 0.99 0.97 r 0.97 0.96 0.97 0.98 0.98 f 0.97 0.96 0.97 0.98 0.98"},{"location":"US_MODEL_CARD/#en_ent_uspatent04model-best","title":"<code>en_ent_uspatent04/model-best</code>","text":"ALL ASG INV LOC p 0.99 0.99 1 0.99 r 0.99 0.98 1 0.99 f 0.99 0.98 1 0.99"},{"location":"US_MODEL_CARD/#intended-use","title":"\ud83c\udfaf Intended use","text":"<p><code>en_ent_uspatent*</code> have been specifically trained on US patents. The model's performances are not guaranteed out of this scope.</p>"},{"location":"US_MODEL_CARD/#versions-and-alternative-approaches","title":"\ud83d\udd02 Versions and alternative approaches","text":"Version Comment 1.0 ent - v3 spaCy"},{"location":"XX_CIT_EVALUATION/","title":"CITIZENSHIP","text":""},{"location":"XX_CIT_EVALUATION/#problem","title":"Problem","text":"<p>The <code>CIT</code> text extracted from the text is just a span of natural language (e.g. \"a citizen of the United States\"). This cannot be used as such.</p>"},{"location":"XX_CIT_EVALUATION/#approach","title":"Approach","text":"<p>We use a Finite State Transducer. The task of the Finite State Transducer is to map these spans to a well-defined set of codes, here the ISO-3 code of the country of citizenship (e.g. USA). Below we evaluate the FST on US and GB data. Note: since there is no \"learning\" in the FST, overfitting is not really an issue and we do not distinguish between the training and the test set.</p>"},{"location":"XX_CIT_EVALUATION/#results","title":"Results","text":"Data Accuracy with fuzzy-match Accuracy w/o no fuzzy-match <code>gold_cit_gbpatentocr01.csv</code> 98.50% 98.25% <code>gold_cit_uspatentocr01.csv</code> 98.94% 95.21% <code>gold_cit_uspatentocr02.csv</code> 93.40% 84.49% <code>gold_cit_uspatentocr03.csv</code> 92.31% 90.60% <p>In all cases, the fuzzy-match improves the overall FST accuracy.</p> <p>Snippet</p> <pre><code># Eval on gold_cit_uspatentocr03.csv\npython patentcity/eval.py cit-fst data/gold_cit_uspatentocr03.csv --fst-file lib/cit_fst.json --verbose\n</code></pre>"},{"location":"XX_CIT_EVALUATION/#error-analysis","title":"Error analysis","text":""},{"location":"XX_CIT_EVALUATION/#gold_cit_gbpatentocr01csv","title":"<code>gold_cit_gbpatentocr01.csv</code>","text":"publication_number text gold pred res 54 GB-1107922-A Corporation organized. NIU False 66 GB-1124610-A citizens of the Federal -Republic of Germany DDR DEU False 67 GB-1127891-A limited liability Company OMN False 72 GB-1138246-A Corporation organised and existing under the laws of the S USA NIU False 242 GB-1474266-A British subject and New Zealand citizen NZL GBR False 320 GB-204013-A company incorporated under the laws of ureat Britain and Ireland GBR IRL False 422 GB-362896-A Limited Liability Company OMN False 442 GB-391456-A corporation organized and In NIU False 471 GB-429108-A subject of the King of Great GBR False 521 GB-508540-A Corporation organized deep achi under the laws of the State of West USA NIU False 726 GB-859666-A corporation organized and existing under the laws of the   NIU False 774 GB-950313-A corporation organized the operative magnification ratio. NIU False"},{"location":"XX_CIT_EVALUATION/#gold_cit_uspatentocr01csv","title":"<code>gold_cit_uspatentocr01.csv</code>","text":"publication_number text gold pred res 80 US-00832896-A1 CORPORATION OF, NEV USA False 103 US-01047532-A1 CORPORATION OF NEW USA False 173 US-01485740-A1 CORPORATION OF NEW USA False 193 US-01208544-A1 citizen of the United USA NIU False 386 US-00330257-A1 citizen of the Dominion of Can-ada CAN OMN False 431 US-01249770-A1 CORPORATION OF PENNSYL-VANTA USA False"},{"location":"XX_CIT_EVALUATION/#gold_cit_uspatentocr02csv","title":"<code>gold_cit_uspatentocr02.csv</code>","text":"publication_number text gold pred res 10 US-01731832-A1 CORPORATION CF. OTLIO USA LAO False 14 US-01757421-A1 CORPORATION OF CONNECTI- USA False 64 US-01740886-A1 COR-PORATION OF GEORGIA USA GEO False 67 US-01659670-A1 CORPORATION OF ILLI-\" NOIS USA False 112 US-01838948-A1 CORPORATION OF MICHI USA False 125 US-01677149-A1 CORPORATION OF NEW USA False 126 US-01879349-A1 CORPORATION OF NEW 7 USA False 177 US-01777067-A1 CORPORATION OF NEW\" JERSEY USA JEY False 178 US-01911978-A1 CORPORATION OF NEW. JERSEY USA JEY False 179 US-01630895-A1 CORPORATION OF NEW. JERSEY USA JEY False 180 US-01859075-A1 CORPORATION OF NEW. YORE USA False 185 US-01756906-A1 CORPORATION OF NEWYORE USA False 188 US-01717493-A1 CORPORATION OF OFTO USA False 223 US-01598039-A1 CORPORATION OF PENN- USA False 237 US-01666523-A1 CORPORATION OF PENNSYL-VANTA USA False 238 US-01914412-A1 CORPORATION OF PENNSZL-VANTA USA False 239 US-01704180-A1 CORPORATION OF RHODEISLAND USA LAO False 243 US-01608767-A1 CORPORATION OF THAAS USA THA False 249 US-01717172-A1 CORPORATION OF WIs-~CONSIN USA False 284 US-01694877-A1 CORPORATIONYORK USA False"},{"location":"XX_CIT_EVALUATION/#gold_cit_uspatentocr03csv","title":"<code>gold_cit_uspatentocr03.csv</code>","text":"publication_number text gold pred res 7 US-02344331-A1 corporation of Cali- USA MLI False 42 US-02437791-A1 corporation of Hlinois USA False 59 US-02905903-A1 corporation of Mlinois USA MLI False 60 US-03012554-A1 corporation of New USA False 78 US-02226153-A1 corporation of New. Jersey USA JEY False 80 US-02169128-A1 corporation of Penn- USA False 81 US-02853443-A1 corporation of Pennsyivania USA IRN False 85 US-02992650-A1 corporation of Ulinois USA False 98 US-02870832-A1 corporation ofIilinois USA FJI False"},{"location":"XX_DEDUPLICATION_EVALUATION/","title":"DEDUPLICATION","text":""},{"location":"XX_DEDUPLICATION_EVALUATION/#problem","title":"Problem","text":"<p>In some formats (e.g. uspatent01), patentees are reported twice on the same document. This can be detrimental to metrics such as the average number of inventors/assignees per patent, etc. We would like to flag duplicates to avoid results contamination.</p>"},{"location":"XX_DEDUPLICATION_EVALUATION/#approach","title":"Approach","text":"<p>For each patent of affected formats, we look at the pairwise relative levenshtein distance of all detected patentee names. Then we look for the threshold maximizing accuracy (based on a manually labelled gold set).</p> <p>Definition</p> <p>We call relative levenshtein distance the levenshtein distance between 2 strings (lower caps) divided by the average character lengths of the two strings</p>"},{"location":"XX_DEDUPLICATION_EVALUATION/#results","title":"Results","text":""},{"location":"XX_DEDUPLICATION_EVALUATION/#uspatent01","title":"<code>uspatent01</code>","text":"<p>Done</p> <ul> <li>Best threshold: 0.43</li> <li>Accuracy: 0.974</li> </ul>"},{"location":"XX_GEOC_REPORT/","title":"GEOCODING","text":""},{"location":"XX_GEOC_REPORT/#patentcity","title":"Patentcity","text":"Office Nb addresses HERE HERE no match GMAPS GMAPS no match DD 38097 38097 10945 10945 1390 DE 548606 548606 143598 143598 16158 FR 63488 63488 34490 34490 12223 GB 1177925 1177925 231331 231331 10144 US 1149671 1149671 285158 285158 20477 Total 2977787 2977787 705522 705522 60392"},{"location":"XX_GEOC_REPORT/#round-00","title":"Round 00","text":"Office Nb addresses HERE HERE no match GMAPS GMAPS no match DD 31783 31783 9097 9097 1088 DE 395635 395635 99594 99594 13989 FR 53810 53810 29332 29332 8581 GB 247173 247173 48411 48411 3308 US 247420 247420 43587 43587 2269 Total 975821 975821 230021 230021 29235"},{"location":"XX_GEOC_REPORT/#round-01","title":"Round 01","text":"Office Nb addresses HERE HERE no match GMAPS GMAPS no match DD 6315 6315 1848 1848 302 DE 152972 152972 44004 44004 2169 FR 9679 9679 5158 5158 3642 GB 373798 372996 111340 111340 1628 US 372580 372581 103398 103398 7679 Total 915344 914542 265748 265748 15420"},{"location":"XX_GEOC_REPORT/#round-02","title":"Round 02","text":"Office Nb addresses HERE HERE no match GMAPS GMAPS no match DD 0 0 0 0 0 DE 0 0 0 0 0 FR 0 0 0 0 0 GB 324271 324271 71580 71580 5208 US 464633 464633 138173 138173 10529 Total 788904 788904 209753 209753 15737"},{"location":"XX_GEOC_REPORT/#150621","title":"15.06.21","text":"Office HERE GMAPS Comment DD 38097 10944 HERE=expected,GMAPS=expected DE 548606 172420 HERE=expected,GMAPS&gt;expected FR 63488 34489 HERE=expected,GMAPS=expected GB 942732 230727 HERE&lt;expected,GMAPS~expected US 1074909 281366 HERE&lt;expected,GMAPS~expected"},{"location":"XX_GEOC_REPORT/#wgp25","title":"WGP25","text":"Office Nb addresses HERE HERE no match GMAPS GMAPS no match DD - - - - - DE 146987 146987 26594 26594 972 FR 238682 238682 13837 13837 389 GB 404533 404533 79903 79903 2261 US 153828 153828 1638 1638 50 Total 944030 944030 121972 121972 3672"},{"location":"XX_REL_ANNOTATION_GUIDELINES/","title":"ANNOTATION GUIDELINES","text":""},{"location":"XX_REL_ANNOTATION_GUIDELINES/#preliminary-comments","title":"Preliminary comments","text":"<p>Each corpus has its specific set of relationship that are detailed in a separate documents. See DD, DE, FR, GB and US annotation guidelines</p>"},{"location":"XX_REL_ANNOTATION_GUIDELINES/#general-case","title":"General case","text":"<p>The labelling of relationship between entities follow the general rule that the relation should go from the object to its attributes. For example, in the case of a link between an entity <code>LOC</code> and an entity <code>INV</code>, the relationship should go from <code>INV</code> to <code>LOC</code>.</p>"},{"location":"XX_REL_ANNOTATION_GUIDELINES/#specific-cases","title":"Specific cases","text":"<p>From the set of annotated entities, the context should be sufficient to use the general rule without ambiguity. Standard cases are presented in Examples 1 to 3 below. Two specific cases are worth mentioning:</p> <ul> <li>Multiple similar objects for a given subject (e.g. two <code>LOC</code> for a same <code>ASG</code>)</li> <li>Multiple subjects for a given object (e.g. two INV for a same <code>CIT</code>)</li> </ul> <p>These cases can happen for two reasons, either because the context commands it (see examples 4 and 5) or because one of the entities has been split into multiple parts for example because of a bad OCR, or because of the wording (see example 6).</p> <p>In any cases, all the corresponding relationship should be annotated.</p>"},{"location":"XX_REL_ANNOTATION_GUIDELINES/#examples","title":"Examples","text":""},{"location":"XX_REL_ANNOTATION_GUIDELINES/#example-1","title":"Example 1","text":""},{"location":"XX_REL_ANNOTATION_GUIDELINES/#example-2","title":"Example 2","text":""},{"location":"XX_REL_ANNOTATION_GUIDELINES/#example-3","title":"Example 3","text":""},{"location":"XX_REL_ANNOTATION_GUIDELINES/#example-4","title":"Example 4","text":""},{"location":"XX_REL_ANNOTATION_GUIDELINES/#example-5","title":"Example 5","text":""},{"location":"XX_REL_ANNOTATION_GUIDELINES/#example-6","title":"Example 6","text":""},{"location":"XX_REL_CARD/","title":"MODELS","text":""},{"location":"XX_REL_CARD/#train-and-evaluate","title":"Train and Evaluate","text":"<pre><code># generate configs\npatentcity search relationship-params configs/rel_search.yaml\n\n# Grid search for all formats\nfor FORMAT in $(cat lib/formats.txt);\ndo ls configs/rel_*.yaml | grep -v search | grep -v best | parallel --eta \"patentcity eval relationship-model data/gold_rel_${FORMAT}.jsonl {} --report json&gt;&gt; {.}_${FORMAT}.json\" &amp;&amp; echo \"\\n## ${FORMAT}\" &gt;&gt; doc/XX_REL_CARD.md  &amp;&amp; patentcity search relationship-best \"configs/rel_*_${FORMAT}.json\" &gt;&gt; doc/XX_REL_CARD.md;\ndone;\n# -&gt; Fill rel_best_*.yaml using logged results in XX_REL_CARD.md\n\n# Generate CARD with best configs\nfor FORMAT in $(cat lib/formats.txt);\ndo patentcity eval relationship-model data/gold_rel_${FORMAT}.jsonl configs/rel_best_${FORMAT}.yaml &gt;&gt; doc/XX_REL_CARD.md;\ndone;\n</code></pre>"},{"location":"XX_REL_CARD/#ddpatent01","title":"ddpatent01","text":"ALL LOCATION CITIZENSHIP OCCUPATION p 0.99 0.99 0.992 r 0.979 0.992 0.936 f 0.985 0.991 0.964"},{"location":"XX_REL_CARD/#ddpatent02","title":"ddpatent02","text":"ALL LOCATION CITIZENSHIP OCCUPATION p 0.907 0.981 0.767 r 0.89 0.933 0.803 f 0.899 0.956 0.785"},{"location":"XX_REL_CARD/#depatent01","title":"depatent01","text":"ALL LOCATION CITIZENSHIP OCCUPATION p 0.967 0.991 r 0.875 0.997 f 0.918 0.994"},{"location":"XX_REL_CARD/#depatent02","title":"depatent02","text":"ALL LOCATION CITIZENSHIP OCCUPATION p 0.994 0.996 0.985 r 0.988 0.987 0.992 f 0.991 0.991 0.988"},{"location":"XX_REL_CARD/#frpatent01","title":"frpatent01","text":"ALL LOCATION CITIZENSHIP OCCUPATION p 0.99 0.99 r 0.962 0.962 f 0.976 0.976"},{"location":"XX_REL_CARD/#frpatent02","title":"frpatent02","text":"ALL LOCATION CITIZENSHIP OCCUPATION p 0.984 0.984 r 0.997 0.997 f 0.991 0.991"},{"location":"XX_REL_CARD/#gbpatent01","title":"gbpatent01","text":"ALL LOCATION CITIZENSHIP OCCUPATION p 0.954 0.974 0.924 0.961 r 0.93 0.926 0.931 0.943 f 0.942 0.949 0.928 0.952"},{"location":"XX_REL_CARD/#uspatent01","title":"uspatent01","text":"ALL LOCATION CITIZENSHIP OCCUPATION p 0.983 0.983 0.981 r 0.972 0.97 0.978 f 0.977 0.977 0.98"},{"location":"XX_REL_CARD/#uspatent02","title":"uspatent02","text":"ALL LOCATION CITIZENSHIP OCCUPATION p 0.978 0.977 0.983 r 0.986 0.989 0.975 f 0.982 0.983 0.979"},{"location":"XX_REL_CARD/#uspatent03","title":"uspatent03","text":"ALL LOCATION CITIZENSHIP OCCUPATION p 0.987 0.993 0.97 r 0.994 0.998 0.982 f 0.991 0.995 0.976"},{"location":"XX_REL_CARD/#uspatent04","title":"uspatent04","text":"ALL LOCATION CITIZENSHIP OCCUPATION p 0.98 0.98 r 0.815 0.815 f 0.89 0.89"},{"location":"XX_STATISTICAL_AREAS/","title":"STATISTICAL AREAS","text":""},{"location":"XX_STATISTICAL_AREAS/#problem","title":"Problem","text":"<p>We harvest administrative areas from the geocoding. They are already useful, but they have some limitations. In particular, they are not fully satisfying regarding the following features:</p> <ul> <li>between country comparability. We would like to be able to compare countries based on comparable objects (e.g. NUTS)</li> <li>common usage. We want to be able to interoperate our data with external statistics (e.g. demographic data, economic data, structural data)</li> </ul>"},{"location":"XX_STATISTICAL_AREAS/#approach","title":"Approach","text":"<p>We define three levels of \"statistical areas\". Level 1 is more aggregated than level 2 and so on. The below table details the statistical areas for each country.</p> Country code Statistical area 1 Statistical area 2 Statistical area 3 DD - - - DE NUTS1 NUTS2 NUTS3 FR NUTS1 NUTS2 NUTS3 GB NUTS1 NUTS2 NUTS3 US State Commuting Zone (1990) County <p>Info</p> <ul> <li>NUTS Europe (2021)</li> <li>Postal code to NUTS Europe (2021)</li> <li>County to Commuting zone (1990)</li> </ul> Mapping key?<p>Except for the US, we can use the postal code as the primary key for statistical areas. For the US, we us the combination of the state and county (or state and city if county is null).</p> <pre><code>WITH tmp AS (\nSELECT\ncountry_code,\nCAST(patentee.loc_state IS NOT NULL AS INT64) AS has_state,\nCAST(patentee.loc_county IS NOT NULL AS INT64) AS has_county,\nCAST(patentee.loc_postalCode IS NOT NULL AS INT64) AS has_postalCode,\nFROM\n`patentcity.patentcity.v100rc3`,\nUNNEST(patentee) AS patentee\n#WHERE\n#  publication_date&lt;=19800000\n)\nSELECT\ncountry_code,\nSUM(has_state) as has_state,\nSUM(has_county) as has_county,\nSUM(has_postalCode) as has_postalCode\nFROM\ntmp\nGROUP BY\ncountry_code\n</code></pre> country_code has_state has_county has_postalCode DD 495479 495479 495479 DE 7284246 6555370 7366705 FR 1881112 1872960 1864284 GB 1759783 1709290 1750767 US 39675118 29133272 12382827"},{"location":"XX_STATISTICAL_AREAS/#related-issue","title":"Related issue","text":"<p>Administrative areas obtained directly from the geocoding services (<code>loc_state</code> and <code>loc_counties</code>) also exhibit intrinsic limitations:</p> <ul> <li>spelling inconsistencies between geocoding services (e.g. \"Constance\" vs \"Konstanz\")</li> <li>semantic inconsistencies between geocoding services (e.g. districts vs kreis as level 3 administrative area for DE)</li> </ul> <p>Although we recommend the use of statistical areas, we also propose a solution using hand-made crossover tables. We do not implement the harmonization directly in the database as this is partly destructive. The solution (and its history) is described by issue #7.</p>"},{"location":"XX_TRUNC_REPORT/","title":"TRUNC REPORT","text":"format max start_span <code>ddpatent01</code> 600 <code>ddpatent02</code> 700 <code>depatent01</code> 400 <code>depatent02</code> 900 <code>frpatent01</code> 700 <code>frpatent02</code> 1100 <code>gbpatent01</code> 800 <code>uspatent01</code> 600 <code>uspatent02</code> 300 <code>uspatent03</code> 400 <code>uspatent04</code> 600"},{"location":"XX_TRUNC_REPORT/#report-gold_ent_ddpatent01jsonl","title":"REPORT <code>gold_ent_ddpatent01.jsonl</code>","text":"<p>\u2139\ufe0f Unit: char</p>"},{"location":"XX_TRUNC_REPORT/#doc-lengths","title":"Doc lengths","text":"<p>```shell script 300 400 +++ 500 +++++++ 600 ++++++ 700 ++ 800 1300 1400 1500 1600 1700 1800    + 1900    ++ 2000    ++ 2100 2200 2300 2400 2500 2600 2700 2800 2900 3000    + 3100    ++ 3200    ++++ 3300    +++++++++ 3400    +++++++++ 3500    +++++++++ 3600    +++++++++++++ 3700    ++++++++++ 3800    +++ 3900    + 4000 4400 <pre><code>### Span starts\n\n```shell script\n100 +\n200 +++++++++++\n300 ++++++++++++++++++++++\n400 +++++++++++++++++++++++++++++++++++++++++++++\n500 ++++++++++++++++\n600 ++\n700\n800\n900\n1000\n1200\n1300\n1800\n1900\n2000\n2100\n2300\n2600\n3400\n</code></pre></p>"},{"location":"XX_TRUNC_REPORT/#report-gold_ent_ddpatent02jsonl","title":"REPORT <code>gold_ent_ddpatent02.jsonl</code>","text":"<p>\u2139\ufe0f Unit: char</p>"},{"location":"XX_TRUNC_REPORT/#doc-lengths_1","title":"Doc lengths","text":"<p>```shell script 400 500 + 600 700 + 800 + 900 + 1000    ++ 1100    +++++ 1200    ++++++ 1300    +++++++ 1400    ++++++++++++ 1500    +++++++++ 1600    ++++++++++++ 1700    ++++++++++ 1800    ++++++++++ 1900    ++++++ 2000    ++++ 2100    ++ 2200    + 2300 2400 2500 2600 2800 <pre><code>### Span starts\n\n```shell script\n100\n200 +\n300 ++++++++++++++++++++++\n400 ++++++++++++++++++++++++++++++++++++++++++++\n500 +++++++++++++++++++++\n600 +++++\n700 +\n800\n900\n1000\n1100\n1200\n1300\n1400\n1500\n1600\n1700\n</code></pre></p>"},{"location":"XX_TRUNC_REPORT/#report-gold_ent_depatent01jsonl","title":"REPORT <code>gold_ent_depatent01.jsonl</code>","text":"<p>\u2139\ufe0f Unit: char</p>"},{"location":"XX_TRUNC_REPORT/#doc-lengths_2","title":"Doc lengths","text":"<p>```shell script 0 100 +++++ 200 +++++ 300 +++ 400 + 500 +++ 600 700 800 900 1000 1100 1200 1300 1400    + 1500 1600 1700 1800    + 1900    ++ 2000    +++ 2100    ++++ 2200    +++ 2300    +++ 2400    + 2500    + 2600 2700    + 2800    +++ 2900    +++++ 3000    +++++++ 3100    +++++++++++ 3200    ++++++++++ 3300    +++++++ 3400    +++ 3500 3600 4300 <pre><code>### Span starts\n\n```shell script\n0   ++++++++++++++++++++++++\n100 +++++++++++++++++++++++++++++++++++++\n200 ++++++++++++++++++++++++++\n300 ++++++++\n400\n500\n800\n900\n1100\n1200\n1300\n1400\n1700\n1800\n2400\n2700\n2800\n2900\n3000\n3100\n3200\n3300\n</code></pre></p>"},{"location":"XX_TRUNC_REPORT/#report-gold_ent_depatent02jsonl","title":"REPORT <code>gold_ent_depatent02.jsonl</code>","text":"<p>\u2139\ufe0f Unit: char</p>"},{"location":"XX_TRUNC_REPORT/#doc-lengths_3","title":"Doc lengths","text":"<p>```shell script 300 400 +++++ 500 +++++++ 600 ++++++++++++++ 700 ++++++++++++++++++ 800 ++++++++++++++++ 900 ++++++++++ 1000    ++ 1100 1200 2300 2400 2900 3000 3200 3300 3400 3700 3800 3900 4000 4100 4200    + 4300    + 4400    +++ 4500    +++ 4600    +++ 4700    +++++ 4800    ++ 4900    + 5000 5100 <pre><code>### Span starts\n\n```shell script\n0   +++\n100 ++++++++\n200\n300 ++++++\n400 +++++++++++++++\n500 +++++++++++++++++\n600 +++++++++++++\n700 ++++++++\n800 ++\n900\n1000\n1200\n1300\n1400\n1500\n1600\n1700\n1800\n1900\n2000\n2100\n2200\n2300\n2400\n2500\n2600\n2700\n2800    +++\n2900    +++++\n3000    +++++\n3100    +++\n3200    +\n3300\n3400\n3500\n3800\n</code></pre></p>"},{"location":"XX_TRUNC_REPORT/#report-gold_ent_frpatent01jsonl","title":"REPORT <code>gold_ent_frpatent01.jsonl</code>","text":"<p>\u2139\ufe0f Unit: char</p>"},{"location":"XX_TRUNC_REPORT/#doc-lengths_4","title":"Doc lengths","text":"<p>```shell script 900 1000 1100 1200 1300 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400 2500 2600 2700    + 2800    ++++ 2900    +++++++ 3000    +++++++++++++++ 3100    ++++++++++++++ 3200    +++++++ 3300 3400 3500 3600 3700 3800 3900 4000    ++ 4100    ++++ 4200    +++++ 4300    +++++++ 4400    +++++++++ 4500    ++++++ 4600    +++ 4700    + 4800 4900 <pre><code>### Span starts\n\n```shell script\n0   +\n100 ++++++++++++++++++++++++++\n200 ++++++++++++++++++++++++++++++++++++++++\n300 +++++++++++++++++++++\n400 +++\n500 +++\n600 +\n700\n800\n900\n1000\n1100\n1200\n1300\n1400\n1500\n1600\n1700\n1800\n1900\n2100\n2300\n2400\n2500\n2600\n2900\n3400\n</code></pre></p>"},{"location":"XX_TRUNC_REPORT/#report-gold_ent_frpatent02jsonl","title":"REPORT <code>gold_ent_frpatent02.jsonl</code>","text":"<p>\u2139\ufe0f Unit: char</p>"},{"location":"XX_TRUNC_REPORT/#doc-lengths_5","title":"Doc lengths","text":"<p>```shell script 700 +++ 800 +++++++++++++ 900 +++++++++++++++++++++++++ 1000    ++++++++++++++++++++++++ 1100    ++++++++++++++++++++ 1200    ++++++++++ 1300    + 1400 4100 4400 4500 <pre><code>### Span starts\n\n```shell script\n100\n200\n300\n400 +++\n500 +++++++++\n600 ++++++++++++++++++++++++\n700 +++++++++++++++++++++++++++++++++++++++\n800 +++++++++\n900 +++++\n1000    ++++\n1100    +\n1200\n1300\n</code></pre></p>"},{"location":"XX_TRUNC_REPORT/#report-gold_ent_gbpatent01jsonl","title":"REPORT <code>gold_ent_gbpatent01.jsonl</code>","text":"<p>\u2139\ufe0f Unit: char</p>"},{"location":"XX_TRUNC_REPORT/#doc-lengths_6","title":"Doc lengths","text":"<p>```shell script 1000 1800 2000 2100 2200 2300 2400 2500    + 2600    + 2700    + 2800    ++ 2900    ++ 3000    + 3100    ++ 3200    ++ 3300    ++ 3400    +++ 3500    +++ 3600    +++ 3700    +++ 3800    ++++ 3900    ++++++ 4000    +++++++ 4100    ++++++++ 4200    ++++++++ 4300    +++++++++ 4400    ++++++++++ 4500    ++++++ 4600    ++ 4700    + 4800 <pre><code>### Span starts\n\n```shell script\n0   ++\n100 ++++\n200 +++++++++++++++++\n300 +++++++++++++++++++++\n400 ++++++++++++++++++++++\n500 +++++++++++++\n600 +++++\n700 ++\n800\n900\n1000\n1100\n1200\n1300\n1400\n1500\n1600\n1700\n1800\n1900\n2000\n2100\n2200\n2300\n2400\n2500\n2600\n2700\n2800\n2900\n3000\n3100\n3200\n3300\n3400\n3500\n3600\n3700\n3800\n3900\n4000\n4100\n4200\n4300\n4400\n</code></pre></p>"},{"location":"XX_TRUNC_REPORT/#report-gold_ent_uspatent01jsonl","title":"REPORT <code>gold_ent_uspatent01.jsonl</code>","text":"<p>\u2139\ufe0f Unit: char</p>"},{"location":"XX_TRUNC_REPORT/#doc-lengths_7","title":"Doc lengths","text":"<p>```shell script 1700 1900 2000 2100 2200 2300 2400 2600 2700 2800 2900    + 3000    + 3100 3200 3300 3400 3500 3600 3700 3800 3900 4000    + 4100    ++ 4200    + 4300    + 4400    ++ 4500    ++++ 4600    ++++++++++ 4700    +++++++++++++ 4800    ++++++++++++++++++ 4900    +++++++++++++++++ 5000    ++++++++++ 5100    +++ 5200 5300 5400 5500 5600 5900 6000 6200 6300 <pre><code>### Span starts\n\n```shell script\n0   +++++++++++++++++++++++++++++++\n100 +++++++++++++++\n200 +++++++++++++\n300 ++++++++++++++++++++++++\n400 ++++++++++\n500 +\n600\n700\n800\n900\n1000\n1100\n1200\n1500\n1600\n1700\n1900\n2000\n2100\n2200\n2300\n2400\n2500\n2600\n2700\n2800\n2900\n3000\n3100\n3200\n3400\n3500\n3600\n3700\n3800\n3900\n4000\n4100\n4200\n4300\n4400\n4500\n4600\n4700\n4800\n</code></pre></p>"},{"location":"XX_TRUNC_REPORT/#report-gold_ent_uspatent02jsonl","title":"REPORT <code>gold_ent_uspatent02.jsonl</code>","text":"<p>\u2139\ufe0f Unit: char</p>"},{"location":"XX_TRUNC_REPORT/#doc-lengths_8","title":"Doc lengths","text":"<p>```shell script 1300 2000 2200 2800 2900 3000 3100 3200 3300 3400 3500 3600 3700 3800 3900    + 4000    + 4100    + 4200    +++ 4300    +++++++ 4400    ++++++++++++ 4500    +++++++++++++ 4600    +++++++++++++ 4700    ++++++++++++ 4800    ++++++++++ 4900    ++++++++ 5000    ++++++ 5100    +++ 5200    + 5300 <pre><code>### Span starts\n\n```shell script\n0   ++++++++++++++++++++++++++++++++++++\n100 +++++++++++++++++++++++++++++++++++++++++++++++++++\n200 +++++++++\n300\n600\n700\n1000\n1900\n2000\n2100\n2200\n2300\n2400\n2500\n2600\n2800\n2900\n3000\n3100\n3200\n3300\n3500\n3600\n3800\n4000\n4100\n4300\n4400\n4500\n4600\n4700\n</code></pre></p>"},{"location":"XX_TRUNC_REPORT/#report-gold_ent_uspatent03jsonl","title":"REPORT <code>gold_ent_uspatent03.jsonl</code>","text":"<p>\u2139\ufe0f Unit: char</p>"},{"location":"XX_TRUNC_REPORT/#doc-lengths_9","title":"Doc lengths","text":"<p>```shell script 3000 3100 3600 3800 3900 4000 4200 4300 4400 4500 4600 4700 4800 4900    ++ 5000    +++ 5100    ++++++++ 5200    +++++++++++ 5300    +++++++++++++ 5400    ++++++++++++ 5500    ++++++ 5600    +++ 5700    + 5800    + 5900    + 6000 6100 6200 6400 6500 6600 6700 6800 6900    + 7000    +++ 7100    +++ 7200    ++++ 7300    +++ 7400    ++++ 7500    ++ 7600    + 7700 7800 7900 8100 8200 8400 8500 <pre><code>### Span starts\n\n```shell script\n0   +++++++\n100 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n200 +++++++++++++++++++++\n300 +\n400\n500\n600\n700\n800\n1400\n1500\n1700\n1800\n2500\n2600\n2700\n2800\n2900\n3100\n4200\n4800\n5300\n5400\n5500\n6100\n6200\n</code></pre></p>"},{"location":"XX_TRUNC_REPORT/#report-gold_ent_uspatent04jsonl","title":"REPORT <code>gold_ent_uspatent04.jsonl</code>","text":"<p>\u2139\ufe0f Unit: char</p>"},{"location":"XX_TRUNC_REPORT/#doc-lengths_10","title":"Doc lengths","text":"<p>```shell script 100 800 900 1000    + 1100    +++ 1200    ++++ 1300    ++++++ 1400    ++++++++ 1500    ++++++ 1600    ++++++++ 1700    ++++++++++ 1800    ++++++ 1900    +++ 2000    ++++ 2100    +++ 2200    ++ 2300    ++ 2400    ++ 2500    + 2600    + 2700 2800 2900 3000 3100 3300 3400 3500 3600 3800 4100 4500 4800 5000 5300 5400 5500 5600 5700 5800 5900 6000 6100 6200 6300 6400 6500 6600 6700    + 6800    + 6900    + 7000    ++ 7100    ++ 7200    + 7300    + 7400    + 7500 7600 7700 <pre><code>### Span starts\n\n```shell script\n0   +++++++++\n100 +++++++++++++++++++++++++++++++++++++++++++++\n200 ++++++++++++++++++++++++++++++\n300 ++++++++\n400 +++\n500 +\n600\n700\n800\n900\n1000\n1100\n1200\n1300\n1400\n4400\n</code></pre></p>"}]}